<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java枚举</title>
    <link href="/2025/04/08/javapromax02/"/>
    <url>/2025/04/08/javapromax02/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举实际上是一个特殊的类，切不可被继承</p><h2 id="创建枚举类"><a href="#创建枚举类" class="headerlink" title="创建枚举类"></a>创建枚举类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class5</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> A &#123;<br><br>    <span class="hljs-comment">//注意：枚举类的第一行必须罗列的是枚举对象的名字</span><br>    X,Y,Z;<br><br>    <span class="hljs-comment">//后续才可以创建私有成员和方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：枚举类第一行的枚举对象是私有final型，且是枚举类型的对象，实际代码如下：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> A X=<span class="hljs-keyword">new</span> A();    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> A Y=<span class="hljs-keyword">new</span> A();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> A Z=<span class="hljs-keyword">new</span> A();<br></code></pre></td></tr></table></figure><p>后续需要通过A对象进行调用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//通过A对象进行调用</span><br>        A a=A.X;<br>        System.<span class="hljs-keyword">out</span>.println(a);<br><br>        <span class="hljs-comment">//枚举类的构造器是私有的，不可在外部类进行创建对象</span><br>        <span class="hljs-comment">//A a2=new A();</span><br><br>        <span class="hljs-comment">//枚举类提供了很多API供我们使用</span><br>        <span class="hljs-comment">//获得所有枚举值的数组</span><br>        A[] a1 = A.values();<br>        A a2 = A.valueOf(<span class="hljs-string">&quot;Z&quot;</span>);<span class="hljs-comment">//拿到对象Z</span><br>        System.<span class="hljs-keyword">out</span>.println(a2.name());<span class="hljs-comment">//获取a2的名称</span><br>        System.<span class="hljs-keyword">out</span>.println(a2.ordinal());<span class="hljs-comment">//获取a2的索引</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：枚举类的构造器是私有的，不可在外部类进行创建对象</strong></p><h2 id="抽象枚举类"><a href="#抽象枚举类" class="headerlink" title="抽象枚举类"></a>抽象枚举类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class5</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> B &#123;<br><br>    <span class="hljs-comment">//存在抽象方法go(),则不能直接创建B类对象，而是要通过构造函数来创建对象并重写go方法</span><br>    <span class="hljs-title function_">X</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">go</span>(<span class="hljs-params"></span>) &#123;<br><br>        &#125;<br>    &#125;,<span class="hljs-title function_">Y</span>(<span class="hljs-params"><span class="hljs-string">&quot;张三&quot;</span></span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">go</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title function_">getName</span>()+<span class="hljs-string">&quot;再跑~~&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br>    <span class="hljs-title function_">B</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">go</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举的应用场景"><a href="#枚举的应用场景" class="headerlink" title="枚举的应用场景"></a>枚举的应用场景</h2><p>做信息标志和分类（性别）<br>通常情况下我们会建立一个常量类来存储常量，Constant类：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Constant</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BOY=<span class="hljs-number">0</span>;<span class="hljs-comment">//男</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> GIRL=<span class="hljs-number">1</span>;/女<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类Test.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        check(Constant.BOY);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> sex</span>)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (sex)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;男&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;女&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为“男”</p><p>但通常情况下，我们在网页中是通过按钮来实现性别选择的，所以可以采用枚举类Constant2.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Constant2 &#123;<br>    BOY,GIRL;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类Test.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        check(Constant2.BOY);<br>    &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span>(<span class="hljs-params">Constant2 sex</span>)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (sex)&#123;<br>            <span class="hljs-keyword">case</span> BOY:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;男&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GIRL:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;女&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果仍为“男”。<br><strong>注意：这两种方法不存在互相淘汰的情况，各自有各自适用的场合</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java内部类</title>
    <link href="/2025/04/07/javapromax01/"/>
    <url>/2025/04/07/javapromax01/</url>
    
    <content type="html"><![CDATA[<h1 id="Java内部类"><a href="#Java内部类" class="headerlink" title="Java内部类"></a>Java内部类</h1><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>成员内部类是类中的一个普通成员，类似于之前的成员方法、成员变量。如下代码所示：Inner就是成员内部类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.di_inner_class1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age=<span class="hljs-number">66</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String a=<span class="hljs-string">&quot;qqqq&quot;</span>;<br><br>    <span class="hljs-comment">//成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age=<span class="hljs-number">88</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String schoolName;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-comment">//在成员内部类中定义方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(age);<span class="hljs-comment">//输出的是内部类中的age</span><br>            System.<span class="hljs-keyword">out</span>.println(a);<span class="hljs-comment">//输出的是外部类中的a</span><br>            <span class="hljs-built_in">int</span> age=<span class="hljs-number">66</span>;<br>            System.<span class="hljs-keyword">out</span>.println(age);<span class="hljs-comment">//就近原则，输出66</span><br><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">this</span>.age);<span class="hljs-comment">//输出的是内部类中的age</span><br>            System.<span class="hljs-keyword">out</span>.println(Outer.<span class="hljs-keyword">this</span>.age);<span class="hljs-comment">//输出的是外部类中的age</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建内部类成员对象的格式：<code>外部类名.内部类名 对象名=new 外部类名().new 内部类名()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.di_inner_class1;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        //创建成员内部类<span class="hljs-keyword">inner</span>对象<br>        <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">inner</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>().<span class="hljs-built_in">new</span> <span class="hljs-keyword">Inner</span>();<br>        <span class="hljs-keyword">inner</span>.Test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/image/s21.png"></p><p><strong>注意：JDK16之后成员内部类也能定义静态成员了</strong></p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>静态内部类是由static修饰的内部类。<br>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String str;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m;<br><br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> a;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span> &#123;<br>            <span class="hljs-comment">//内部静态方法不能访问外部类对象的实例成员变量</span><br>            <span class="hljs-comment">//System.out.println(m);</span><br>            <br>            <span class="hljs-comment">//内部静态方法可以访问外部类对象的静态成员变量，因为它只有一个，可以被共享</span><br>            System.<span class="hljs-keyword">out</span>.println(str);<br>            <br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//外部静态方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test2</span>()</span> &#123;<br>        <span class="hljs-comment">//静态方法可以直接访问外部类对象的静态成员变量，因为它只有一个，可以被共享</span><br>        System.<span class="hljs-keyword">out</span>.println(str);<br>        <br>        <span class="hljs-comment">//静态方法不能直接访问外部类对象的实例成员变量</span><br>        <span class="hljs-comment">//System.out.println(m);</span><br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>由以上代码可知：外部静态方法和静态内部类中的方法访问外部静态变量和实例变量的情况是相同的：外部类的静态成员变量都可以被访问，因为它只有一个，可以被共享；而外部实例变量只能通过外部对象进行访问</strong></p><p>创建静态内部类成员对象的格式：<code>外部类名.内部类名 对象名=new 外部类名().内部类名()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class2;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br>        //创建静态内部类<br>        <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">inner</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span>();<br>        <span class="hljs-keyword">inner</span>.Test();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="匿名内部类（重点）"><a href="#匿名内部类（重点）" class="headerlink" title="匿名内部类（重点）"></a>匿名内部类（重点）</h2><p>匿名内部类是一种特殊的局部内部类，所谓匿名：指的是程序员不需要为这个类声明名字。</p><p>通常情况下，我们会写以下代码，为抽象类Animal创建一个继承它的子类Cat，在子类中重写方法cry()</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Animal cat=<span class="hljs-keyword">new</span> Cat();<br>        cat.cry();<br>        <br>    &#125;<br>    <br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-title">extends</span> <span class="hljs-title">Animal</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而匿名内部类的用法就是不需要创建一个继承父类的子类，更加方便，创建形式为</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">new</span> 类或接口(参数值)&#123;<br>    类体（一般是方法重写）<br>    &#125;<br></code></pre></td></tr></table></figure><p>如下代码所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//程序会将该匿名内部类编译成一个子类，并且会创建出一个子类对象</span><br>        Animal a=<span class="hljs-keyword">new</span> Animal()&#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span> &#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>            &#125;<br>        &#125;;<br>        a.cry();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>深究原理Class文件，发现多出了Test$1.class文件，如下所示：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class3;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test$1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-type">Test</span>$<span class="hljs-number">1</span>() &#123;<br>    &#125;<br><br>    public void cry() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序将自动创建一个子类Test$1来继承父类</p><h3 id="匿名内部类的常见使用场景"><a href="#匿名内部类的常见使用场景" class="headerlink" title="匿名内部类的常见使用场景"></a>匿名内部类的常见使用场景</h3><p>通常作为一个参数传输给方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>       <span class="hljs-comment">//调用howl，将匿名内部类作为一个参数传到howl方法中        </span><br>        howl(<span class="hljs-keyword">new</span> Animal()&#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span> &#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br><br>    <span class="hljs-comment">//定义一个静态方法howl，接收Animal类型参数a，调用a对象的方法cry</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">howl</span>(<span class="hljs-params">Animal a</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;开始叫----------&quot;</span>);<br>        a.cry();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用howl部分与以下代码作用相同，只不过更加简洁：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Animal a=<span class="hljs-keyword">new</span> Animal()&#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br>&#125;;<br>howl(a); <br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s22.png"></p><h3 id="匿名内部类在开发中的真实应用场景"><a href="#匿名内部类在开发中的真实应用场景" class="headerlink" title="匿名内部类在开发中的真实应用场景"></a>匿名内部类在开发中的真实应用场景</h3><p>创建一个窗口，添加登录按钮，给登录按钮添加监听事件，这里用到匿名内部类，一般我们不会专门写匿名内部类,而是在需要的时候再去用。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.di_inner_class4;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//GUI界面</span><br><br>        <span class="hljs-comment">//创建窗口</span><br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;登录界面&quot;</span>);<br><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<span class="hljs-comment">//创建桌布</span><br>        frame.add(panel);<br><br>        JButton btn=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;登录&quot;</span>);<br>        panel.add(btn);<span class="hljs-comment">//将按钮加到桌布上</span><br><br>        <span class="hljs-comment">//给按钮绑定单击事件监听器，这里使用了匿名内部类</span><br>        btn.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                JOptionPane.showMessageDialog(frame,<span class="hljs-string">&quot;登录成功&quot;</span>);<br>            &#125;<br><br>        &#125;);<br><br>        <span class="hljs-comment">//lanmda表达式</span><br>        <span class="hljs-comment">//btn.addActionListener(e -&gt; JOptionPane.showMessageDialog(frame,&quot;登录成功&quot;));</span><br><br><br>        frame.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        frame.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s23.png"></p><p><strong>如上代码所示，程序提供的接口ActionListener直接采用匿名内部类进行调用。</strong></p><p><strong>因此，匿名内部类的最终目的是简化代码，后续学到的lanmda表达式将更加简洁</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟ATM机系统</title>
    <link href="/2025/04/06/java18/"/>
    <url>/2025/04/06/java18/</url>
    
    <content type="html"><![CDATA[<h1 id="ATM机系统实践"><a href="#ATM机系统实践" class="headerlink" title="ATM机系统实践"></a>ATM机系统实践</h1><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>首先实现用户登录、用户开户功能（8位卡号由系统自动生成）</li><li>用户登录之后的功能：查询账户信息、存款、取款、修改密码、转账、退出、注销账户</li></ul><p style="text-indent: 2em;">采用面向对象的编程思想：首先需要一个Account类来存储封装用户的信息，再创建一个ATM类来实现主界面和方法的实现，最后创建一个测试类ATMTest来测试整体功能。</p>  <h2 id="自己编写代码"><a href="#自己编写代码" class="headerlink" title="自己编写代码"></a>自己编写代码</h2><p>以下是本人自己写的，存在很多bug😂  </p><p>Account.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">pkg</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> accountID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br>    <span class="hljs-keyword">private</span> double limitwithdraw;<span class="hljs-comment">//限制最大取款额度</span><br>    <span class="hljs-keyword">private</span> double balance;<span class="hljs-comment">//账户余额</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>() &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> sex, <span class="hljs-title class_">String</span> password, double limitwithdraw) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limitwithdraw</span> = limitwithdraw;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getSex</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSex</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> sex</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> double <span class="hljs-title function_">getLimitwithdraw</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setLimitwithdraw</span>(<span class="hljs-params">double limitwithdraw</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limitwithdraw</span> = limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPassword</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> password</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> double <span class="hljs-title function_">getBalance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBalance</span>(<span class="hljs-params">double balance</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span> = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAccountID</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> accountID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAccountID</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> accountID</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">accountID</span> = accountID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">double amount1</span>) &#123;<span class="hljs-comment">//取款</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span> -= amount1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">double amount2</span>) &#123;<span class="hljs-comment">//存款</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span> +=amount2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;性别：&quot;</span> + sex + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;卡号：&quot;</span> + accountID + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;密码：&quot;</span> + password + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;最大取款额度&quot;</span> + limitwithdraw +<span class="hljs-string">&quot;\n&quot;</span>+<br>                <span class="hljs-string">&quot;账户余额：&quot;</span> + balance ;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ATM.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Random;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ATM</span> &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>    Random random = <span class="hljs-keyword">new</span> Random();<br><br>    Account account=<span class="hljs-keyword">new</span> Account();<br><br>    ArrayList&lt;Account&gt; ATMs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    String nowAccount;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerATM</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户姓名: &quot;</span>);<br>        String name = sc.nextLine();<br>        account.setName(name);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入户主性别: &quot;</span>);<br>        String sex = sc.nextLine();<br>        account.setSex(sex);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户密码: &quot;</span>);<br>        String pwd = sc.nextLine();<br>        account.setPassword(pwd);<br><br>        String pwd2;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请再次输入开户密码: &quot;</span>);<br>        pwd2 = sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!pwd2.<span class="hljs-keyword">equals</span>(account.getPassword()))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;与上次密码不相同，请重新输入开户密码: &quot;</span>);<br>            pwd2 = sc.nextLine();<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款的最大限制额度： &quot;</span>);<br>        <span class="hljs-built_in">double</span> limitBalance = sc.nextDouble();<br>        account.setLimitwithdraw(limitBalance);<br><br>        String t=randomBalance();<br>        account.setAccountID(t);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+account.getName()+<span class="hljs-string">&quot;开户成功，您的卡号为&quot;</span>+t);<br><br>        ATMs.<span class="hljs-keyword">add</span>(account);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginATM</span>()</span> &#123;<br>        String AccountID;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入您的卡号：&quot;</span>);<br>        AccountID=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!checkAccountID(AccountID))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的卡号不存在，请再次输入卡号: &quot;</span>);<br>            AccountID = sc.nextLine();<br>        &#125;<br><br>        nowAccount=AccountID;<br><br>        String password;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入您的密码：&quot;</span>);<br>        password=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!password.<span class="hljs-keyword">equals</span>(account.getPassword()))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请再次输入您的密码：&quot;</span>);<br>            password=sc.nextLine();<br>        &#125;<br><br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">system</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择业务：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:查询账户信息&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:存款&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:取款&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;4:修改密码&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;5:转账&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;6:退出&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;7:注销账户&quot;</span>);<br>        String choice1 = sc.nextLine();<br>        <span class="hljs-keyword">switch</span> (choice1)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                System.<span class="hljs-keyword">out</span>.println(account.toString());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入存款金额：&quot;</span>);<br>                <span class="hljs-built_in">double</span> amount1 = sc.nextDouble();<br>                account.deposit(amount1);<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存款成功~，当前余额为：&quot;</span>+account.getBalance());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                <span class="hljs-built_in">double</span> amount2;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款金额：&quot;</span>);<br>                amount2 = sc.nextDouble();<br>                <span class="hljs-keyword">if</span>(!isLimteDraw(amount2)) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;超出了最大取款额度&quot;</span>+account.getLimitwithdraw()+<span class="hljs-string">&quot;,请重新输入:&quot;</span>);<br>                    amount2 = sc.nextDouble();<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    account.withdraw(amount2);<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜取款成功，当前余额为&quot;</span>+account.getBalance());<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                modifyPwd();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span>:<br>                transferAccounts();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;6&quot;</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;欢迎下次光临！&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;7&quot;</span>:<br>                unsubscribe(nowAccount);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-literal">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyPwd</span>()</span>&#123;<br>        String password;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入原密码：&quot;</span>);<br>        password=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!password.<span class="hljs-keyword">equals</span>(account.getPassword()))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请再次输入原密码：&quot;</span>);<br>            password=sc.nextLine();<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入新密码：&quot;</span>);<br>        String newPassword = sc.nextLine();<br>        account.setPassword(newPassword);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span>()</span>&#123;<br>        String AccountID;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入对方卡号：&quot;</span>);<br>        AccountID=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!checkAccountID(AccountID)) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;该卡号不存在，请重新输入：&quot;</span>);<br>            AccountID=sc.nextLine();<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入转账的金额：&quot;</span>);<br>        <span class="hljs-built_in">double</span> amount = sc.nextDouble();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (AccountID.<span class="hljs-keyword">equals</span>((ATMs.<span class="hljs-keyword">get</span>(i)).getAccountID()))&#123;<br>                (ATMs.<span class="hljs-keyword">get</span>(i)).deposit(amount);<br>            &#125;<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;转账成功&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unsubscribe</span>(<span class="hljs-params">String AccountID</span>)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (AccountID.<span class="hljs-keyword">equals</span>((ATMs.<span class="hljs-keyword">get</span>(i)).getAccountID()))&#123;<br>                ATMs.<span class="hljs-keyword">remove</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">isLimteDraw</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> amount</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (amount&gt;account.getLimitwithdraw()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">randomBalance</span>()</span> &#123;<br>        String balance1 = <span class="hljs-string">&quot;1234567890&quot;</span>;<br>        String balance = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-built_in">int</span> r = random.nextInt(balance1.length());<br>            <span class="hljs-built_in">char</span> c = balance1.charAt(r);<br>            balance += c;<br>        &#125;<br>        <span class="hljs-keyword">return</span> balance;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">checkAccountID</span>(<span class="hljs-params">String AccountID</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (AccountID.<span class="hljs-keyword">equals</span>((ATMs.<span class="hljs-keyword">get</span>(i)).getAccountID()))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mainATM</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择业务：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:用户登录&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:用户开户&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:退出系统&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>            String choice = sc.nextLine();<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-keyword">if</span>(ATMs.size()==<span class="hljs-number">0</span>) &#123;<br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您还未开户&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----注册----&quot;</span>);<br>                    loginATM();<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    registerATM();<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----登录----&quot;</span>);<br>                    loginATM();<br>                    system();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;谢谢光临！欢迎下次再来&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-literal">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>ATMTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pkg;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATMTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ATM</span> <span class="hljs-variable">atm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ATM</span>();<br>        atm.mainATM();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Bug修改"><a href="#Bug修改" class="headerlink" title="Bug修改"></a>Bug修改</h2><h3 id="ATM类"><a href="#ATM类" class="headerlink" title="ATM类"></a>ATM类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Random;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ATM</span> &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>    Random random = <span class="hljs-keyword">new</span> Random();<br><br>    <span class="hljs-keyword">private</span> Account loginAccount;<span class="hljs-comment">//创建成员变量，记录当前登录的账户</span><br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Account&gt; ATMs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//创建集合，存储Account对象</span><br><br><br>     <span class="hljs-comment">/** 完成用户开户操作*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerATM</span>()</span> &#123;<br>        Account account=<span class="hljs-keyword">new</span> Account();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===系统开户操作===&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户名称: &quot;</span>);<br>        String name = sc.next();<br>        account.setName(name);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//用户输入的性别不是男或女，则再次循环输入</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入户主性别: &quot;</span>);<br>            <span class="hljs-built_in">char</span> sex = sc.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//因为sc.next()返回的是一个String字符串，所以需要提取第一个字符</span><br>            <span class="hljs-comment">//户主性别判断</span><br>            <span class="hljs-keyword">if</span>(sex==<span class="hljs-string">&#x27;男&#x27;</span> || sex==<span class="hljs-string">&#x27;女&#x27;</span>)&#123;<br>                <span class="hljs-comment">//是男或女</span><br>                account.setSex(sex);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//不是男或女</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;性别只能输入&#x27;男&#x27;或&#x27;女&#x27;&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">/**善用while(true)循环，这里先将两次密码进行比较，若相同才将其存入account对象中*/</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户密码: &quot;</span>);<br>            String pwd = sc.next();<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请再次输入开户密码: &quot;</span>);<br>            String pwd2 = sc.next();<br>            <span class="hljs-keyword">if</span>(pwd.<span class="hljs-keyword">equals</span>(pwd2))&#123;<br>                account.setPassword(pwd);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您两次输入的密码不一致，请您确认~&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款的最大限制额度： &quot;</span>);<br>        <span class="hljs-built_in">double</span> limitBalance = sc.nextDouble();<br>        account.setLimitwithdraw(limitBalance);<br><br>        String t=randomBalance();<span class="hljs-comment">//将随机生成的卡号赋给一个String变量，此后就调用这个变量，再次调用方法就会重新生成一个</span><br>        account.setAccountID(t);<br><br>        ATMs.<span class="hljs-keyword">add</span>(account);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+account.getName()+<span class="hljs-string">&quot;开户成功，您的卡号是：&quot;</span>+account.getAccountID());<br>    &#125;<br><br><br>    <span class="hljs-comment">/** 随机生成8位卡号，且后续的用户的卡号不可与之前用户的卡号相同*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">randomBalance</span>()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//如果acc!=null,则继续循环直到位null为止</span><br>            String accountID = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//创建一个空字符串，存放卡号</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<span class="hljs-comment">//循环8次</span><br>                <span class="hljs-built_in">int</span> r = random.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//随机生成0~9的一个数字</span><br>                accountID += r;<span class="hljs-comment">//加到accountID字符串后面</span><br>            &#125;<br>            <span class="hljs-comment">//调用getAccount()方法判断该卡号是否已存在</span><br>            Account acc=getAccount(accountID);<br>            <span class="hljs-keyword">if</span>(acc==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//卡号不存在，则说明该卡号可以使用作为一个新卡号</span><br>                <span class="hljs-keyword">return</span> accountID;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/** 根据卡号查询账户对象，确保卡号与之前设置过的不一致 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Account <span class="hljs-title">getAccount</span>(<span class="hljs-params">String accountID</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++) &#123;<span class="hljs-comment">//遍历ATMs集合</span><br>            Account ac=ATMs.<span class="hljs-keyword">get</span>(i);<br>            <span class="hljs-comment">//判断每个Account对象的卡号是否与新输入的卡号相同</span><br>            <span class="hljs-keyword">if</span>(ac.getAccountID().<span class="hljs-keyword">equals</span>(accountID))&#123;<br>                <span class="hljs-comment">//相同则返回该卡号</span><br>                <span class="hljs-keyword">return</span> ac;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//没有找到相同的卡号则返回null，说明不存在该卡号</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/** 登录操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginATM</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span>(ATMs.size()==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断当前系统是否有账户</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;当前系统中无任何账户，请先开户再来登录~~&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<span class="hljs-comment">//退出登录</span><br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;====登录操作====&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入您的卡号：&quot;</span>);<br>            String AccountID=sc.next();<br><br>            <span class="hljs-comment">//判断卡号是否存在</span><br>            Account acc=getAccount(AccountID);<br>            <span class="hljs-keyword">if</span> (acc==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//卡号不存在</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的卡号不存在，请确认~ &quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//密码不正确，则进入循环重新输入密码</span><br>                    <span class="hljs-comment">//卡号存在，则输入密码</span><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>                    String password=sc.next();<br><br>                    <span class="hljs-comment">//判断密码是否正确</span><br>                    <span class="hljs-keyword">if</span> (password.<span class="hljs-keyword">equals</span>(acc.getPassword()))&#123;<br>                        <span class="hljs-comment">//密码正确</span><br>                        loginAccount = acc;<span class="hljs-comment">//将该账户对象赋给当前登录用户的成员变量</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+acc.getName()+<span class="hljs-string">&quot;登录成功,您的卡号为：&quot;</span>+acc.getAccountID());<br>                        loginsystem();<span class="hljs-comment">//登录成功后直接进入登录主界面</span><br>                        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//跳出并结束当前登录方法</span><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//密码不正确</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请确认~&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 修改密码操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyPwd</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==修改密码操作==&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//输入的原密码不相同，进入循环重新输入</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入原密码：&quot;</span>);<br>            String password=sc.next();<br><br>            <span class="hljs-comment">//判断用户输入的原密码是否与系统中存入的密码一致</span><br>            <span class="hljs-keyword">if</span>(password.<span class="hljs-keyword">equals</span>(loginAccount.getPassword()))&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//两次密码不一致则进入循环重新输入</span><br>                    <span class="hljs-comment">//输入的原密码一致</span><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入新密码：&quot;</span>);<br>                    String newPassword = sc.next();<br><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请确认新密码：&quot;</span>);<br>                    String isNewPassword = sc.next();<br><br>                    <span class="hljs-comment">//判断两次新密码是否一致</span><br>                    <span class="hljs-keyword">if</span>(newPassword.<span class="hljs-keyword">equals</span>(isNewPassword))&#123;<br>                        <span class="hljs-comment">//两次新密码一致，成功修改密码</span><br>                        loginAccount.setPassword(newPassword);<br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜您成功修改密码&quot;</span>);<br>                        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//修改成功后，终止修改密码方法，返回到登录功能选择操作</span><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//两次密码不一致</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;两次密码输入不一致，请您确认~&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//输入的原密码不相同</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;抱歉您输入的密码与原密码不一致，请您确认~&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 转账 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==用户转账==&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否有其他账户</span><br>        <span class="hljs-keyword">if</span> (ATMs.size()&lt;<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断自己账户是否有钱</span><br>        <span class="hljs-keyword">if</span>(loginAccount.getBalance()==<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的账户余额为0,不能转账&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//对方卡号输入不正确，需要循环重新输入</span><br>            <span class="hljs-comment">//提醒用户输入对方卡号</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入对方卡号：&quot;</span>);<br>            String AccountID = sc.next();<br><br>            <span class="hljs-comment">//判断对方账号是否存在</span><br>            Account acc=getAccount(AccountID);<br>            <span class="hljs-keyword">if</span> (acc==<span class="hljs-literal">null</span>)&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的对方的卡号不存在~~&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//认证对方姓氏不正确，需要循环冲输入</span><br>                    <span class="hljs-comment">//认证对方姓氏,将对方的姓氏遮盖提示给用户</span><br>                    String name=acc.getName();<br>                    String coverName=name.replace(name.charAt(<span class="hljs-number">0</span>),<span class="hljs-string">&#x27;*&#x27;</span>);<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请您输入【&quot;</span>+coverName+<span class="hljs-string">&quot;】的姓氏:&quot;</span>);<br>                    <span class="hljs-built_in">char</span> preName = sc.next().charAt(<span class="hljs-number">0</span>);<br><br>                    <span class="hljs-comment">//判断姓氏是否正确</span><br>                    <span class="hljs-keyword">if</span>(preName == (name.charAt(<span class="hljs-number">0</span>)))&#123;<span class="hljs-comment">//正确</span><br>                        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//当自己账户没有那么多钱时，会循环重新输入转账金额</span><br>                            <span class="hljs-comment">//认证通过了，开始进行转账</span><br>                            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入转账的金额：&quot;</span>);<br>                            <span class="hljs-built_in">double</span> amount = sc.nextDouble();<br>                            <span class="hljs-comment">//判断这个金额是否超过自己的余额</span><br>                            <span class="hljs-keyword">if</span>(loginAccount.getBalance() &gt;= amount)&#123;<br>                                <span class="hljs-comment">//可以转账</span><br>                                <span class="hljs-comment">//更新自己账户余额</span><br>                                loginAccount.setBalance(loginAccount.getBalance() - amount);<br>                                <span class="hljs-comment">//更新对方账户余额</span><br>                                acc.setBalance(acc.getBalance() + amount);<br>                                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜您转账成功，您当前余额为&quot;</span>+loginAccount.getBalance());<br>                                <span class="hljs-keyword">return</span>;<span class="hljs-comment">//直接结束该方法</span><br>                            &#125;<span class="hljs-keyword">else</span>&#123;<br>                                <span class="hljs-comment">//余额不足，不可以转账</span><br>                                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您余额不足，无法给对方转这么多钱，您当前余额为&quot;</span>+loginAccount.getBalance());<br>                            &#125;<br>                        &#125;<br><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//不正确</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;抱歉，您认证的姓氏有问题~~&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br><br><br>    &#125;<br><br><br>    <span class="hljs-comment">/** 注销操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> boolean <span class="hljs-title">unsubscribe</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==销户操作==&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请问您确认销户吗？y/n&quot;</span>);<br>        String command = sc.next();<br>        <span class="hljs-keyword">switch</span> (command)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                <span class="hljs-comment">//确实要销户</span><br>                <span class="hljs-keyword">if</span>(loginAccount.getBalance()==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//账户没钱，进行销户</span><br>                    ATMs.<span class="hljs-keyword">remove</span>(loginAccount);<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的账户已经成功销户&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;抱歉亲，您的账户还有钱，不可以销户~~&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            <span class="hljs-literal">default</span>:<br>                <span class="hljs-comment">//不销户</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;好的，您的账户保留~~&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/** 登录成功后的主界面及操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginsystem</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(loginAccount.getName()+<span class="hljs-string">&quot;,请您选择业务：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:查询账户信息&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:存款&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:取款&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;4:修改密码&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;5:转账&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;6:退出&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;7:注销账户&quot;</span>);<br>            <span class="hljs-built_in">int</span> choice1 = sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (choice1)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">//查询当前账户</span><br>                    System.<span class="hljs-keyword">out</span>.println(loginAccount.toString());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-comment">//存款</span><br>                    loginAccount.deposit();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-comment">//取款</span><br>                    loginAccount.withdraw();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    <span class="hljs-comment">//密码修改</span><br>                    modifyPwd();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    <span class="hljs-comment">//转账</span><br>                    transferAccounts();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                    <span class="hljs-comment">//退出</span><br>                    System.<span class="hljs-keyword">out</span>.println(loginAccount.getName()+<span class="hljs-string">&quot;,您退出系统成功，欢迎下次光临！&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//跳出并结束当前方法</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                    <span class="hljs-comment">//注销账户</span><br>                    <span class="hljs-keyword">if</span>(unsubscribe())&#123;<br>                        <span class="hljs-comment">//销户成功，回到欢迎界面</span><br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-comment">//销户失败，回到登录主界面</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-literal">default</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您当前选择的操作不正确，请重新选择~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 启动ATM系统 展示欢迎界面*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mainATM</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;=======欢迎您进入ATM系统=======&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:用户登录&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:用户开户&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:退出系统&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>            <span class="hljs-built_in">int</span> choice = sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    loginATM();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    registerATM();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;谢谢光临！欢迎下次再来&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-literal">default</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;没有该操作&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意：ATM类中的所有方法的访问权限为private，以防止其他类访问该类中的方法导致信息泄露</strong></p><p><strong>注意：sc.next()与sc.nextLine()的异同：</strong></p><ul><li>同：扫描结果都为String型</li><li>异：next()只读取到下一个空白字符为止的内容，不读取空格和制表符；nextLine()则读取从当前位置到换行符之间的所有内容，会读取空格和制表符。</li></ul><p>所以经常遇到一种情况：当程序中两种都有使用时，nextLine()会读取上段代码残留的换行符，导致用户还未输入内容就做出了反应。 </p><p><strong>注意：善用return和break：return可以直接结束整个方法；break终止离其最近的循环（switch、for、while等），while循环中套了switch循环，在switch循环中使用break后只结束switch循环，外层的while循环还符合条件则会重新执行while循环</strong></p><p><strong>注意：注册成功之后就进入登录系统，可以直接在注册方法内调用登录方法，不要再主界面内分别调用（会难以控制）</strong></p><p><strong>注意：善用while(true)循环，例如登录时输入密码操作：密码不正确时直接使用while(true)让用户重新输入密码即可</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//密码不正确，则进入循环重新输入密码</span><br>                    <span class="hljs-comment">//卡号存在，则输入密码</span><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>                    String password=sc.next();<br><br>                    <span class="hljs-comment">//判断密码是否正确</span><br>                    <span class="hljs-keyword">if</span> (password.<span class="hljs-keyword">equals</span>(acc.getPassword()))&#123;<br>                        <span class="hljs-comment">//密码正确</span><br>                        loginAccount = acc;<span class="hljs-comment">//将该账户对象赋给当前登录用户的成员变量</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+acc.getName()+<span class="hljs-string">&quot;登录成功,您的卡号为：&quot;</span>+acc.getAccountID());<br>                        loginsystem();<span class="hljs-comment">//登录成功后直接进入登录主界面</span><br>                        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//跳出并结束当前登录方法</span><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//密码不正确</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请确认~&quot;</span>);<br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure><h3 id="Account类"><a href="#Account类" class="headerlink" title="Account类"></a>Account类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">char</span> sex;<br>    <span class="hljs-keyword">private</span> String accountID;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> limitwithdraw;<span class="hljs-comment">//限制最大取款额度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> balance;<span class="hljs-comment">//账户余额</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>()</span> &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>(<span class="hljs-params">String name, <span class="hljs-built_in">char</span> sex, String accountID, String password, <span class="hljs-built_in">double</span> limitwithdraw, <span class="hljs-built_in">double</span> balance</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.accountID = accountID;<br>        <span class="hljs-keyword">this</span>.password = password;<br>        <span class="hljs-keyword">this</span>.limitwithdraw = limitwithdraw;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> name +(sex == <span class="hljs-string">&#x27;男&#x27;</span>?<span class="hljs-string">&quot;先生&quot;</span>:<span class="hljs-string">&quot;女士&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span> <span class="hljs-title">getSex</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> sex</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAccountID</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccountID</span>(<span class="hljs-params">String accountID</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.accountID = accountID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span>(<span class="hljs-params">String password</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getLimitwithdraw</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLimitwithdraw</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> limitwithdraw</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.limitwithdraw = limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getBalance</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> balance</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 取款 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===取款操作===&quot;</span>);<br>        <span class="hljs-comment">//判断账户余额是否达到100元</span><br>        <span class="hljs-keyword">if</span> (getBalance() &lt; <span class="hljs-number">100</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的账户余额不足100元，不允许取钱&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//让用户输入取款金额</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款金额：&quot;</span>);<br>            <span class="hljs-built_in">double</span> amount2 = sc.nextDouble();<br>            <span class="hljs-keyword">if</span> (amount2 &lt;= getBalance()) &#123;<br>                <span class="hljs-comment">//判断当前取款金额是否超过取款限额</span><br>                <span class="hljs-keyword">if</span>(amount2 &gt; getLimitwithdraw()) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您当前取款金额超过了每次取款金额，您每次最多可取&quot;</span>+getLimitwithdraw()+<span class="hljs-string">&quot;元&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//可以取款</span><br>                    <span class="hljs-keyword">this</span>.balance -=amount2;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜您取款成功，取款后剩余&quot;</span>+getBalance()+<span class="hljs-string">&quot;元&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//跳出while循环</span><br>                &#125;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;余额不足，您的账户余额是&quot;</span>+getBalance());<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 存款 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===存款操作===&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入存款金额：&quot;</span>);<br>        <span class="hljs-built_in">double</span> amount1 = sc.nextDouble();<br>        <span class="hljs-keyword">this</span>.balance +=amount1;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存款成功~，当前余额为：&quot;</span>+getBalance());<br>    &#125;<br><br><br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;当前您的账户信息如下：&quot;</span>+<span class="hljs-string">&#x27;\n&#x27;</span>+<br>                <span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;性别：&quot;</span> + sex + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;卡号：&quot;</span> + accountID + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;密码：&quot;</span> + password + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;最大取款额度&quot;</span> + limitwithdraw +<span class="hljs-string">&quot;\n&quot;</span>+<br>                <span class="hljs-string">&quot;账户余额：&quot;</span> + balance ;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：直接在Account定义具体的存款取款方法，然后再ATM类使用Account对象直接调用这两个方法即可</strong></p><h3 id="ATMTest类不变"><a href="#ATMTest类不变" class="headerlink" title="ATMTest类不变"></a>ATMTest类不变</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java API——String与ArrayList</title>
    <link href="/2025/04/01/java17/"/>
    <url>/2025/04/01/java17/</url>
    
    <content type="html"><![CDATA[<p>Java API是java提供给我们的程序，方便我们完成功能，其构成也是多个类组成的包</p><h1 id="包-Package"><a href="#包-Package" class="headerlink" title="包|Package"></a>包|Package</h1><p>包用来管理不同的程序  </p><p><font size='3'>那么一类如何调用包中的另一个类呢？</font></p><ul><li>调用相同包的类：无需import，创建另一个类的类类型实例，直接就可调用。</li><li>调用不同包的类:需要写入import 包名.类名，再创建另一个类的类类型实例，便可调用。</li><li>调用java提供的类（API）：需要写入import 包名.类名，再创建另一个类的类类型实例，便可调用；但java.lang包下的类不需要import。</li><li>调用相同名称却在不同包中的类：只能import其中一个类，当需要调用另一个类时，则需要写全——包名.类名才可调用。</li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String概述"><a href="#String概述" class="headerlink" title="String概述"></a>String概述</h2><p>String类在java.lang包中<br>它代表字符串，可以创建字符串并且对其进行封装，对其进行处理。String封装数据的方式有两种：①直接利用””；②利用new String()封装器</p><ul><li>直接给变量赋值字符串，封装字符串:<code>String str=&quot;abc&quot;;</code></li><li>利用构造器创建字符串对象并初始化：<code>String str=new String();</code></li><li>利用构造器从字符数组中获取字符串：<code>char[] chars=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;  String str=new String(chars);</code></li><li>利用构造器从字节数组中获得字符串：<code>byte[] bytes=&#123;97,98,99&#125;;  String str=new String(bytes);//最后输出为abc</code></li></ul><h2 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h2><p><code>String str=&quot;Java是世界上最好的编程语言之一&quot;</code></p><ul><li><p><strong>charAt(int i)</strong>：获取索引i位置的字符。<code>char c=str.charAt(1);//结果为a</code><br>   可用于字符的遍历：快捷用法：<code>str.length().fori</code>回车补全for循环——&gt;</p>   <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">str</span>.length();i++)&#123;<span class="hljs-comment">//注意：字符串获取长度有()</span><br>   <span class="hljs-built_in">char</span> c=<span class="hljs-built_in">str</span>.charAt(i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>length()</strong>:获取字符串的长度。<code>int n=str.length();//结果为17</code> </p></li><li><p><strong>toCharArray()</strong>:将字符串转变为字符数组。<code>char[] chars=str.toCharArray; int n=chars.length;//注意：数组获取长度无()</code>  </p></li><li><p><strong>equals()</strong>:比较两个字符串内容是否相同。<code>String str1=&quot;abc&quot;; boolean b=str.equals(str1);//结果为false</code><br>注意：&#x3D;&#x3D;符号比较的是两个字符串引用的实例是否相同  </p></li><li><p><strong>equalsIgnoreCase()</strong>:忽略字母大小写比较两个字符串内容是否相同（一般用于验证码）。<code>String str1=&quot;abc&quot;; String str2=&quot;ABc&quot;; boolean b=str1.equalsIgnoreCase(str2);//结果为true</code>  </p></li><li><p><strong>subString(int i,int j)</strong>:截取索引i到j的字符串（包括i不包括j）。<code>String s=str.subString(0,4);//结果为java</code><br>这里有个小技巧，不需要自己去数末尾字符的索引，选中要截取的字符串，IDEA右下角就会出现选中字符串的长度</p></li><li><p><strong>subString(int i)</strong>:截取索引i处及后面所有的字符串</p></li><li><p><strong>replace(“A”,”B”)</strong>:用B代替A，返回字符串。<code>String str3=str.replace(&quot;Java&quot;,&quot;C&quot;);//结果为&quot;C是世界上最好的编程语言之一&quot;</code></p></li><li><p><strong>contains(“A”)</strong>:判断字符串中是否包含A。<code>boolean d=str.contains(&quot;Java&quot;);//结果为true</code></p></li><li><p><strong>startswith(“A”)</strong>:判断字符串是否由A开头。<code>boolean c=str.startswith(&quot;Java1&quot;);//结果为false</code></p></li><li><p><strong>split(“A”)</strong>:根据A进行分割字符串，获得一个字符串数组。<code>String str4=&quot;Java,C,C++,Go&quot;; String[] str5=str4.split(&quot;,&quot;);</code></p></li></ul><h2 id="String使用时的注意事项"><a href="#String使用时的注意事项" class="headerlink" title="String使用时的注意事项"></a>String使用时的注意事项</h2><ul><li><p><strong>String对象是不可变的字符串对象，一旦被创建它的内容就是无法被修改的，通常只是又创建了一个新的字符串对象（新地址），由另外一个字符串对象去引用它（节约空间）</strong></p></li><li><p><strong>利用””创建的两个字符串对象，若它们内容相同，那么两个字符串对象便相等</strong>：这是因为””创建的内容相同的字符串常量被放到了堆内存的字符串常量池中，栈内存内的字符串对象只需引用那一个即可（也就是字符串对象引用的实例（的地址）相同）。<code>String str1=&quot;abc&quot;; String str2=&quot;abc&quot;; System.out.print(str1==str2);//结果为true</code></p></li><li><p><strong>利用new创建的两个字符串对象，即使内容相同，它们也不相等</strong> ：使用new每创建一个字符串对象，堆内存便会创建一个新的地址来存放该对象，栈内存内的两个字符串对象需要分别引用它们,（也就是字符串对象引用的实例（的地址）不同了）。<code>String str1=new String(&quot;abc&quot;); String str2=new String(&quot;abc&quot;);; System.out.print(str1==str2);//结果为flase</code></p></li></ul><p><font size="4"><strong>练习题1</strong>：这段代码<code>String str=new String(&quot;abc&quot;)</code>创建了几个字符串对象</font></p><p>答案是：两个，程序先在堆内存的字符串常量池中创建了”abc”对象，又利用new在堆内存创建了新的字符串对象。</p><p><font size="4"><strong>练习题2</strong>：这段代码<code>String str1=&quot;ab&quot;; String str2=str1 + &quot;c&quot;;</code>中str2对象被放置在了什么地方？</font></p><p>答案是：被放在了堆内存中，因为程序在编译时才会发现str1是”ab”,所以是需要在堆内存进行运算的。</p><h2 id="开发案例"><a href="#开发案例" class="headerlink" title="开发案例"></a>开发案例</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><p>开发一个登录页面，要求如下：</p><ul><li>允许用户登录三次，三次不成功退出系统</li><li>登录成功显示”欢迎进入系统”</li><li>登录不成功前两次要求用户重新输入账号密码</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">pkg</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">//开发登录界面</span><br>        <span class="hljs-title class_">Scanner</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br><br>        <span class="hljs-keyword">for</span> (int i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;请输入账号：&quot;</span>);<br>            <span class="hljs-title class_">String</span> account=sc.<span class="hljs-title function_">nextLine</span>();<br><br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>            <span class="hljs-title class_">String</span> password=sc.<span class="hljs-title function_">nextLine</span>();<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_">equals</span>(account,password))&#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;欢迎登录系统！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;请重新输入&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">equals</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> account, <span class="hljs-title class_">String</span> password</span>) &#123;<br>        <span class="hljs-title class_">String</span> account1=<span class="hljs-string">&quot;javazhifu&quot;</span>;<br>        <span class="hljs-title class_">String</span> password1=<span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> account1.<span class="hljs-title function_">equals</span>(account) &amp;&amp; password.<span class="hljs-title function_">equals</span>(password1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>*快捷键使用：1.要想加入for循环，可以选中循环区域按<code>ctrl+alt+T</code>键便可。<br>2.输出语句快捷键：<code>要输入的内容.sout</code>按回车键</p><p style="color:red">*以下代码才是一个成熟的程序员写的，我们最初写的都是if条件语句</p><p><code>return account1.equals(account) &amp;&amp; password.equals(password1);</code></p><h3 id="验证码随机生成"><a href="#验证码随机生成" class="headerlink" title="验证码随机生成"></a>验证码随机生成</h3><p>随机生成n位验证码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.pkg;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">codes</span>(<span class="hljs-number">5</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> <span class="hljs-title">codes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">String</span> code = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> codeString = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            Random random = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>();<br><br>            <span class="hljs-type">int</span> r=random.<span class="hljs-built_in">nextInt</span>(codeString.<span class="hljs-built_in">length</span>());<br>            code += codeString.<span class="hljs-built_in">charAt</span>(r);<br>        &#125;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h1><p>ArrayList是一种容器，用于存储数据，它与数组的区别是集合不限制长度，而数组的长度是固定的；例如购物车内商品的数量一般是能够随时增删的，这里用到的就是ArrayList。</p><h2 id="创建ArrayList对象"><a href="#创建ArrayList对象" class="headerlink" title="创建ArrayList对象"></a>创建ArrayList对象</h2><ul><li>不限制元素类型（支持泛型）：<code>ArrayList list = new ArrayList();</code></li><li>限制元素类型（<strong>注意：集合和泛型不支持基本数据类型，只支持引用类型</strong>）：<code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></li></ul><h2 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h2><p><code>ArrayList&lt;String&gt; list=new ArrayList&lt;&gt;();</code></p><ul><li><strong>boolean add(E e)</strong>:在集合末尾添加元素。<code>list.add(&quot;java&quot;)；list.add(&quot;C&quot;);//结果为true，[&quot;java&quot;,&quot;C&quot;]</code></li><li><strong>void add(int index,E e)</strong>:在索引index处添加元素e。<code>list.add(0,&quot;C&quot;);//[&quot;C&quot;,&quot;java&quot;,&quot;C&quot;]</code></li><li><strong>E remove(int index)</strong>:删除index索引处的元素，并返回该元素。<code>list.remove(0);//结果为true，[&quot;java&quot;,&quot;C&quot;]</code></li><li><strong>boolean remove(E e)</strong>:删除元素e，若有多个e，则删除最前面的e。<code>list.remove(&quot;java&quot;);//结果为true，[&quot;C&quot;]</code> </li><li><strong>E get(int index)</strong>:获取索引index处的元素，并返回该元素。<code>list.get(0);//结果为C,[]</code></li><li><strong>int size()</strong>:返回集合的个数。<code>list.size();//结果为0</code></li><li><strong>E set(int index,E e)</strong>:修改索引index处的元素为e，并返回e。</li></ul><h2 id="开发案例-1"><a href="#开发案例-1" class="headerlink" title="开发案例"></a>开发案例</h2><p>删除购物车中所有的枸杞</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StringTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>       ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java入门&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;宁夏枸杞&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;黑枸杞&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;人字拖&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;特级枸杞&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;枸杞子&quot;</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(removeE(list));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;String&gt; <span class="hljs-title">removeE</span>(<span class="hljs-params">ArrayList&lt;String&gt; list</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(list.<span class="hljs-keyword">get</span>(i).contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>                list.<span class="hljs-keyword">remove</span>(list.<span class="hljs-keyword">get</span>(i));<br>                i--;<span class="hljs-comment">//注意：这里要使i向前移一位，因为删掉一个元素之后后面的元素会自动向前移一位，如果i还向后移的话，就会忽略部分元素</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如上述代码需要注意的是for循环中的i- -，这里也可以将for循环进行修改，倒序进行判断，就不用再考虑i- -的问题了，如下所示</strong>：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">for (<span class="hljs-name">int</span> i = list.size()<span class="hljs-number">-1</span><span class="hljs-comment">; i &gt; 0; i--) &#123;</span><br>            if(<span class="hljs-name">list</span>.get(<span class="hljs-name">i</span>).contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>                list.remove(<span class="hljs-name">list</span>.get(<span class="hljs-name">i</span>))<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="集合综合案例"><a href="#集合综合案例" class="headerlink" title="集合综合案例"></a>集合综合案例</h2><p>要求：创建一个类似美团外卖的菜品系统，包含菜品上架、浏览菜品信息和退出系统的功能。</p><p><strong>这里采用面向对象的思想进行程序的编写</strong></p><p>首先根据我们平时的外卖软件分析我们的主界面，其中会包含多个菜品，每个菜品都有它的详细信息，还包括上架和浏览菜品详细信息的功能。  </p><p>由此我们可以分析出一个实体类：Food.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">pkg</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> double price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> description;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Food</span>()&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Food</span>(<span class="hljs-title class_">String</span> description, <span class="hljs-title class_">String</span> name, double price) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> double <span class="hljs-title function_">getPrice</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPrice</span>(<span class="hljs-params">double price</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDescription</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> description</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;名称：&quot;</span> + name + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;价格：&quot;</span> + price + <span class="hljs-string">&#x27;\n&#x27;</span>+<br>                <span class="hljs-string">&quot;描述：&quot;</span> + description ;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><p style="color:red">注意：toString方法重写，给后续代码带来极大的便利</p></strong></p><p>接着创建一个容器来存储所有的菜品以及显示主界面、上架菜品和浏览菜品的功能，所以需要一个菜单功能类:FoodMenuFuc.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodMenuFuc</span> &#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>    Food food=<span class="hljs-keyword">new</span> Food();<br><br>    ArrayList&lt;Food&gt; foods=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">Food food</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入菜品名称：&quot;</span>);<br>        String name = scanner.next();<br>        food.setName(name);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入菜品价格：&quot;</span>);<br>        <span class="hljs-built_in">double</span> price = scanner.nextDouble();<br>        food.setPrice(price);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入菜品描述：&quot;</span>);<br>        String desc = scanner.next();<br>        food.setDescription(desc);<br><br>        foods.<span class="hljs-keyword">add</span>(food);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showFood</span>()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; foods.size(); i++) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(foods.<span class="hljs-keyword">get</span>(i).toString());<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择功能：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:上架菜品&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2.浏览菜品&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3.退出&quot;</span>);<br><br><br>            String choice = scanner.nextLine();<br>            <span class="hljs-keyword">switch</span>(choice)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-keyword">add</span>(food);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    showFood();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;下次再来哦！&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-literal">default</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请重新输入正确的命令：&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><p style="color:red">switch循环中的return；表示直接切断整个display()方法</p></strong></p><p>最后需要一个操作类来实现主界面的显示：FoodOperate.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pkg;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FoodOperate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FoodMenuFuc</span> <span class="hljs-variable">foodMenu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoodMenuFuc</span>();<br>        foodMenu.display();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot基础</title>
    <link href="/2025/03/31/Spring03/"/>
    <url>/2025/03/31/Spring03/</url>
    
    <content type="html"><![CDATA[<h1 id="检查Java环境"><a href="#检查Java环境" class="headerlink" title="检查Java环境"></a>检查Java环境</h1><p><img src="/image/s17.png"></p><h1 id="安装并配置Maven"><a href="#安装并配置Maven" class="headerlink" title="安装并配置Maven"></a>安装并配置Maven</h1><p>Maven时项目构建工具，能把项目抽象成POM（project object model）,Maven使用POM对项目进行构建、打包、文档化等操作，<strong>最重要的是解决了项目所需要类库的依赖管理，</strong> 简化了项目开发环境搭建的过程，使得我们开发一个大型复杂的项目变得更容易。  </p><h2 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h2><p>Maven最初用于替代Apache Ant.用来简化项目构建，它采用不同的方式对项目构建进行抽象，主要有以下几点：  </p><ul><li>使构建项目变得更加容易。</li><li>统一了构建项目的方式，通过pom.xml来描述项目，并提供一系列插件来构建项目。</li><li>提出一套开发项目的最佳实践，源码在src&#x2F;main&#x2F;java中，测试代码在src&#x2F;test&#x2F;java中，项目需要的配置文件则放在src&#x2F;main&#x2F;resources中。</li><li>包含不同环境项目的构建方式。</li><li>解决类库依赖的问题，只需要声明使用的类库，Maven就会自动从仓库下载依赖的jar包，并协助管理jar包之间的冲突。</li></ul><p><strong>在开发人员本地，Maven都会创建一个本地仓库来缓存已经下载的jar包，避免每次都去重新下载，如果不自行设置本地仓库地址，其默认仓库在用户目录下的隐藏文件夹中</strong>  </p><h2 id="Maven的核心"><a href="#Maven的核心" class="headerlink" title="Maven的核心"></a>Maven的核心</h2><p><strong>Maven的核心为pom.xml文件</strong><br>pom.xml文件用XML方式描述项目模型，pom通常有以下元素： </p><ul><li>groupId:表示项目所属的组,通常是一个公司或者组织的名称,如 org.springtramewot。</li><li>artifactId:项目唯一的标识，比如，有spring-boot-starter-web、spring-boot-devtool、groupld 和 artifactld 能唯一标识一个项目或者一个库，我们通常称之为项目坐标。</li><li>packaging:项目的类型，常用的有jar和war 两种，jar 表示项目会打包成一个jar包,这是 Spring Boot 的默认使用方式。</li><li>version:项目的版本号，比如0.0.1-SNAPSHOT、1.5.2.RELEASE。</li></ul><blockquote><p>通常来说，项目版本号分三段，主版本号.次版本号.修订版本号。主版本号变动代表架构变动或者不兼容实现，次版本号是兼容性修改、功能增强，修订版本号则是bug修复。</p><p>版本的后缀意味着项目的不同阶段，SNAPSHOT表示开发中的版本，会修复bug和添加新功能;RELEASE 表示的是一个正式发布版，中间还可能有M1、M2(M指里程碑，即将发布)RC(Release Candidate，发布候选)、GA(general availability，基本可用版本)等表示即将发布前的各个过程，SNAPSHOT&lt;m1&lt;m2…&lt;RC&lt;GA&lt;Realease。</p></blockquote><ul><li>modelVersion:代表pom文件的Maven的版本，如我i的项目的Maven的modelVersion 是4.0.0。</li><li>dependencies:此元素下包含了多个dependency，用来声明项目的依赖，&amp;<strong>这是pom最核心的部分。</strong></li><li>dependency:包含在dependencies中，用来声明项目的依赖，比如项目用到的MySQL驱动。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依赖的坐标是 mysqlmysql-connector-java，版本号是6.0.5。</p><ul><li>scope:scope代表此类库与项目的关系，默认是compile，也就是编译和打包都需要此类库。test表示仅仅在单元测试的时候需要;provided表示在编译阶段需要此类库，但打包阶段不需要，这是因为项目的目标环境已经提供了;runtime 表示在编译和打包的时候都不需要，但在运行的时候需要，比如某个指定的数据库驱动，编译和打包都不需要，但测试应用要连到数据库时就需要此数据库驱动。</li><li>build:此项在 pom 中可选，build 包含了多个插件 plugin，用来辅助项目构建。Maven与以往的 Ant 等其他构建工具不同，Maven 已经约定俗成地包含了构建方法，插件可以在构建过程中影响项目的构建。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="检查Maven环境"><a href="#检查Maven环境" class="headerlink" title="检查Maven环境"></a>检查Maven环境</h2><p><img src="/image/s18.png">   </p><p><strong>注意：Maven安装路径下的conf&#x2F;settings.xml中mirrors元素中要添加仓库镜像</strong>  </p><p><img src="/image/s19.png"></p><h2 id="在IDEA中配置Maven"><a href="#在IDEA中配置Maven" class="headerlink" title="在IDEA中配置Maven"></a>在IDEA中配置Maven</h2><p><img src="/image/s20.png"></p><h2 id="Maven常见命令"><a href="#Maven常见命令" class="headerlink" title="Maven常见命令"></a>Maven常见命令</h2><ul><li>mvn package:编译并打包工程，更具pom.xml中元素packaging是jar还是war进行打包，会在target目录下生成一个jar包或war包。</li><li>mvn install:打包并安装到本地仓库，这样其他本地Maven项目就可以通过项目坐标引用。</li><li>mvn deploy:打包并安装到远程仓库</li><li>mvn clean:清楚target目录</li></ul><h2 id="Spring容器介绍"><a href="#Spring容器介绍" class="headerlink" title="Spring容器介绍"></a>Spring容器介绍</h2><h3 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h3><p>IOC：Inversion of Control,反向控制原则，更为形象得称呼为DI（dependency injection,依赖注入）</p><p>Spring提供多个注解声明Bean为Spring管理的Bean，注释不同代表的含义不同，但对于Spring容器来说，都是Spring管理的Bean</p><ul><li>@Controller:声明此类是一个MVC类，通常和@RequestMapping一起使用。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/user&quot;</span>)<br>public class UserController&#123;<br>    <span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/get/&#123;id&#125;&quot;</span>)<br>    public String <span class="hljs-built_in">getUser</span>(<span class="hljs-variable">@PathVariable</span> String id)&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上述代码，如果客户请求&#x2F;user&#x2F;get&#x2F;1;将调用getUser方法，并把参数1传给id。</p><ul><li>@Service：声明此类是一个业务处理类，通常与@Transactional一起配合使用。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Service</span><br><span class="hljs-variable">@Transactional</span><br>public class UserServiceImpl implements UserService&#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">order</span>(...)&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Repository:声明此类是一个数据库或者其他NoSQL访问类。</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">UserDao</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">CruDao</span>&lt;<span class="hljs-symbol">User,<span class="hljs-symbol">String</span></span>&gt;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>RestController:同Controller，用于REST服务。</li><li>Component:声明此类是一个Spring管理的类，通常用于无法用上述注解描述的Spring管理类。</li><li>Configuration:声明此类是一个配置类，通常与注解@Bean配合使用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Spring完成一个简单的Web应用</title>
    <link href="/2025/03/30/Spring02/"/>
    <url>/2025/03/30/Spring02/</url>
    
    <content type="html"><![CDATA[<h1 id="完成一个简单的Web应用"><a href="#完成一个简单的Web应用" class="headerlink" title="完成一个简单的Web应用"></a>完成一个简单的Web应用</h1><p>所需要的环境:  </p><ul><li>JDK17</li><li>IDEA旗舰版</li><li>Maven3</li></ul><h2 id="创建一个新项目spring01"><a href="#创建一个新项目spring01" class="headerlink" title="创建一个新项目spring01"></a>创建一个新项目spring01</h2><p><img src="/image/s1.png">  </p><p>向pom.xml文件添加以下部分：</p><pre><code class="hljs">    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.6.13&lt;/version&gt;    &lt;/parent&gt;    &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><p>  <strong>注意：parent内的version要与下方properties内的spring-boot.version相同，否则就会发生冲突</strong></p><h2 id="Hello-Spring-Boot示例"><a href="#Hello-Spring-Boot示例" class="headerlink" title="Hello Spring Boot示例"></a>Hello Spring Boot示例</h2><p>  项目已为我们提供了一个有main方法的类Spring01Application </p><p>  <img src="/image/s2.png">  </p><p>  <strong>其中的<code>@SpringBootApplication</code>以及<code>SpringApplication.run(Spring01Application.class, args);</code>让其不再是个普通的Java类，而是使其成为一个Spring Boot应用</strong>   </p><p>  再创建一个名为HelloworldController的类，包名为com.example.spring01.controller,代码如下：<br>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">  <span class="hljs-keyword">package</span> com.example.spring01.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.*;<br><br><span class="hljs-meta">@Controller</span><span class="hljs-comment">//@Controller是Spring MVC注解，表示此类用于负责处理Web请求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloworldController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/say.html&quot;</span>)</span><span class="hljs-comment">//@RequestMapping是Spring MVC注解，表示如果请求路径匹配，被注解的方法将被调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> String say()&#123;<span class="hljs-comment">//@ResponseBody表示此方法返回的是文本，并非视图名称</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>  写了Controller,此时就可以通过浏览器访问应用<br>  <strong>注意：对于SpringBoot应用，建议启动程序Spring01Application的包名层次最高，其余类都在其下</strong>  </p><p>  在浏览器网址框输入<code>http://localhost:8080/say.html</code>，运行结果如下：</p><p>  <img src="/image/s13.png">   </p><p><font size="6"><b><i>访问成功！！！</i></b></font>  </p><h2 id="使用热部署"><a href="#使用热部署" class="headerlink" title="使用热部署"></a>使用热部署</h2><p>热部署通俗来讲就是随时修改程序网页随时响应   </p><p>在pom.xml文件中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重启项目<br>此时修改<code>@RequestMapping(&quot;/say.html&quot;)</code>为<code>@RequestMapping(&quot;/sayhello.html&quot;)</code><br>查看控制台发现并未重启，这是因为有两个按钮未开启，如下两图所示：   </p><p><img src="/image/s14.png"><br><img src="/image/s15.png">  </p><p>开启之后热部署就可以使用了！  </p><p><strong>主要多了两个变化：由于依赖spring-boot-devtools，LiveReload server用于监控Spring Boot应用文件变化，重启时间快是因为Spring Boot再次重启，避免重启Tomcat Server和已经加载的Spring相关类，只重载变化的类</strong></p><h2 id="添加REST支持"><a href="#添加REST支持" class="headerlink" title="添加REST支持"></a>添加REST支持</h2><p>若你的系统不是单一的系统，而是由多个系统组成的，其中一个系统给其他系统提供数据，此时就用到调用方法，RESTFul就可以被考虑。  </p><p>例如新建一个UserReditRestController，添加代码<br><img src="/image/s16.png"> </p><p>代码中没有用到@Controller和@ResposeBody，而是使用了@RestController，可以理解为@RestController相当于@Controller和@ResposeBody  </p><p><strong>注：对于多个系统互相访问，最好不要直接访问对方的数据库，而是采用RESTFul架构，封装逻辑接口；这样对方的数据变更，业务逻辑变化都不会影响到其他系统。详细的RESTFul架构和REST支持将在后面学到</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客的搭建</title>
    <link href="/2025/03/29/Build%20individual%20blog/"/>
    <url>/2025/03/29/Build%20individual%20blog/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客（Hexo框架）并部署到远端仓库"><a href="#搭建个人博客（Hexo框架）并部署到远端仓库" class="headerlink" title="搭建个人博客（Hexo框架）并部署到远端仓库"></a>搭建个人博客（Hexo框架）并部署到远端仓库</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p><a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a>  </p><p>使用<code>node -v</code>和<code>npm -v</code>命令检验是否安装成功<br>再输入以下命令安装Hexo（使用淘宝镜像）<br><strong><code>npm install-g cnpm --registry=https://registry.npm.taobao.org</code></strong></p><p><img src="/image/image-1.png#pic_right"><br>利用<code>hexo -version</code>检验是否安装成功  </p><p><img src="/image/image-6.png"></p><h2 id="安装Git及配置"><a href="#安装Git及配置" class="headerlink" title="安装Git及配置"></a>安装Git及配置</h2><p><code>https://blog.csdn.net/fanyun_01/article/details/145350857</code>   </p><p>在Git文件夹内新建文件夹blog1，右击blog1点击<code>Git Bash Here</code>,输入以下命令,创建个人博客<br><code>hexo init</code>  </p><p><img src="/image/image-2.png"><br>再输入以下命令启动Hexo<br><code>hexo s</code>  </p><p><img src="/image/image-3.png"><br>在浏览器网址栏输入<code>https://localhost:4000/</code>  </p><p><img src="/image/image-4.png"><br><em><strong>这样一个简单的个人博客就搭建好啦！</strong></em></p><h2 id="新建博客文章"><a href="#新建博客文章" class="headerlink" title="新建博客文章"></a>新建博客文章</h2><p>在blog1路径下直接输入以下命令：<br><code>hexo n &quot;我的第一篇博客.md&quot;</code>    </p><p><img src="/image/s3.png"><br>文件被创建在了&#x2F;source&#x2F;_posts目录下<br>接着进入&#x2F;source&#x2F;_posts目录下<br><code>cd /source/_posts</code>  </p><p>之后就可以直接采用code（VScode）命令打开并修改md文件   </p><p><img src="/image/image-5.png"> </p><p><img src="/image/s5.png">  </p><p><strong>注意：code命令的使用需要配置环境变量</strong>   </p><blockquote><p>点击此电脑——&gt;属性——&gt;高级系统设置——&gt;环境变量——&gt; 用户变量的Path，添加VScode安装路径下的bin文件的根本路径<br><img src="/image/image-7.png"></p></blockquote><p>保存修改的文件后，返回blog1目录下   (<code>cd ../../</code>)<br>输入以下命令<br><code>hexo clean</code>  &#x2F;&#x2F;清理<br><code>hexo g</code>&#x2F;&#x2F;生成<br><code>hexo s</code>&#x2F;&#x2F;启动     </p><p><img src="/image/s6.png">   </p><p>进入博客网页查看文件是否生成 </p><p><img src="/image/s4.png">     </p><h1 id="将博客部署到Gitee-Github"><a href="#将博客部署到Gitee-Github" class="headerlink" title="将博客部署到Gitee&#x2F;Github"></a>将博客部署到Gitee&#x2F;Github</h1><p><strong>由于Gitee Pages暂停服务，所以没有成功😂，但基本步骤是对的</strong>   </p><h2 id="登录Gitee-Gittub"><a href="#登录Gitee-Gittub" class="headerlink" title="登录Gitee&#x2F;Gittub"></a>登录Gitee&#x2F;Gittub</h2><p>点击右上角加号新建仓库，名称最好为<code>你的username.gitee.io</code>，仓库介绍随意写，点击创建即可 </p><p>接着在blog1目录下输入<code>dir</code>查看所有文件，看到存在_config.yml文件，输入以下命令<code>code _config.yml</code>修改配置文件,如下图所示：<br><img src="/image/s8.png"><br>上图内容修改为以下内容：<br><img src="/image/s7.png"><br><strong>注意：repo是指新建的gitee或github仓库的地址</strong><br>我的github仓库地址：<a href="https://github.com/Alder-djr/Alder-djr.github.io.git">https://github.com/Alder-djr/Alder-djr.github.io.git</a> </p><p>接着在blog1目录下输入<code>hexo d</code>远程部署到gitee&#x2F;github平台   </p><p><img src="/image/s9.png">   </p><p><img src="/image/s11.png"> </p><p><img src="/image/s10.png"><br>这样我们的远程仓库就多了很多文件 </p><p>后续如果我们想要打开我们的博客就不需要再命令行里输入<code>hexo s</code>了，直接在网址栏输入上面红框中的内容即可   </p><p><strong>注意：edge浏览器要在前面加上https:&#x2F;&#x2F;</strong>  </p><p>当然我这网页不可访问&#x2F;(ㄒoㄒ)&#x2F;~~  </p><p><img src="/image/s12.png">   </p><p style="color:red">注意：还有一个坑</p> 如果要将其他文件夹的md文件直接复制或移动到/source/_posts目录下，要在文件内容开头加上以下内容，否则无法上传到博客中 <pre><code class="hljs">---title: Hexo博客date: 2025-03-29categories:  - Hexo博客tags:  - Hexo博客---</code></pre><p>title：博客标题；categories：目录；tags：标签   </p><p><strong>另外，如果文件有大幅度修改或创建，还需要执行以下两个命令才能上传至博客中</strong> </p><p><code>hexo clean</code></p><p><code>hexo g</code></p>]]></content>
    
    
    <categories>
      
      <category>Hexo博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架的产生及Spring Boot的推出</title>
    <link href="/2025/03/29/Spring01/"/>
    <url>/2025/03/29/Spring01/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架的产生"><a href="#Spring框架的产生" class="headerlink" title="Spring框架的产生"></a>Spring框架的产生</h1><p>由于JavaEE框架的复杂性（比如假定的分布式系统），Spring是为了解决应用复杂性而产生的框架，它提供两种机制：控制反转（IoC）和面向切面（AOP），来提供任意的服务和增强Bean的任意特性，使得Spring本身容易掌握，又可以通过Bean管理来无限扩展功能。</p><p>注：Bean 是java中的类，通常用于封装数据、业务逻辑或服务。</p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC Core Container:Spring Container负责管理你的任意对象，并结合你对对象的描述进行初始化和加强</p><h6 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h6><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">@Controller</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloworldController</span></span>&#123;<br>    <span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/sayhello.html&quot;</span>)<br>    public <span class="hljs-variable">@RequestBody</span> String <span class="hljs-keyword">say</span>(String name)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>+name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，Spring Container在容器中初始化HelloworldController实例后，对于客户端发起的&#x2F;sayhello.html请求，会执行say方法，并自动将请求参数按照say方法声明的名称一一对应。</p><p><strong>Spring通常提供一些注解：@controller、@Service、@Component、@Configuration,只有使用这些注解才能引起Spring容器的注意，并根据注解含义来管理和增强对象</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">@Controller</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloworldController</span></span>&#123;<br>    <span class="hljs-variable">@Autowired</span> UserService userService;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，类UserService被@Service注解了，在类HelloworldController中，使用@Autowired自动注入这个实例</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP指面向切面编程，通过预编译方式或者运行时刻对目标对象动态地添加功能。例如要实现用户访问控制，可以对每个Controller的方法使用一个自定义的注解Function，用Spring AOP向Controller每个方法动态地添加用户权限校验功能。例子如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/sayhello.html&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>+name;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/adduser.html&quot;</span>)<br><span class="hljs-meta">@Function</span>(<span class="hljs-string">&quot;user.add&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>)&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>注解Function是自定义的一个注解，接受一个字符串，表示Controller方法对应的业务功能，用户是否能访问“user.add”功能，将在数据库中配置。</p><h2 id="Spring的缺点"><a href="#Spring的缺点" class="headerlink" title="Spring的缺点"></a>Spring的缺点</h2><ul><li>使用门槛高，入门Spring需很长时间</li><li>对过时技术兼容，导致使用复杂度高（比如处理事务使用XML还是注解@Trasaction）<br>Trasaction：Deposit(&#x2F;dɪˈpɒzɪt&#x2F;) money into or withdraw money from a bank account.</li><li>XML配置已不再流行</li><li>集成第三方工具时，程序员还要考虑工具之间的兼容性</li><li>系统启动慢，不具备热部署功能，完全依赖虚拟机或Web服务器的热部署</li></ul><h2 id="SpringBoot的推出"><a href="#SpringBoot的推出" class="headerlink" title="SpringBoot的推出"></a>SpringBoot的推出</h2><p>基于Spring的缺点，Spring开发人员推出SpringBoot，解决了以上缺点，<strong>SpringBoot能激素开发Web系统，更容易架构大的分布式系统</strong></p><hr><p>SpringBoot管理Spring容器、第三方插件，并提供很多默认系统级的服务，无论是简单的Web系统还是负复杂的系统，都只需要少量配置和代码就能完成。   </p><ul><li>SpringBoot通过Starter来提供系统级服务</li></ul><p>如果要开发一个Web应用，只需要在pom.xml中声明一下代码即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>以下是SpringBoot提供的常用Starter  ：</li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>spring-boot-starter</code></td><td>核心 Starter，包括自动配置支持、日志库和 YAML</td></tr><tr><td><code>spring-boot-starter-web</code></td><td>用于构建 Web 应用程序，包括 Spring MVC 和 Tomcat</td></tr><tr><td><code>spring-boot-starter-data-jpa</code></td><td>用于 Spring Data JPA 与 Hibernate，便于数据库操作</td></tr><tr><td><code>spring-boot-starter-security</code></td><td>提供 Spring Security 支持，用于添加安全和身份验证</td></tr><tr><td><code>spring-boot-starter-test</code></td><td>提供用于测试 Spring Boot 应用的库，如 JUnit、Hamcrest 和 Mockito</td></tr><tr><td><code>spring-boot-starter-jdbc</code></td><td>用于支持 JDBC 数据库访问和数据库池配置</td></tr><tr><td><code>spring-boot-starter-cache</code></td><td>提供缓存支持，例如 EhCache、Caffeine 或简单的内存基缓存</td></tr><tr><td><code>spring-boot-starter-actuator</code></td><td>提供生产级别的应用监控和管理功能</td></tr><tr><td><code>spring-boot-starter-mail</code></td><td>用于支持发送电子邮件</td></tr><tr><td><code>spring-boot-starter-aop</code></td><td>包括 spring-aop 和 AspectJ，支持面向切面编程</td></tr><tr><td><code>spring-boot-starter-batch</code></td><td>用于支持 Spring Batch，一个批量处理框架</td></tr><tr><td><code>spring-boot-starter-data-redis</code></td><td>用于 Spring Data Redis 和 Lettuce 客户端的 Redis 键值数据存储</td></tr><tr><td><code>spring-boot-starter-data-mongodb</code></td><td>用于 MongoDB 文档数据库和 Spring Data MongoDB</td></tr><tr><td><code>spring-boot-starter-data-elasticsearch</code></td><td>用于 Elasticsearch 搜索和分析引擎以及 Spring Data Elasticsearch</td></tr><tr><td><code>spring-boot-starter-websocket</code></td><td>用于构建 WebSocket 应用程序</td></tr><tr><td><code>spring-boot-starter-thymeleaf</code></td><td>用于使用 Thymeleaf 视图构建 MVC Web 应用程序</td></tr><tr><td><code>spring-boot-starter-freemarker</code></td><td>用于使用 FreeMarker 视图构建 MVC Web 应用程序</td></tr><tr><td><code>spring-boot-starter-mustache</code></td><td>用于使用 Mustache 视图构建 MVC Web 应用程序</td></tr></tbody></table><h2 id="SpringBoot相对于Spring的优点"><a href="#SpringBoot相对于Spring的优点" class="headerlink" title="SpringBoot相对于Spring的优点"></a>SpringBoot相对于Spring的优点</h2><ul><li>实现约定大于配置，是一个低配置的应用系统框架，且能够使用Spring的大量功能  </li><li>提供内置的Tomcat或者Jetty容器  </li><li>通过依赖jar包管理、自动装配技术，容易支持与其他技术体系、工具集成  </li><li>支持热加载，开发体验好，也支持SpringBoot系统监控，方便了解系统运行状态</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类类型数组</title>
    <link href="/2025/03/03/java09/"/>
    <url>/2025/03/03/java09/</url>
    
    <content type="html"><![CDATA[<p>日期类与上一章节相同<br>Day1.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Day1</span> &#123;<span class="hljs-comment">//原则上类声明时都应该加上public，但规模较小的用完即舍弃的类除外，加上public表示该类可以在任何地方使用，没有则表示只能在该包内使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> year=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-built_in">int</span> month=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> date=<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//构造函数也可重载</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>()</span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<span class="hljs-keyword">if</span>(year==<span class="hljs-number">0</span>) year=<span class="hljs-number">1</span>; <span class="hljs-keyword">this</span>.year=year;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month</span>)</span>&#123;<span class="hljs-keyword">this</span>(year);<span class="hljs-keyword">this</span>.month=month;&#125;<span class="hljs-comment">//利用this()来调用该类中的其他构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month, <span class="hljs-built_in">int</span> date</span>)</span>&#123;<span class="hljs-keyword">this</span>(year,month);<span class="hljs-keyword">this</span>.date=date;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params">Day1 d</span>)</span>&#123;<span class="hljs-keyword">this</span>(d.year,d.month,d.date);&#125;<span class="hljs-comment">//复制构造函数</span><br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getYear</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setYear</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getMonth</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMonth</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> month</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getDate</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> date</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year,<span class="hljs-built_in">int</span> month,<span class="hljs-built_in">int</span> date</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.year=year;<br>        <span class="hljs-keyword">this</span>.date=date;<br>        <span class="hljs-keyword">this</span>.month=month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">dayOfWeek</span>()</span>&#123;<br>        <span class="hljs-built_in">int</span> y=year;<br>        <span class="hljs-built_in">int</span> m=month;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>||m==<span class="hljs-number">2</span>)&#123;<br>            y--;<br>            m+=<span class="hljs-number">12</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (y+y/<span class="hljs-number">4</span>-y/<span class="hljs-number">100</span>+y/<span class="hljs-number">400</span>+(<span class="hljs-number">13</span>*m+<span class="hljs-number">8</span>)/<span class="hljs-number">5</span>+date)%<span class="hljs-number">7</span>;<span class="hljs-comment">//蔡勒公式，只能计算1582年10月15日之后的日期所对应的星期</span><br>        <span class="hljs-comment">//0代表星期日，1代表星期一，以此类推</span><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">equalTo</span>(<span class="hljs-params">Day1 d</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> year==d.year &amp;&amp; month==d.month &amp;&amp; date==d.date;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建Day类类型的数组"><a href="#创建Day类类型的数组" class="headerlink" title="创建Day类类型的数组"></a>创建Day类类型的数组</h2><p><code>Day1[] day=new Day1[n];</code>  </p><p>日期类类型数组DayArrayError.java  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> chap09;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DayArrayError</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br>        Scanner scanner=<span class="hljs-keyword">new </span><span class="hljs-class title_">Scanner</span>(System.<span class="hljs-property">in</span>);<br>        <span class="hljs-built_in">String</span>[] wd=&#123;<span class="hljs-string">&quot;日&quot;</span>,<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>,<span class="hljs-string">&quot;五&quot;</span>,<span class="hljs-string">&quot;六&quot;</span>&#125;;<br><br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;请输入日期的个数&quot;</span>);<br>        <span class="hljs-type">int</span> n= scanner.<span class="hljs-property">nextInt</span>();<br><br>        Day1[] <span class="hljs-built_in">day</span>=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>[n];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-built_in">day</span>[i]=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2017</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>);<span class="hljs-comment">//为每个类类型变量构造函数并初始化变量，且里面的参数必须全</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            System.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;day[&quot;</span>+i+<span class="hljs-string">&quot;]=&quot;</span>+<span class="hljs-built_in">day</span>[i].<span class="hljs-property">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+<span class="hljs-built_in">day</span>[i].<span class="hljs-property">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+<span class="hljs-built_in">day</span>[i].<span class="hljs-property">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s57.png"></p><p>Day类型的数组元素的初始和赋值可以直接这样写（<strong>太繁杂</strong>）<br>Day[] days &#x3D;{new Day(1900,12,3),<br>            new Day(2000,2,12),<br>            new Day(2010,8,19),<br>            new Day(2030,12,4),};  </p><p>DayArrayInit.java</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> chap09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DayArrayInit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br><br>        <span class="hljs-comment">//Day类中构造方法重载了，Day类型的数组就可以先创建，再设置值了,比较灵活</span><br>        Day1[] <span class="hljs-built_in">day</span>=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">day</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-built_in">day</span>[i]=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">day</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-built_in">day</span>[i].<span class="hljs-property">set</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        &#125;<br><br>        Day1[] days;<br>        days=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>[]&#123;<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>),<br>                    <span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2000</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>),<br>                    <span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2010</span>,<span class="hljs-number">8</span>,<span class="hljs-number">19</span>),<br>                    <span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2030</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>),&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;days.<span class="hljs-property">length</span>;i++)&#123;<br>            System.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;day[&quot;</span>+i+<span class="hljs-string">&quot;]=&quot;</span>+days[i].<span class="hljs-property">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+days[i].<span class="hljs-property">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+days[i].<span class="hljs-property">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br><br>        <br>        <span class="hljs-comment">//使用复制构造函数，也就是将Day类型的day2的所有字段都复制到Day类型的uu中</span><br>        Day1 day2=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        Day1 uu=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(day2);<br><br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;uu和day2&quot;</span>+(uu.<span class="hljs-property">equalTo</span>(day2)?<span class="hljs-string">&quot;相等&quot;</span>:<span class="hljs-string">&quot;不相等&quot;</span>));<span class="hljs-comment">//equalTo()函数的应用，随时判断两个Day类型的值是否相等</span><br><br>        <br>        <span class="hljs-comment">//toString函数的应用</span><br>        <span class="hljs-built_in">String</span> f=day2.<span class="hljs-property">toString</span>();<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(f);<br><br>        Day1 td=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>();<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(td);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：equalTo()函数的应用，随时判断两个Day类型的值是否相等</strong></p><h2 id="判断两个日期是否相同"><a href="#判断两个日期是否相同" class="headerlink" title="判断两个日期是否相同"></a>判断两个日期是否相同</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sas">package chap09;<br><br>import java.util.Scanner;<br><br>public class DayCompare &#123;<br><br>    //作为参数的类类型变量<br>    static boolean isDayCompare(Day1 d1, Day1 d2)&#123;//由于这个方法定义在类Day的外部，所以要加上static（加上static进行声明的方法是类方法）<br>        <span class="hljs-keyword">return</span> d1.get<span class="hljs-meta">Year</span>()==d2.get<span class="hljs-meta">Year</span>() <span class="hljs-variable">&amp;&amp;</span> d1.get<span class="hljs-meta">Month</span>()== d2.get<span class="hljs-meta">Month</span>() <span class="hljs-variable">&amp;&amp;</span> d1.get<span class="hljs-meta">Date</span>()== d2.get<span class="hljs-meta">Date</span>();<br>    &#125;<br><br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br>        Scanner scanner=new Scanner(System.<span class="hljs-keyword">in</span>);<br><br>        int y,m,d;<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入第一个日期&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;年：&quot;</span>);y= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;月：&quot;</span>);m=scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;日：&quot;</span>);d= scanner.next<span class="hljs-meta">Int</span>();<br>        Day1 day1=new Day1(y,m,d);<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入第二个日期&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;年：&quot;</span>);y= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;月：&quot;</span>);m=scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;日：&quot;</span>);d= scanner.next<span class="hljs-meta">Int</span>();<br>        Day1 day2=new Day1(y,m,d);<br><br>        <span class="hljs-keyword">if</span>(isDayCompare(day1,day2))&#123;//若直接用day1==day2来判断，则是判断day1和day2引用目标是否一样<br>            System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;不相等&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：当然可以直接使用equalTo()</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类的基础知识</title>
    <link href="/2025/03/02/java08/"/>
    <url>/2025/03/02/java08/</url>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类表示方法及处理的数据对象的集合的结构，比方法更大一级的控件。</p><p><strong>封装：将字段设为私有，防止来自外部的访问，从而使方法和字段紧密结合在一起的操作</strong></p><p><strong>getter和setter方法统称为访问器：以get开头的方法用于获取、返回字段的值；以set开头的方法用于设置字段的值</strong></p><p><strong>注意：在该类中创建了Day类型的开户日期，存款时间和存款结束时间</strong></p><p><strong>构造函数的重载是为了后续创建类类型变量时new Day()中()内的参数可以有0个、1个、2个…全部，这样比较方便</strong></p><h2 id="银行账户练习"><a href="#银行账户练习" class="headerlink" title="银行账户练习"></a>银行账户练习</h2><p>创建银行账户存储账户的信息，其中包括日期（包括三字段：年 月 日），所以需要先创建日期类。其中包含了复制构造函数的创建</p><p>Day.java：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap08;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Day</span> &#123;<span class="hljs-comment">//原则上类声明时都应该加上public，但规模较小的用完即舍弃的类除外，加上public表示该类可以在任何地方使用，没有则表示只能在该包内使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> year=<span class="hljs-number">1</span>;<span class="hljs-comment">//创建字段时，直接初始化，修改比较简单</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-built_in">int</span> month=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> date=<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//构造函数也可重载</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(year==<span class="hljs-number">0</span>) year=<span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">this</span>.year=year;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>(year);<br>        <span class="hljs-keyword">this</span>.month=month;&#125;<span class="hljs-comment">//利用this()来调用该类中的其他构造函数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month, <span class="hljs-built_in">int</span> date</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>(year,month);<br>        <span class="hljs-keyword">this</span>.date=date;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params">Day d</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>(d.year,d.month,d.date);<br>        &#125;<span class="hljs-comment">//复制构造函数</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getYear</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setYear</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getMonth</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMonth</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> month</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getDate</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> date</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year,<span class="hljs-built_in">int</span> month,<span class="hljs-built_in">int</span> date</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.year=year;<br>        <span class="hljs-keyword">this</span>.date=date;<br>        <span class="hljs-keyword">this</span>.month=month;<br>    &#125;<br><br>    <span class="hljs-comment">//根据日期判断星期</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">dayOfWeek</span>()</span>&#123;<br>        <span class="hljs-built_in">int</span> y=year;<br>        <span class="hljs-built_in">int</span> m=month;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>||m==<span class="hljs-number">2</span>)&#123;<br>            y--;<br>            m+=<span class="hljs-number">12</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (y+y/<span class="hljs-number">4</span>-y/<span class="hljs-number">100</span>+y/<span class="hljs-number">400</span>+(<span class="hljs-number">13</span>*m+<span class="hljs-number">8</span>)/<span class="hljs-number">5</span>+date)%<span class="hljs-number">7</span>;<span class="hljs-comment">//蔡勒公式，只能计算1582年10月15日之后的日期所对应的星期</span><br>        <span class="hljs-comment">//0代表星期日，1代表星期一，以此类推</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">equalTo</span>(<span class="hljs-params">Day d</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> year==d.year &amp;&amp; month==d.month &amp;&amp; date==d.date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span>&#123;<br>        String[] wd=&#123;<span class="hljs-string">&quot;日&quot;</span>,<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>,<span class="hljs-string">&quot;五&quot;</span>,<span class="hljs-string">&quot;六&quot;</span>&#125;;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%04d年%02d月%02d日(%s)&quot;</span>,year,month,date,wd[dayOfWeek()]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：构造函数也可重载</strong></p><p>接着创建账户类Account，存储账户信息，其中包含了Day类，称为has-A组合</p><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><p>只要是Day类型的字段，它对应的get方法都必须返回一个新建的Day类类型，防止Day类的字段被修改<br><strong>重点：观察以下代码中复制构造函数的用法</strong><br>Account.java：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package chap08;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<span class="hljs-comment">//类声明：类型的声明，由字段组成。</span><br><br>    <span class="hljs-comment">//字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<span class="hljs-comment">//姓名，加上private表示私有访问，私有访问的字段对类的外部是隐藏的，也就是无法从类的外部进行访问</span><br>    <span class="hljs-comment">//将数据对外隐藏起来，防止非法访问操作称为数据隐藏。原则上所有的字段都应该设为私有</span><br>    <span class="hljs-comment">//未指定private的字段都是默认访问，对包内公开，包外私有</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> no;<span class="hljs-comment">//账号</span><br>    <span class="hljs-keyword">private</span> long balance;<span class="hljs-comment">//余额</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> openDate;<span class="hljs-comment">//开户日期</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> <span class="hljs-keyword">from</span>;<span class="hljs-comment">//存款时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> to;<span class="hljs-comment">//存款结束时间</span><br><br>    <span class="hljs-comment">//构造函数，是在创建实例是所调用的，是为了正确初始化实例。像最开始的对实例赋值可以成功，实际上是程序自动构建了一个构造函数Account()&#123;&#125;</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> no, long balance,<span class="hljs-title class_">Day</span> openDate,<span class="hljs-title class_">Day</span> <span class="hljs-keyword">from</span>,<span class="hljs-title class_">Day</span> to) &#123;<span class="hljs-comment">//构造函数：名称与类相同且没有返回值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">no</span>=no;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span>=balance;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">openDate</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(openDate);/利用复制构造函数将一个类类型变量的所有字段复制到另一个变量的对应的所有字段中，而不是单单复制实例<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(<span class="hljs-keyword">from</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(to);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> no, long balance) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">no</span>=no;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span>=balance;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//确认账户名</span><br>    <span class="hljs-comment">//以下方法未加static，是由各个实例分别创建的，属于该实例。（前面讲到变量前加static，是为了让其在整个类中通用）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//实例方法。字段和方法统称为成员</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">//确认账号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getNo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-comment">//确认可用余额</span><br>    <span class="hljs-keyword">public</span> long <span class="hljs-title function_">getBalance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getOpenDate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(openDate);<span class="hljs-comment">//不要返回引用类型的字段值，因为外部能够通过该引用值间接改写值，而是要返回利用复制构造函数构造的Day的新实例，</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getFrom</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(<span class="hljs-keyword">from</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getTo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(to);<br>    &#125;<br><br>    <span class="hljs-comment">//存钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">long k</span>)&#123;<br>        balance+=k;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">long k</span>)&#123;<br>        balance-=k;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> openDate.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ openDate.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+ openDate.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString2</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//当它的子类要重写该方法时，必须加上public</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span><br>                + <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日到&quot;</span>+ to.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ to.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+to.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：AccountTester.java<br><strong>类类型与前方提到的数组类型一样是引用类型的一种，类的实例和数组主体统称为对象</strong>  </p><p>在其中会创建类的实例：Account adachi &#x3D; new Account():使用new创建的类类型的主体称为实例，创建实例的操作称为实例化；adachi是用来引用主体的类类型变量</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sas">package chap08;<br><br>public class AccountTester &#123;<br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br><br>        //下方是创建实例，这时会调用Account类的构造函数。其中还调用了Day类的构造函数<br>        Account adachi=new Account(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,12000,new <span class="hljs-meta">Day</span>(2004,2,3),new <span class="hljs-meta">Day</span>(2000,2,2),new <span class="hljs-meta">Day</span>(2010,2,3));//张三的账户；<br>        <br>        Account nakata=new Account(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,18000,new <span class="hljs-meta">Day</span>(2004,2,6),new <span class="hljs-meta">Day</span>(2009,1,1),new <span class="hljs-meta">Day</span>(2020,1,2));//李四的账户<br><br>        adachi.deposit(200);<br>        nakata.withdraw(3000);<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;张三的账户：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;姓名&quot;</span>+adachi.getName());//调用实例方法，采用了成员访问运算符<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;账户名&quot;</span>+adachi.getNo());//adachi.getNo()会向对象（实例）adachi发送消息”请告诉我账号是多少“，这样adachi就会自主决定找到账号，并做出应答<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;余额&quot;</span>+adachi.getBalance());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;开户日期&quot;</span>+adachi.getOpen<span class="hljs-meta">Date</span>().toString());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;存款时间&quot;</span>+adachi.toString2());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>();<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;李四的账户：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;姓名&quot;</span>+nakata.getName());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;账户名&quot;</span>+nakata.getNo());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;余额&quot;</span>+nakata.getBalance());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;开户日期&quot;</span>+nakata.getOpen<span class="hljs-meta">Date</span>().toString());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;存款时间&quot;</span>+nakata.toString2());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：测试类包含main方法（程序的入口）</strong><br>运行结果如下：<br><img src="/image/s54.png"></p><p><strong>注意：Account类中将字段设置为private，其他外部的类无法进行访问修改，这时测试类中的下面这些代码则无法使用</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//adachi.name等都是实例变量，如若不进行赋值，则会自动初始化，String类型初始化为<span class="hljs-keyword">null</span>，Long型初始化为<span class="hljs-number">0</span><br>adachi.name=&quot;张三&quot;;//访问其中某个字段采用x.y成员访问运算符（点运算符、（由于是特别指定字段，又称为字段访问运算符））&#123;访问x引用的实例中的成员y&#125;<br>adachi.<span class="hljs-keyword">no</span>=&quot;zhangsan&quot;;<br>adachi.balance=<span class="hljs-number">12000</span>;<br><br>nakata.name=&quot;李四&quot;;<br>nakata.<span class="hljs-keyword">no</span>=&quot;lisi&quot;;<br>nakata.balance=<span class="hljs-number">20000</span>;<br><br>adachi.balance-=<span class="hljs-number">200</span>;//张三取了<span class="hljs-number">200</span><br>nakata.balance+=<span class="hljs-number">2000</span>;//李四存了<span class="hljs-number">2000</span><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;张三的账户：&quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;姓名&quot;+adachi.name);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;账户名&quot;+adachi.<span class="hljs-keyword">no</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;余额&quot;+adachi.balance);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;李四的账户：&quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;姓名&quot;+nakata.name);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;账户名&quot;+nakata.<span class="hljs-keyword">no</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;余额&quot;+nakata.balance);<br></code></pre></td></tr></table></figure><h2 id="汽车练习"><a href="#汽车练习" class="headerlink" title="汽车练习"></a>汽车练习</h2><p>在汽车类同样用到了Day类</p><h3 id="继承用法"><a href="#继承用法" class="headerlink" title="继承用法"></a>继承用法</h3><p>Car类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap08;<br><span class="hljs-comment">//Car类中包含Day类，称为has-A组合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> length;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> y;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> fuel;<br><br>    <span class="hljs-comment">//类类型的字段</span><br>    <span class="hljs-keyword">private</span> Day purchaseDay;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, <span class="hljs-type">int</span> length, <span class="hljs-type">double</span> fuel, Day purchaseDay)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<span class="hljs-comment">//this.name是类的字段</span><br>        <span class="hljs-keyword">this</span>.width = width;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.length = length;<br>        <span class="hljs-keyword">this</span>.fuel = fuel;<br>        x=y=<span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">this</span>.purchaseDay=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>(purchaseDay);<span class="hljs-comment">//利用复制构造函数将一个类类型变量的所有字段复制到另一个变量的对应的所有字段中，而不是单单复制实例</span><br>    &#125;<br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getFuel</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fuel;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Day <span class="hljs-title">getPurchaseDay</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>(purchaseDay);<span class="hljs-comment">//不要返回引用类型的字段值，因为外部能够通过该引用值间接改写值</span><br>    &#125;<br><br>    <span class="hljs-comment">//输出车的信息</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">putSpex</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;名称：&quot;</span>+name);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;车宽：&quot;</span>+width+<span class="hljs-string">&quot;mm&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;车高：&quot;</span>+height+<span class="hljs-string">&quot;mm&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;车长：&quot;</span>+length+<span class="hljs-string">&quot;mm&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//汽车前进的距离及计算耗油量</span><br>    <span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">double</span> dx,<span class="hljs-type">double</span> dy)</span></span>&#123;<br>        <span class="hljs-type">double</span> dist=Math.<span class="hljs-built_in">sqrt</span>(dx*dx+dy*dy);<br>        <span class="hljs-keyword">if</span>(dist&gt;fuel)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            fuel-=dist;<br>            x+=dx;<br>            y+=dy;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建CarExtend子类继承自Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CarExtend</span> extends Car&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> distence=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">CarExtend</span>(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, <span class="hljs-type">int</span> length, <span class="hljs-type">double</span> fuel, Day purchaseDay,<span class="hljs-type">int</span> distence)&#123;<br>        <span class="hljs-built_in">super</span>(name,width,height,length,fuel,purchaseDay);<span class="hljs-comment">//父类的字段在构造函数中访问需要用到super</span><br>        <span class="hljs-keyword">this</span>.distence=distence;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getDistence</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> distence;<br>    &#125;<br><br>    <span class="hljs-comment">//判断两辆车的行驶距离是否相等</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title">fuelCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> distence1,<span class="hljs-type">int</span> distence2)</span></span>&#123;<br>        super.width=distence1;<span class="hljs-comment">//父类无法调用子类新创建的变量，所以用width（车宽）代替（不用特别在意功能，只是简单介绍这个点😂）</span><br>        <span class="hljs-keyword">this</span>.distence=distence2;<br>        <span class="hljs-keyword">if</span>(distence1==distence2)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：getPurchaseDay()方法中返回的是一个新建的Day类类型变量，而不是直接返回引用类型的字段值（也就是return purchaseDay），因为外部能够通过该引用值间接改写值</strong><br><strong>注意：父类的字段在子类的构造函数中访问需要用到super，而父类无法调用子类新创建的变量</strong></p><p>测试类CarTest1.java</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package chap08;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CarTester1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Day d=<span class="hljs-built_in">new</span> Day(<span class="hljs-number">2010</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>);<br>        Car vitz=<span class="hljs-built_in">new</span> Car(&quot;威姿&quot;,<span class="hljs-number">1660</span>,<span class="hljs-number">1500</span>,<span class="hljs-number">3640</span>,<span class="hljs-number">40.0</span>, d);//如若d这个变量除了该作用在后续有用处，<br>        // 则可以像上句代码所示专门为其导入一个类类型变量，如若不需要则直接采用<span class="hljs-built_in">new</span>来创建实例传递参数（CarTester2中）<br>        CarExtend march=<span class="hljs-built_in">new</span> CarExtend(&quot;特斯拉&quot;,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-built_in">new</span> Day(<span class="hljs-number">2000</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<span class="hljs-number">200</span>);<br><br>        Day p=vitz.getPurchaseDay();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;爱车的购买日期：&quot;+p);<br>        p.<span class="hljs-keyword">set</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">12</span>,<span class="hljs-number">31</span>);<br><br>        Day q=vitz.getPurchaseDay();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;爱车的购买日期：&quot;+q);<br><br>        vitz.putSpex();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>        march.putSpex();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;特斯拉的行驶距离为&quot;+ march.getDistence());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;这俩辆车的行驶距离&quot;+(march.fuelCompare(vitz.width, march.getDistence())?&quot;相等&quot;:&quot;不相等&quot;));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s55.png"><br>测试类CarTest2.java</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap08;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> CarTester2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入车的数据：&quot;</span>);<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;名称：&quot;</span>);String name= scanner.nextLine();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;宽度：&quot;</span>);<span class="hljs-keyword">int</span> width= scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;高度：&quot;</span>);<span class="hljs-keyword">int</span> height= scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;长度：&quot;</span>);<span class="hljs-keyword">int</span> length= scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;燃料数量：&quot;</span>);<span class="hljs-keyword">double</span> fuel= scanner.nextDouble();<br><br>        Car myCar=<span class="hljs-keyword">new</span> Car(name,width,height,length,fuel,<span class="hljs-keyword">new</span> Day(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<span class="hljs-comment">//使用new创建Day类型实例</span><br>        <span class="hljs-comment">//创建的实例的引用被传递给了构造函数（使用new创建的实例可以不用再起名，直接传递参数即可）</span><br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;购买日期：&quot;</span>+myCar.getPurchaseDay().toString()+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//这里使用的getPurchaseDay()方法时Car类中的复制构造函数方法，</span><br>        <span class="hljs-comment">// 所以最终Car类的purchaseDay字段引用的是复制构造函数创建的一个日期副本,toString()方法可以省略</span><br><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;当前位置：(&quot;</span>+myCar.getX()+<span class="hljs-string">&quot;,&quot;</span>+myCar.getY()+<span class="hljs-string">&quot;)·剩余燃料&quot;</span>+myCar.getFuel());<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;是否移动[0...No/1...Yes]:&quot;</span>);<br>            <span class="hljs-keyword">if</span>(scanner.nextInt()==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;x方向的移动距离：&quot;</span>);<br>            <span class="hljs-keyword">double</span> dx=scanner.nextDouble();<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;y方向的移动距离：&quot;</span>);<br>            <span class="hljs-keyword">double</span> dy= scanner.nextDouble();<br><br>            <span class="hljs-keyword">if</span>(!myCar.move(dx,dy))<br>                System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;燃料不足！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s56.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java方法</title>
    <link href="/2025/03/01/java07/"/>
    <url>/2025/03/01/java07/</url>
    
    <content type="html"><![CDATA[<h1 id="类作用域（字段）和块作用域（局部变量）"><a href="#类作用域（字段）和块作用域（局部变量）" class="headerlink" title="类作用域（字段）和块作用域（局部变量）"></a>类作用域（字段）和块作用域（局部变量）</h1><ul><li>类作用域：在方法外部声明的变量称为字段，该字段在方法内外(也就是整个类中)都可以使用；注意要加上static。</li><li>块作用域：在程序块{}和for方法中的变量称为在块作用域中的局部变量，只在程序块和for中使用。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr2</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> x=<span class="hljs-number">700</span>;<span class="hljs-comment">//类作用域</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br><br>        <span class="hljs-built_in">int</span> x=<span class="hljs-number">300</span>;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Expr2.x=&quot;</span>+Expr2.x);<span class="hljs-comment">//类名+字段名表示类作用域的字段</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类名+字段名表示类作用域的字段</strong><br>运行结果如下：<br><img src="/image/s51.png"></p><h2 id="心算游戏"><a href="#心算游戏" class="headerlink" title="心算游戏"></a>心算游戏</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap07;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">expr2</span> &#123;<br>    <span class="hljs-type">static</span> Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>    <span class="hljs-comment">//不接受参数的方法</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title">conFirm</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">int</span> cont;<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;再来一次? 1——yes 0——no&quot;</span>);<br>            cont = scanner.<span class="hljs-built_in">nextInt</span>();<br>        &#125;<span class="hljs-keyword">while</span>(cont!=<span class="hljs-number">0</span> &amp;&amp; cont!=<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> cont==<span class="hljs-number">1</span>;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <br>        Random random=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>();<br>        <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-type">int</span> a=random.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">900</span>)<span class="hljs-number">+100</span>;<span class="hljs-comment">//随机生成三位数</span><br>        <span class="hljs-type">int</span> b=random.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">900</span>)<span class="hljs-number">+100</span>;<br>        <span class="hljs-type">int</span> c=random.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">900</span>)<span class="hljs-number">+100</span>;<br><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;+&quot;</span> + c + <span class="hljs-string">&quot;=&quot;</span>);<br>            <span class="hljs-type">int</span> result = scanner.<span class="hljs-built_in">nextInt</span>();<br>            <span class="hljs-keyword">if</span> (result == a + b + c)<br>                <span class="hljs-keyword">break</span>;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;回答错误&quot;</span>);<br>        &#125;<br>        &#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">conFirm</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法和程序块中都用到输入，则Scanner要加static</strong><br>运行结果如下：<br><img src="/image/s52.png"></p><h1 id="操作数组的方法"><a href="#操作数组的方法" class="headerlink" title="操作数组的方法"></a>操作数组的方法</h1><p>idx指索引</p><h2 id="寻找数组中最大的值"><a href="#寻找数组中最大的值" class="headerlink" title="寻找数组中最大的值"></a>寻找数组中最大的值</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">findmax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span></span>&#123;<br>    <span class="hljs-type">int</span> max=a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;a.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;max)&#123;<br>            max=a[i];<br>        &#125;<br>    &#125;<span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">key</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span>(<span class="hljs-type">int</span>[] a)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-built_in">key</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-comment">//起初我是想在这里加个else...break；但是这样做的后果是当循环时判断第一个数时，不符合if条件的话就会立马跳出循环</span><br>        <span class="hljs-comment">//不会再判断其他的值</span><br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//如果循环结束之后仍没有符合if中条件的值，那么就会结束循环执行这句；所以不用在for中执行break</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="倒序排列"><a href="#倒序排列" class="headerlink" title="倒序排列"></a>倒序排列</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">static void change(int[] a)&#123;<br>    for(int i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;a.length/2;i++)&#123;</span><br>        int t<span class="hljs-operator">=</span>a[i]<span class="hljs-comment">;</span><br>        a[i]<span class="hljs-operator">=</span>a[a.length-i-<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>        a[a.length-i-<span class="hljs-number">1</span>]<span class="hljs-operator">=</span>t<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除索引对应的值-最后的值不变以保证长度不变"><a href="#删除索引对应的值-最后的值不变以保证长度不变" class="headerlink" title="删除索引对应的值(最后的值不变以保证长度不变)"></a>删除索引对应的值(最后的值不变以保证长度不变)</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static <span class="hljs-type">void</span> aryRmv(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> idx)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i==idx)&#123;<br>                <span class="hljs-comment">//int t=a[idx];</span><br>                <span class="hljs-type">int</span> s=a[a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=idx;j&lt;a.<span class="hljs-built_in">length</span>;j++)&#123;<br>                    <span class="hljs-keyword">if</span>((j+<span class="hljs-number">1</span>)!=a.<span class="hljs-built_in">length</span>)&#123;<br>                        a[j]=a[j+<span class="hljs-number">1</span>];<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        a[a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>]=s;<br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="插入一个值到数组中-长度不变"><a href="#插入一个值到数组中-长度不变" class="headerlink" title="插入一个值到数组中(长度不变)"></a>插入一个值到数组中(长度不变)</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">aryIns</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">// 边界检查</span><br>    <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= a.length) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index out of bounds&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 从数组末尾开始，将每个元素向后移动一位，直到 idx 位置</span><br>    <span class="hljs-comment">//我一开始总想着从前往后，所以导致总是无法写出合适的for循环</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.length - <span class="hljs-number">1</span>; i &gt; idx; i--) &#123;<br>        a[i] = a[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 在 idx 位置插入新元素 x</span><br>    a[idx] = x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="判断两个数组的值是否相等"><a href="#判断两个数组的值是否相等" class="headerlink" title="判断两个数组的值是否相等"></a>判断两个数组的值是否相等</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static boolean <span class="hljs-built_in">equal</span>(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span>[] b)&#123;<br>    <span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">length</span>!=b.<span class="hljs-built_in">length</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=b[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交换两个数组的值"><a href="#交换两个数组的值" class="headerlink" title="交换两个数组的值"></a>交换两个数组的值</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static <span class="hljs-type">void</span> aryChng(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span>[] b) &#123;<br>    <span class="hljs-type">int</span> minarray=Math.<span class="hljs-built_in">min</span>(a.<span class="hljs-built_in">length</span>,b.<span class="hljs-built_in">length</span>);<span class="hljs-comment">//利用math求出小值</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;minarray;i++)&#123;<br>        <span class="hljs-type">int</span> t=a[i];<span class="hljs-comment">//这里不需要用数组存储值，只需要用一个变量就可以，让其在循环中重复赋值</span><br>        a[i]=b[i];<br>        b[i]=t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="返回值类型为数组"><a href="#返回值类型为数组" class="headerlink" title="返回值类型为数组"></a>返回值类型为数组</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">reShuzu</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span>&#123;<br>    <span class="hljs-built_in">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        a[i]=i;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入一个数到数组中，长度-1"><a href="#插入一个数到数组中，长度-1" class="headerlink" title="插入一个数到数组中，长度+1"></a>插入一个数到数组中，长度+1</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static <span class="hljs-type">int</span>[] arrayInsOf(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> idx,<span class="hljs-type">int</span> x)&#123;<br>    <span class="hljs-type">int</span>[] b=new <span class="hljs-type">int</span>[a.<span class="hljs-built_in">length</span>+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> t=a[a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>];<br>    b[b.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>]=t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>;i&gt;idx;i--)&#123;<span class="hljs-comment">//从后往前循环到idx处</span><br>        a[i]=a[i<span class="hljs-number">-1</span>];<br>    &#125;a[idx]=x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++)&#123;<br>        b[i]=a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多维数组的传递"><a href="#多维数组的传递" class="headerlink" title="多维数组的传递"></a>多维数组的传递</h1><h2 id="创建并返回一个与二维数组a相同的数组"><a href="#创建并返回一个与二维数组a相同的数组" class="headerlink" title="创建并返回一个与二维数组a相同的数组"></a>创建并返回一个与二维数组a相同的数组</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">static int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> aryClone(int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> x)&#123;<br>    int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> y=new int<span class="hljs-comment">[x.length]</span><span class="hljs-comment">[x<span class="hljs-comment">[0]</span>.length]</span>;<br>    for(int i=0;i&lt; x.length;i++) &#123;<br>        for (int j = 0; j &lt; x<span class="hljs-comment">[i]</span>.length; j++) &#123;<br>            y<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = x<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>;<br><br>        &#125;<br>    &#125;return y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="计算两个矩阵的和-前提是两个矩阵行和列都相同"><a href="#计算两个矩阵的和-前提是两个矩阵行和列都相同" class="headerlink" title="计算两个矩阵的和(前提是两个矩阵行和列都相同)"></a>计算两个矩阵的和(前提是两个矩阵行和列都相同)</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs prolog">static boolean addMatrix(int[][] x,int[][] y,int[][] z)&#123;<br>        if(x.length==y.length &amp;&amp; y.length==z.length)&#123;<br>            if(x[<span class="hljs-number">0</span>].length==y[<span class="hljs-number">0</span>].length &amp;&amp; y[<span class="hljs-number">0</span>].length==z[<span class="hljs-number">0</span>].length)&#123;<br>                for(int i=<span class="hljs-number">0</span>;i&lt; x.length;i++) &#123;<br>                    for (int j = <span class="hljs-number">0</span>; j &lt; x[i].length; j++) &#123;<br>                        z[i][j] = x[i][j] + y[i][j];<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>            return true;<br>        &#125;else &#123;<br>            return false;<br>        &#125;<br><br>    &#125;<br>public static void main(<span class="hljs-symbol">String</span>[] args) &#123;<br>            int[][] a=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>        int[][] b=&#123;&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br>        int[][] c=new int[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br><br><br>        <span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;这三个多维数组行和列都&quot;</span>+((addMatrix(a,b,c))?<span class="hljs-string">&quot;相同&quot;</span>:<span class="hljs-string">&quot;不相同&quot;</span>));<br>        printArray(c);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s50.png"></p><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><p>重载指在同一个类中对不同的方法赋予相同的名称，但相同签名的方法不可以进行重载（签名指方法名和形参的个数、类型的组合），不包括返回类型和形参的名称<br><strong>main方法不可以重载</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> chap07;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr6</span> &#123;<br><span class="hljs-comment">//如下三种方法实现了重载，方法名不同，而且形参的个数或类型不同</span><br><br>    <span class="hljs-comment">//输出两个数中最大值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;<br>        <span class="hljs-keyword">return</span> Math.<span class="hljs-property">max</span>(a, b);<br>    &#125;<br><br>    <span class="hljs-comment">//输出三个数中最大值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>=x;<br>        <span class="hljs-keyword">if</span>(y&gt;<span class="hljs-built_in">max</span>) <span class="hljs-built_in">max</span>=y;<br>        <span class="hljs-keyword">if</span>(z&gt;<span class="hljs-built_in">max</span>) <span class="hljs-built_in">max</span>=z;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//输出数组中的最大值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span>[] r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>=r[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;r.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(r[i]&gt;<span class="hljs-built_in">max</span>)<br>               <span class="hljs-built_in">max</span>=r[i];<br><br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br>        <span class="hljs-type">int</span> o=<span class="hljs-number">12</span>;<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">34</span>;<br>        <span class="hljs-type">int</span> q=<span class="hljs-number">90</span>;<br>        <span class="hljs-type">int</span>[] w=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">33</span>,<span class="hljs-number">55</span>,<span class="hljs-number">88</span>&#125;;<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">max</span>(o,p));<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">max</span>(o,p,q));<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">max</span>(w));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s53.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java整数内部的位处理运算符</title>
    <link href="/2025/02/28/java06/"/>
    <url>/2025/02/28/java06/</url>
    
    <content type="html"><![CDATA[<h1 id="整数内部的位处理运算符"><a href="#整数内部的位处理运算符" class="headerlink" title="整数内部的位处理运算符"></a>整数内部的位处理运算符</h1><ul><li>&amp; 按位与运算符</li><li>| 按位或运算符</li><li>^ 按位异或运算符   相同为0，不同为1</li><li>~ 按位取反运算符   每位取反</li><li>x&lt;&lt; i;将x的二进制向左移动i位（乘以2的i次），前面位都用0来填充</li><li>x&gt;&gt;&gt;i;将x的二进制向右移动i位（除以2的i次），前面位都用0来填充</li><li>x&gt;&gt; i;将x的二进制向右移动i位,前面位都用原来的符号位来填充</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr3</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printBits</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>)</span>&#123;<span class="hljs-comment">//转化为32位的二进制数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">31</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.<span class="hljs-keyword">out</span>.print(((x&gt;&gt;&gt;i &amp; <span class="hljs-number">1</span>)==<span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;1&#x27;</span> :<span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">count</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> bits=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//从x一直判断到它为0，所以用while循环</span><br>            <span class="hljs-keyword">if</span> ((x &amp; <span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//以此判断最低为是否为1</span><br>                bits++;<br>                x&gt;&gt;&gt;=<span class="hljs-number">1</span>;<span class="hljs-comment">//将x右移一位，将判断过的最低位除去</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> bits;<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br><br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;a=&quot;</span>);<span class="hljs-built_in">int</span> a= scanner.nextInt();<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;b=&quot;</span>);<span class="hljs-built_in">int</span> b= scanner.nextInt();<br><br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;a  =&quot;</span>);printBits(a);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;\na的二进制的1的位数为&quot;</span>+count(a));<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\nb  =&quot;</span>);printBits(b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\na&amp;b=&quot;</span>);printBits(a&amp;b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\na|b=&quot;</span>);printBits(a|b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\na^b=&quot;</span>);printBits(a^b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\n~a =&quot;</span>);printBits(~a);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\n~b =&quot;</span>);printBits(~b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解析printBits()函数</strong><br>①判断第i位的值是0还是1，注意一开始先判断第31位，是最左边的最高位，所以还是从左往右输出<br>②a&#x3D;3时，进入程序中的二进制是：00000000000000000000000000000011; 以下步骤从左往右输出，最终输出a的二进制<br>③a向右移31位：000000000000000000000000000000 &amp; 1！&#x3D;1,则输出0 ……<br>④a向右移动1位：00000000000000000000000000000001 &amp; 1&#x3D;1,则输出1<br>⑤a向右移动0位：00000000000000000000000000000011 &amp; 1&#x3D;1,则输出1<br>运行结果如下：<br><img src="/image/s48.png"></p><h2 id="按位运算符也可当作逻辑运算来使用"><a href="#按位运算符也可当作逻辑运算来使用" class="headerlink" title="按位运算符也可当作逻辑运算来使用"></a>按位运算符也可当作逻辑运算来使用</h2><ul><li>^为异或，相同为0，不同为1</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;x=&quot;);<br><span class="hljs-type">int</span> x= scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;\ny=&quot;);<br><span class="hljs-type">int</span> y= scanner.nextInt();<br><br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">5</span> ^ y==<span class="hljs-number">5</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x和y其中一个为5&quot;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x和y都不为5或都为5&quot;);<br>&#125;<br><br><span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span> &amp; y&lt;<span class="hljs-number">3</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x大于1，y小于3&quot;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x不大于1，y不小于3&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里&amp;和&amp;&amp;是一样的作用，注意：只在java中这么用</strong><br>运行结果如下：<br><img src="/image/s49.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数组</title>
    <link href="/2025/02/27/java05/"/>
    <url>/2025/02/27/java05/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><code>int[] a=new int[5];</code><br>int[5]是数组主体，a是数组变量，a引用数组主体。对构成元素的访问通过索引，从a[0]开始到a[n-1];a.length是final int型，不能后续再进行改值。</p><h2 id="数组的创建定义"><a href="#数组的创建定义" class="headerlink" title="数组的创建定义"></a>数组的创建定义</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>[] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>[] b=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">double</span>[] c=<span class="hljs-built_in">new</span> <span class="hljs-type">double</span>[<span class="hljs-number">5</span>];<br><br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<br>a[<span class="hljs-number">2</span>]=<span class="hljs-number">8</span>;<br>a[<span class="hljs-number">4</span>]=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+i+&quot;个元素的值为：&quot;+a[i]);//未被赋值的元素默认为<span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;b.length;j++)&#123;<br>    b[j]=b.length-j;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;b.length;k++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+k+&quot;个元素的值为：&quot;+b[k]);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;c.length;j++)&#123;<br>    c[j]=(j+<span class="hljs-number">1</span>)*<span class="hljs-number">1.1</span>;//加减无法满足要求，需要考虑乘除<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;c.length;k++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.printf(&quot;第&quot;+k+&quot;个元素的值为：%1.1f&quot;,c[k]);//若不进行格式化，那么结果会存在误差：第<span class="hljs-number">2</span>个元素的值为：<span class="hljs-number">3.3000000000000003</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：<br><img src="/image/s36.png"></p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="通过键盘输入数组长度及每个值"><a href="#通过键盘输入数组长度及每个值" class="headerlink" title="通过键盘输入数组长度及每个值"></a>通过键盘输入数组长度及每个值</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入数组的长度：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><span class="hljs-type">int</span>[] d=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;第&quot;+i+&quot;个的值为：&quot;);<br>    d[i]= scanner.nextInt();<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;d.length;k++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+k+&quot;个元素的值为：&quot;+d[k]);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s37.png"></p><h3 id="生成柱状图，高度随机"><a href="#生成柱状图，高度随机" class="headerlink" title="生成柱状图，高度随机"></a>生成柱状图，高度随机</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>Random random = <span class="hljs-built_in">new</span> Random();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;请输入数组的长度：&quot;);<br><span class="hljs-type">int</span> m = scanner.nextInt();<br><br><span class="hljs-type">int</span>[] e = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[m];<br><br>// 随机生成数组元素<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    e[i] = random.nextInt(<span class="hljs-number">10</span>); // 随机生成<span class="hljs-number">0</span>到<span class="hljs-number">9</span>之间的整数<br>&#125;<br><br>// 找到最大值，用于确定柱状图的高度<br><span class="hljs-type">int</span> maxHeight = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-keyword">value</span> : e) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> &gt; maxHeight) &#123;<br>        maxHeight = <span class="hljs-keyword">value</span>;<br>    &#125;<br>&#125;<br><br>// 打印柱状图<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-keyword">row</span> = maxHeight; <span class="hljs-keyword">row</span> &gt; <span class="hljs-number">0</span>; <span class="hljs-keyword">row</span><span class="hljs-comment">--) &#123; // 从最大高度开始向下打印，一行一行地打印</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>; col &lt; e.length; col++) &#123;<br>        <span class="hljs-keyword">if</span> (e[col] &gt;= <span class="hljs-keyword">row</span>) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;*\t&quot;); // 如果当前列的高度(即元素的值)大于等于当前行，打印 *<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot; \t&quot;); // 否则打印空格<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br><br>// 打印分割虚线<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;----------------------------------------&quot;);<br><br>// 打印每个元素的值（索引值除以<span class="hljs-number">10</span>的余数）<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e.length; i++) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print((i % <span class="hljs-number">10</span>) + &quot;\t&quot;);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s38.png"></p><h2 id="数组的查找"><a href="#数组的查找" class="headerlink" title="数组的查找"></a>数组的查找</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请输入数组的长度：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-built_in">len</span>= scanner.nextInt();<br><span class="hljs-type">int</span>[] g=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-built_in">len</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)&#123;<br>    System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g[&quot;</span>+i+<span class="hljs-string">&quot;]=&quot;</span>);<br>    g[i]= scanner.nextInt();<br>&#125;<br><br><span class="hljs-type">int</span> max=g[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(g[i]&gt;max)&#123;<br>        max=g[i];<span class="hljs-comment">//数组遍历</span><br>    &#125;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;数组中最大值为：&quot;</span>+max);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s40.png"></p><h3 id="线性查找数值的位置"><a href="#线性查找数值的位置" class="headerlink" title="线性查找数值的位置"></a>线性查找数值的位置</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> lent=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[lent];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;lent;j++)&#123;<br>    h[j]= random.nextInt(<span class="hljs-number">10</span>);<br>    System.out.<span class="hljs-keyword">print</span>(h[j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br><br>System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-string">&quot;请输入要查找的值：&quot;</span>);<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">find</span>= scanner.nextInt();<br><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=lent-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//如若查找的值有多个，倒着查找，则能查到末尾的值</span><br>    <span class="hljs-keyword">if</span>(h[i]==<span class="hljs-keyword">find</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">0</span>)&#123;<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;查找成功，该元素是h[&quot;</span>+i+<span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该值不存在&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s39.png"></p><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> y= random.nextInt(<span class="hljs-number">10</span>);<br><span class="hljs-type">int</span>[] uu=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[y];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;y;i++)&#123;<br>    uu[i]= random.nextInt(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(uu[i]+&quot; &quot;);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br><br><span class="hljs-type">double</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">double</span> i:uu)&#123;<br>    sum+=i;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;数组中所有的值的和为：&quot;+sum);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s41.png"><br><strong>for(double i:uu):利用扩展for语句来遍历数组，这时i并不是索引(注意i需要注明类型)，而是元素的值（利用在当不需要索引值的时候，比较方便）。这种写法比较简洁</strong></p><h3 id="利用扩展for循环来遍历多维数组"><a href="#利用扩展for循环来遍历多维数组" class="headerlink" title="利用扩展for循环来遍历多维数组"></a>利用扩展for循环来遍历多维数组</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">double</span>[] m=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;//数组可以这样创建并初始化<br><span class="hljs-type">double</span>[][] many=&#123;m,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">double</span>[] i:many)&#123;//这里遍历要用到<span class="hljs-type">double</span>[] i,因为多维数组时数组里套着多个数组<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">double</span> j:i)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.printf(&quot;%5.1f&quot;,j);<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s42.png"></p><h2 id="数组的倒序排列"><a href="#数组的倒序排列" class="headerlink" title="数组的倒序排列"></a>数组的倒序排列</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span>[] <span class="hljs-keyword">qq</span>=new <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>    <span class="hljs-string">qq[j]</span>= random.nextInt(<span class="hljs-number">10</span>);<br>    System.out.printf(<span class="hljs-string">&quot;<span class="hljs-variable">%3d</span>&quot;</span>,<span class="hljs-string">qq[j]</span>);<br>&#125;<br>System.out.println();<br><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>/<span class="hljs-number">2</span>;i++)&#123;<span class="hljs-regexp">//</span>只需要遍历到数组长度（无论奇数还是偶数）的一半即可，否则就会变回原来的顺序<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-string">qq[i]</span>;<br>    <span class="hljs-string">qq[i]</span>=<span class="hljs-string">qq[10-i-1]</span>;<br>    <span class="hljs-string">qq[10-i-1]</span>=t;<br><br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>    System.out.printf(<span class="hljs-string">&quot;<span class="hljs-variable">%3d</span>&quot;</span>,<span class="hljs-string">qq[j]</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下；<br><img src="/image/s43.png"></p><h2 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h2><p>通过遍历将数组a的所有值值依次赋给数组b<br><strong>若直接使用赋值运算符&#x3D;，比如a&#x3D;b(a、b都是数组)，这样的结果是a引用了b的数组主体，并非是复制</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>Random random=<span class="hljs-built_in">new</span> Random();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入数组的元素个数：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-type">int</span>[] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-type">int</span>[] b=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a[&quot;+i+&quot;]=&quot;);<br>    a[i]=scanner.nextInt();<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    b[n-i<span class="hljs-number">-1</span>]=a[i];//<br>&#125;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;b数组的元素为：&quot;);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(b[i]+&quot; &quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串数组的创建"><a href="#字符串数组的创建" class="headerlink" title="字符串数组的创建"></a>字符串数组的创建</h2><p>根据1~12数字填写对应的英文缩写</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs gradle">String[] months = &#123;<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;July&quot;</span>, <span class="hljs-string">&quot;Aug&quot;</span>, <span class="hljs-string">&quot;Sept&quot;</span>, <span class="hljs-string">&quot;Oct&quot;</span>, <span class="hljs-string">&quot;Nov&quot;</span>, <span class="hljs-string">&quot;Dec&quot;</span>&#125;;<br><br><span class="hljs-comment">// 使用布尔数组标记已使用的月份</span><br><span class="hljs-keyword">boolean</span>[] used = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">12</span>];<br><span class="hljs-keyword">int</span> usedCount = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已正确回答的月份数量</span><br><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">if</span> (usedCount == <span class="hljs-number">12</span>) &#123; <span class="hljs-comment">// 如果所有月份都已正确回答</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;所有题目已完成！游戏结束。&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 随机生成一个未使用的月份索引</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        n = random.nextInt(<span class="hljs-number">12</span>);<br>    &#125; <span class="hljs-keyword">while</span> (used[n]); <span class="hljs-comment">// 如果该月份已被正确回答过，则重新生成</span><br><br>    System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入月份的英语表达，首字母大写，其他字母小写（缩写即可）：&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123; <span class="hljs-comment">// 对当前月份进行循环，直到回答正确</span><br><br>        System.out.<span class="hljs-keyword">print</span>((n + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;月：&quot;</span>);<br>        String userAnswer = scanner.nextLine();<br><br>        <span class="hljs-keyword">if</span> (months[n].equals(userAnswer)) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;回答正确！&quot;</span>);<br>            used[n] = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 标记当前月份为已正确回答</span><br>            usedCount++; <span class="hljs-comment">// 增加已正确回答的月份数量</span><br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出当前月份的循环</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;回答错误，请重新输入！&quot;</span> );<span class="hljs-comment">//因为while控制条件为true，除非执行break，否则会继续循环</span><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 询问用户是否继续游戏</span><br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;再来一次？ 1...yes; 2...no&quot;</span>);<br>    <span class="hljs-keyword">int</span> choice;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (scanner.hasNextInt()) &#123;<span class="hljs-comment">//用于检查输入流中下一个可用的输入是否是一个有效的整数</span><br>            choice = scanner.nextInt();<br>            scanner.nextLine(); <span class="hljs-comment">//清理缓冲区，如果用户输入 1 并按下回车键，scanner.nextInt() 会读取 1，但换行符 \n 仍然留在缓冲区中</span><br>            <span class="hljs-comment">//如果下一次调用 scanner.nextLine()，它会直接读取缓冲区中的换行符，而不会等待用户输入新的内容，从而导致程序行为异常</span><br>            <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span> || choice == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;输入无效，请输入 1 或 2：&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;输入无效，请输入数字：&quot;</span>);<br>            scanner.<span class="hljs-keyword">next</span>(); <span class="hljs-comment">// 读取并丢弃无效输入</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>) &#123;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;游戏结束。&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s44.png"></p><h2 id="引用类型和对象"><a href="#引用类型和对象" class="headerlink" title="引用类型和对象"></a>引用类型和对象</h2><p>数组主体与一般变量不同，它被称为对象，引用数组主体的类型为引用类型，数组变量的类型是数组类型，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>[] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;a=&quot;+a);<br>a=<span class="hljs-keyword">null</span>;//将<span class="hljs-keyword">null</span>这个空常量赋给a，a这被称为空引用，那么这时数组主体则使用垃圾回收进行回收<br>//若将数组a的类型改为final <span class="hljs-type">int</span>，那么就会避免赋给a空常量<span class="hljs-keyword">null</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;a=&quot;+a);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s45.png"></p><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>每列的数值个数可以不同</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;输入该数组的行数：&quot;);<br><span class="hljs-type">int</span> h= scanner.nextInt();<br><span class="hljs-type">int</span>[][] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[h][];<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;依次输入该数组的列数：&quot;);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a[&quot;+i+&quot;]:&quot;);<br>    a[i]=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[scanner.nextInt()];<br>&#125;<br><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入每个元素的值：\n第0行：&quot;);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h;i++)&#123;<br>    <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+i+&quot;行：&quot;);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;a[i].length;j++)&#123;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a[&quot;+i+&quot;][&quot;+j+&quot;]=&quot;);<br>        a[i][j]= scanner.nextInt();<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h;i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].length; j++) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(a[i][j] + &quot; &quot;);<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s47.png"></p><h2 id="矩阵的乘积"><a href="#矩阵的乘积" class="headerlink" title="矩阵的乘积"></a>矩阵的乘积</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int[][] a=new int[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>];<br>int[][] b= &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;请输入数组a的值&quot;</span>);<br>for(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    for(int j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>        <span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;a[&quot;</span>+i+<span class="hljs-string">&quot;][&quot;</span>+j+<span class="hljs-string">&quot;]=&quot;</span>);<br>        a[i][j]= scanner.nextInt();<br>    &#125;<br>&#125;<br><br>int[][] c=new int[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>// 计算矩阵 a 和矩阵 b 的乘积<br>for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123; // 遍历矩阵 a 的行<br>    for (int j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123; // 遍历矩阵 b 的列<br>        for (int k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++) &#123; // 遍历矩阵 a 的列和矩阵 b 的行<br>            c[i][j] += a[i][k] * b[k][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br>// 输出矩阵 c<br><span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;矩阵 a 和矩阵 b 的乘积为：&quot;</span>);<br>for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    for (int j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>        <span class="hljs-symbol">System</span>.out.print(c[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-symbol">System</span>.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>a矩阵内的数都为1，运行结果如下：<br><img src="/image/s46.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序流程之循环、printf、转义字符</title>
    <link href="/2025/02/26/java04/"/>
    <url>/2025/02/26/java04/</url>
    
    <content type="html"><![CDATA[<h1 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h1><p>do语句为循环判断首（判断在后，循环在前）  </p><h2 id="判断b除以3的结果"><a href="#判断b除以3的结果" class="headerlink" title="判断b除以3的结果"></a>判断b除以3的结果</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sas">String str;//<span class="hljs-keyword">do</span>...<span class="hljs-keyword">while</span>语句中循环条件在外，所以str的定义应该在外面<br>String str2=<span class="hljs-string">&quot;是&quot;</span>;///定义字符串时注意是双引号不是单引号，若是单引号则表示字符常量（类型为char）<br><br><span class="hljs-keyword">do</span>&#123;<br><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入整数b：&quot;</span>);<br>    int b=scanner.next<span class="hljs-meta">Int</span>();<br>    <span class="hljs-keyword">if</span>(b%3==0)  //若不加&#123;&#125;，要注意<span class="hljs-keyword">else</span>是和与它最近的<span class="hljs-keyword">if</span>相链接，且与缩进无关<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b能够被3整除&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==1)<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余1&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==2)<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余2&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不为正值&quot;</span>);<br><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入是否继续：（是/否）&quot;</span>);<br>    str= scanner.next();///next()读取单个单词，nextLine()读取一行<br>&#125;<span class="hljs-keyword">while</span>(str.equals(str2));///字符串中的相等运算用equals<br></code></pre></td></tr></table></figure><h2 id="猜数字游戏-0-99"><a href="#猜数字游戏-0-99" class="headerlink" title="猜数字游戏(0~99)"></a>猜数字游戏(0~99)</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Random random=<span class="hljs-built_in">new</span> Random();<br><span class="hljs-type">int</span> <span class="hljs-keyword">no</span>=random.nextInt(<span class="hljs-number">100</span>);<br><br><span class="hljs-type">int</span> x;<br><br><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请猜一下（0~99）:&quot;);<br>    x= scanner.nextInt();<br><br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-keyword">no</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;猜大了！！！&quot;);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-keyword">no</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;猜小了！！！&quot;);<br>    &#125;<br>&#125;<span class="hljs-keyword">while</span>(x!=<span class="hljs-keyword">no</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;回答正确&quot;);<br></code></pre></td></tr></table></figure><h1 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h1><h2 id="输出从a到0的所有数"><a href="#输出从a到0的所有数" class="headerlink" title="输出从a到0的所有数"></a>输出从a到0的所有数</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入a的值&quot;);<br><span class="hljs-type">int</span> a= scanner.nextInt();<br><span class="hljs-keyword">while</span>(a&gt;=<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a<span class="hljs-comment">--);//a--后置递减运算，先返回变量的当前值，然后再将变量的值减1；</span><br>    //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-comment">--a);//--a前置递减运算，先将变量的值减1，然后再返回变量的新值；</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输出1加到j的和"><a href="#输出1加到j的和" class="headerlink" title="输出1加到j的和"></a>输出1加到j的和</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs axapta">System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个或者整数&quot;</span>);<br><span class="hljs-built_in">int</span> j= scanner.nextInt();<br><br><span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<span class="hljs-comment">//i用来控制循环，这里不能是0，因为必须从1开始加</span><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<span class="hljs-comment">//sum是和</span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<span class="hljs-comment">//若j=3</span><br>        <span class="hljs-keyword">sum</span>+=i;<span class="hljs-comment">//在这想要实现j--，其实i++就可以从1加到j   循环结束后sum的变化为0 1 3 6</span><br>        i++;<span class="hljs-comment">//循环结束后i的变化为1 2 3 4</span><br>    &#125;<br>System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;从1加到n的和为：&quot;</span>+<span class="hljs-keyword">sum</span>);<br></code></pre></td></tr></table></figure><h2 id="计算值的位数"><a href="#计算值的位数" class="headerlink" title="计算值的位数"></a>计算值的位数</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;输入一个正整数的值&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>    n/=<span class="hljs-number">10</span>;<br>    i++;//i是循环个数也是值的位数<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(n+&quot;的位数为&quot;+i);<br></code></pre></td></tr></table></figure><p><strong>do…while语句与while语句不同：如果判断条件不成立，do语句一定会执行一次循环体；while语句一次都不会执行</strong></p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for(初始条件,控制条件,循环体){}：</p><p>若初始条件不需要，可以省略；若无控制条件且无break和return，则为true，则会陷入无限循环内；若无执行内容，也可省略  </p><h2 id="输出1加到j的和-1"><a href="#输出1加到j的和-1" class="headerlink" title="输出1加到j的和"></a>输出1加到j的和</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个或者整数&quot;</span>);<br><span class="hljs-built_in">int</span> j= scanner.nextInt();<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=j;i++)&#123;<br>    <span class="hljs-keyword">sum</span>+=i;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;和为：&quot;</span>+<span class="hljs-keyword">sum</span>);<br></code></pre></td></tr></table></figure><p>将以上代码改写，使得结果为表达式如”1+2+3&#x3D;6”</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stata">System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个正整数：&quot;</span>);<br>int j = scanner.nextInt();<br><br><span class="hljs-keyword">if</span> (j &lt;= 0) &#123;<br>    System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个正整数！&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    int <span class="hljs-keyword">sum</span> = 0; <span class="hljs-comment">// 用于存储累加和</span><br>    StringBuilder expression = new StringBuilder(); <span class="hljs-comment">// 用于构建表达式</span><br><br>    <span class="hljs-keyword">for</span> (int i = 1; i &lt;= j; i++) &#123;<br>        <span class="hljs-keyword">sum</span> += i; <span class="hljs-comment">// 累加</span><br>        <span class="hljs-keyword">if</span> (i == j) &#123;<br>            expression.<span class="hljs-keyword">append</span>(i); <span class="hljs-comment">// 如果是最后一个数字，直接添加</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            expression.<span class="hljs-keyword">append</span>(i).<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;+&quot;</span>); <span class="hljs-comment">// 不是最后一个数字，添加数字和加号</span><br>        &#125;<br>    &#125;<br><br>    expression.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;=&quot;</span>).<span class="hljs-keyword">append</span>(<span class="hljs-keyword">sum</span>); <span class="hljs-comment">// 在表达式末尾添加等号和总和</span><br>    System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;从1加到n的表达式为：&quot;</span> + expression);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：for和while语句可以互相转换，都被称为判断循环首（判断在前，循环在后）</strong></p><h2 id="输出n个"><a href="#输出n个" class="headerlink" title="输出n个*"></a>输出n个*</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;输入星号的个数：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;*&quot;);<br>    //每隔<span class="hljs-number">5</span>个*换行<br>    <span class="hljs-keyword">if</span>((i+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for循环可以有两个变量-n减去1…n的值依次是多少"><a href="#for循环可以有两个变量-n减去1…n的值依次是多少" class="headerlink" title="for循环可以有两个变量,n减去1…n的值依次是多少"></a>for循环可以有两个变量,n减去1…n的值依次是多少</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入整数：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=n<span class="hljs-number">-1</span>; i&lt;=n;i++,j<span class="hljs-comment">--)&#123;</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(n+&quot;-&quot;+i+&quot;=&quot;+j);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/image/s28.png"></p><h2 id="从0正数到n或从n倒数到0"><a href="#从0正数到n或从n倒数到0" class="headerlink" title="从0正数到n或从n倒数到0"></a>从0正数到n或从n倒数到0</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;n=&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=n;i&lt;n+<span class="hljs-number">1</span>;i++,j<span class="hljs-comment">--)&#123;</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(i);<br>    //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(j);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h1><h2 id="金字塔"><a href="#金字塔" class="headerlink" title="金字塔"></a>金字塔</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs abnf">System.out.println(<span class="hljs-string">&quot;n=&quot;</span>)<span class="hljs-comment">;</span><br>int n<span class="hljs-operator">=</span> scanner.nextInt()<span class="hljs-comment">;</span><br><br>for(int i<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)&#123;///行数</span><br>    // 打印空格，空格数量为 n - i<br>    for (int k <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">; k &lt;= n - i; k++) &#123;///中间的控制条件的右操作数和循环体循环的次数有关</span><br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">;</span><br>    &#125;<br>    for(int j<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;j&lt;=(i-1)*2+1;j++)&#123;//当外层循环i=1时，j循环到1；当外层循环i=2时，j循环到2...</span><br>        System.out.print(i%<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br><br>    &#125;<br><br>    System.out.println()<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s28.png"></p><h2 id="利用-画直角三角形"><a href="#利用-画直角三角形" class="headerlink" title="利用*画直角三角形"></a>利用*画直角三角形</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">System.out.println(<span class="hljs-string">&quot;n=&quot;</span>)<span class="hljs-comment">;</span><br>int n<span class="hljs-operator">=</span> scanner.nextInt()<span class="hljs-comment">;</span><br><br>for(int i<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)&#123;//行数</span><br>    for(int j<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;j&lt;=i;j++)&#123;///当外层循环i=1时，j循环到1；当外层循环i=2时，j循环到2...</span><br>        System.out.print(<span class="hljs-string">&quot;*&quot;</span>)<span class="hljs-comment">;</span><br>    &#125;<br>    System.out.println()<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s30.png"></p><h1 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h1><h2 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h2><p>条件：不能被大于等于2且小于n中的任意一个数整除的整数一定是质数</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//已知一个确定的条件，那就只做这个条件的循环处理</span><br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入正整数：&quot;</span>);<br>        <span class="hljs-keyword">int</span> n= scanner.nextInt();<br><br>        <span class="hljs-comment">// 特殊情况处理</span><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该数值不是质数&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断是否为质数</span><br>        <span class="hljs-keyword">boolean</span> isPrime = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 假设 n 是质数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123; <span class="hljs-comment">// 也可只检查到 sqrt(n)——&gt;Math.sqrt(n)</span><br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>                isPrime = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 如果找到一个因数，则 n 不是质数</span><br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//说明它不是质数，则直接结束for循环</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 输出结果</span><br>        <span class="hljs-keyword">if</span> (isPrime) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该数值是质数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该数值不是质数&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h1><h2 id="计算和和平均值（不将负值计入计算平均值范围内）"><a href="#计算和和平均值（不将负值计入计算平均值范围内）" class="headerlink" title="计算和和平均值（不将负值计入计算平均值范围内）"></a>计算和和平均值（不将负值计入计算平均值范围内）</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gradle">System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;要想加几个整数呢？&quot;</span>);<br>        <span class="hljs-keyword">int</span> n= scanner.nextInt();<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">0</span>;<span class="hljs-comment">//非负值数量</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;整数&quot;</span>+i+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">int</span> j= scanner.nextInt();<br><br>                <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;不对负数进行运算&quot;</span>);<br>                    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//在这里执行continue后不执行for的剩下语句，若满足控制条件进入下一次循环，但是会计入循环次数</span><br>                    <span class="hljs-comment">// 而break会终止整个循环，即使还满足for的控制条件也不再继续了</span><br>                &#125;<br>                <span class="hljs-keyword">count</span>++;<span class="hljs-comment">//记录非负值数量</span><br>            <span class="hljs-comment">//我的思考方向是计算负值数量,突破口在contiune，不执行时也就是当输入的值是正数时，一定会运行这部分，所以在这添加count++最合适</span><br>                sum+=j;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">count</span>==<span class="hljs-number">0</span>)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;无非负值，无法计算&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">double</span> averge=(<span class="hljs-keyword">double</span>)sum<span class="hljs-regexp">/count;/</span>/将sum的类型变为<span class="hljs-keyword">double</span><br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;和是：&quot;</span>+sum);<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;平均值是：&quot;</span>+averge);<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>break和continue语句的区别：break：无论循环是否满足控制条件都不再循环；continue：不执行剩下的循环语句，若满足循环条件则继续循环。</strong></p><h1 id="带标签的break语句"><a href="#带标签的break语句" class="headerlink" title="带标签的break语句"></a>带标签的break语句</h1><p><strong>带标签的break语句，无论是带标签还是不带标签，都必须在循环语句中使用</strong>  </p><p>输入整数，每组五个数，共10组，求出每组合计及所有组的总计，代码如下所示：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stata">System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入整数，每组五个数，共10组：&quot;</span>);<br>int <span class="hljs-keyword">total</span>= 0;<br><br><br>Outer:<br>   <span class="hljs-keyword">for</span>(int i=1;i&lt;=10;i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;组：&quot;</span>);<br>    int <span class="hljs-keyword">sum</span>=0;<br> Inner:<br>    <span class="hljs-keyword">for</span>(int j=1;j&lt;=5;j++)&#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;整数&quot;</span>+j+<span class="hljs-string">&quot;:&quot;</span>);<br>        int k= scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(k==999)<span class="hljs-comment">//输入999，结束Outer</span><br>            <span class="hljs-keyword">break</span> Outer;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k==666)<span class="hljs-comment">//输入666，结束Inner</span><br>            <span class="hljs-keyword">break</span> Inner;<span class="hljs-comment">//这里的Inner可以省略，原因是break语句会中断直接包含它的循环语句</span><br>        <span class="hljs-keyword">sum</span>+=k;<br><br>    &#125;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;每组的小计值为：&quot;</span>+<span class="hljs-keyword">sum</span>);<span class="hljs-comment">//如果要将这组的小计计入总数，除非5个数都输入数值，否则就要输入666来中断输入</span><br>    <span class="hljs-keyword">total</span>+=<span class="hljs-keyword">sum</span>;<br>&#125;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;所有整数的和为：&quot;</span>+<span class="hljs-keyword">total</span>);<br></code></pre></td></tr></table></figure><h1 id="带标签的continue语句"><a href="#带标签的continue语句" class="headerlink" title="带标签的continue语句"></a>带标签的continue语句</h1><p><strong>带标签的contiune语句，无论是带标签还是不带标签，都必须在循环语句中使用</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入整数，每组五个数，共10组：&quot;</span>);<br><span class="hljs-built_in">int</span> total= <span class="hljs-number">0</span>;<br><br>Outer:<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;组：&quot;</span>);<br>    Inner:<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">5</span>;j++)&#123;<br><br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;整数&quot;</span>+j+<span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-built_in">int</span> k= scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">999</span>)<br>            <span class="hljs-keyword">break</span> Outer;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k==<span class="hljs-number">666</span>)<br>            <span class="hljs-keyword">continue</span> Outer;<span class="hljs-comment">//实现不计算每组的小计值，直接进入下一个外部循环</span><br>        total+=k;<br><br>    &#125;<br>&#125;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;所有整数的和为：&quot;</span>+total);<br></code></pre></td></tr></table></figure><h1 id="printf方法"><a href="#printf方法" class="headerlink" title="printf方法"></a>printf方法</h1><p>printf方法主要是为了调整格式</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> chap04;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Expr5</span> </span>&#123;<br>    public static void main(String[] args) &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;<span class="hljs-variable">%3d</span>&quot;</span>,i*j);<span class="hljs-regexp">//</span><span class="hljs-variable">%3d</span>至少按三位宽的十进制进行显示，靠右排列<br><br>            &#125;System.out.println();<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;k=<span class="hljs-variable">%6</span>.2f&quot;</span>,<span class="hljs-number">6.4</span>);<span class="hljs-regexp">//</span>输出浮点数，<span class="hljs-variable">%6</span>.2f中的<span class="hljs-number">6</span>是整体按<span class="hljs-number">6</span>位显示，<span class="hljs-number">2</span>指小数部分按<span class="hljs-number">2</span>为显示<br>        System.out.printf(<span class="hljs-string">&quot;\n3<span class="hljs-variable">%%</span>2=1&quot;</span>);<span class="hljs-regexp">//</span>那么在<span class="hljs-keyword">printf</span>这种格式下，要想输出<span class="hljs-variable">%，</span>则需要<span class="hljs-variable">%%</span><br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%05d</span>&quot;</span>,<span class="hljs-number">12</span>);<span class="hljs-regexp">//</span>空位用<span class="hljs-number">0</span>填充<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%7s</span>&quot;</span>,<span class="hljs-string">&quot;sssss&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%o</span>&quot;</span>,<span class="hljs-number">12345</span>);<span class="hljs-regexp">//</span>八进制<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%x</span>&quot;</span>,<span class="hljs-number">13579</span>);<span class="hljs-regexp">//</span>十六进制小写字母<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%X</span>&quot;</span>,<span class="hljs-number">13579</span>);<span class="hljs-regexp">//</span>十六进制大写字母<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s31.png"></p><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">package</span> <span class="hljs-variable">chap05</span>;<br><br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr3</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;abcdefghajklmnopeeeeeeeeq&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\r</span>12345&quot;</span>);<span class="hljs-comment">// \r是回车符，当前显示位置会移动到当前行的行首</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;ABC<span class="hljs-char escape_">\t</span>123&quot;</span>);<span class="hljs-comment">// \t是水平制表符，ABC与123之间的空白宽度取决于运行环境</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\&quot;</span>和&#x27;和\&#x27;&quot;</span>);<span class="hljs-comment">//输出”和‘，‘可以用\&#x27;,也可以用’</span><br>        <span class="hljs-comment">//上方”“的都是字符串常量</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(&#x27;\&#x27;&#x27;);<span class="hljs-comment">//表示’的字符常量</span><br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>和<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运算结果如下：<br><img src="/image/s35.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序流程之分支、运算符、程序块</title>
    <link href="/2025/02/25/java03/"/>
    <url>/2025/02/25/java03/</url>
    
    <content type="html"><![CDATA[<h1 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h1><p>if语句包括if-then、if-then-else以及嵌套的if语句，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap03;<br><br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入一个整数a：&quot;</span>);<br>        <span class="hljs-built_in">int</span> a=sc.nextInt();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入一个整数b：&quot;</span>);<br>        <span class="hljs-built_in">int</span> b=sc.nextInt();<br><br>        <span class="hljs-comment">//if-then语句</span><br>        <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//a&gt;0是控制表达式，&gt;是关系运算符，还包括&lt;、&lt;=、&gt;=，关系运算符是二元运算符</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a是正数&quot;</span>);<span class="hljs-comment">//true</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a是0或负数&quot;</span>);<span class="hljs-comment">//false</span><br>        &#125;<br><br>        <span class="hljs-comment">//if-then-else语句</span><br>        <span class="hljs-keyword">if</span>(a==b)&#123;<span class="hljs-comment">//==和！=称为相等运算符</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a和b的值相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a和b不相等&quot;</span>);<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span>(!(b==<span class="hljs-number">0</span>))&#123;<span class="hljs-comment">//一元运算符！称为逻辑非运算符</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b不为0&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为0&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//嵌套的if语句</span><br>        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为0&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b&gt;<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为正数&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为负数&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//空语句：只有;的语句        </span><br>        <span class="hljs-comment">//表达式语句：a=b+11;(必须加分号，否则就是表达式，不是语句)</span><br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) ; &#123; <span class="hljs-comment">//当a是否为0，都会显示”a的值为0“，这是因为if后面有;,执行了空语句</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a的值为0&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s27.png"></p><h2 id="if相关练习"><a href="#if相关练习" class="headerlink" title="if相关练习"></a>if相关练习</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sas">//练习：b是否为a的约数<br><span class="hljs-keyword">if</span>(a<span class="hljs-title function_">%b</span>==0)&#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b是a的约数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不是a的约数&quot;</span>);<br>&#125;<br><br>//练习:被3整除<br><span class="hljs-keyword">if</span>(b%3==0)&#123;   //<span class="hljs-keyword">if</span>后可加&#123;&#125;，也可不加，如下段代码所示<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b能够被3整除&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==1) &#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==2) &#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余2&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不为正值&quot;</span>);<br><br><br><span class="hljs-keyword">if</span>(b%3==0)  //若不加&#123;&#125;，要注意<span class="hljs-keyword">else</span>是和与它最近的<span class="hljs-keyword">if</span>相链接，且与缩进无关<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b能够被3整除&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==1)<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==2)<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余2&quot;</span>);<br><span class="hljs-keyword">else</span><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不为正值&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>注意:if语句若不加{}，else是和与它最近的if相链接，且与缩进无关</strong></p><h1 id="switch…case语句"><a href="#switch…case语句" class="headerlink" title="switch…case语句"></a>switch…case语句</h1><p>case后一般要加上break，break指结束离其最近的循环（while、do…while、for）或switch语句</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">package</span> chap03;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Expr4 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入数字选择手势（0...石头/1...剪刀/2...布）:&quot;</span>);<br>        <span class="hljs-keyword">int</span> hand= scanner.nextInt();<br><br>        <span class="hljs-keyword">switch</span> (hand)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//叫做标签，case后只能是常量和字符常量</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;石头&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-comment">//执行到break时就会跳出switch语句（结束switch语句）</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;剪刀&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;布&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-comment">//最后部分的case部分也要加上break，以便后面存在标签时保证安全</span><br>            <span class="hljs-keyword">default</span>:<span class="hljs-comment">//default是标签，指除0 1 2之外的数字</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;包&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment">//随机生成0~2的a值</span><br>        Random random=<span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> a=random.nextInt(<span class="hljs-number">2</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;随机生成的a为&quot;</span>+a);<br>        <span class="hljs-keyword">switch</span> (a)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;石头&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;剪刀&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;布&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>逻辑运算符:&amp;&amp;和||<br>if(a&gt;&#x3D;3 &amp;&amp; a&lt;&#x3D;6)     正确<br>if(3&lt;&#x3D;a&lt;&#x3D;6)          错误<br>短路求值:【&amp;&amp;和||：确定左操作数的值就可以确定所有的值】</p><p>比较运算符：&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、&#x3D;&#x3D;</p><p>三元运算符：条件表达式 ? 表达式1 : 表达式2</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap03;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr2</span> &#123;<br>    <br>    <span class="hljs-comment">//求a和b中较小的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请输入一个数值a：&quot;</span>);<br>        <span class="hljs-type">int</span> a=scanner.<span class="hljs-built_in">nextInt</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请输入一个数值b：&quot;</span>);<br>        <span class="hljs-type">int</span> b=scanner.<span class="hljs-built_in">nextInt</span>();<br><br>        <span class="hljs-type">int</span> min;<br><br>        <span class="hljs-keyword">if</span>(a&lt;b)&#123;<br>            min=a;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            min=b;<br>        &#125;<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;较小的值是&quot;</span>+min);<br><br>        <span class="hljs-comment">//可以不利用if语句进行判断，直接采用条件运算符这个唯一的三元运算符</span><br>        <span class="hljs-comment">//min=a&lt;b?a:b;//表示当a&lt;b成立时则将a赋值为min，否则将b赋值给min</span><br>        <span class="hljs-comment">//System.out.println(&quot;较小的值是&quot;+ (a&lt;b?a:b));//或者直接显示结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="程序块"><a href="#程序块" class="headerlink" title="程序块"></a>程序块</h1><p>{}内的语句称为程序块，语句为多少都行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap03;<br><br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr3</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//对a和b进行升序排序</span><br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入a的值:&quot;</span>);<br>        <span class="hljs-built_in">int</span> a=scanner.nextInt();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入b的值:&quot;</span>);<br>        <span class="hljs-built_in">int</span> b=scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(a&gt;=b)&#123;<br>            <span class="hljs-comment">//交换a和b的值，新定义一个k作为第三方储存的变量</span><br>            <span class="hljs-built_in">int</span> k=b;<span class="hljs-comment">//只在程序块中使用的值可只在程序块定义</span><br>            b=a;<br>            a=k;<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;升序排序为&quot;</span>+<span class="hljs-string">&quot;a=&quot;</span>+a+<span class="hljs-string">&quot;,b=&quot;</span>+b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java变量的使用及输入输出</title>
    <link href="/2025/02/24/java02/"/>
    <url>/2025/02/24/java02/</url>
    
    <content type="html"><![CDATA[<h1 id="System-out-println控制台输出"><a href="#System-out-println控制台输出" class="headerlink" title="System.out.println控制台输出"></a>System.out.println控制台输出</h1><p>System.out.println可以显示字符串常量，也可以显示整数值、实数值、布尔值、类类型等，这是因为执行了重载的方法</p><h2 id="字符串与数值的拼接"><a href="#字符串与数值的拼接" class="headerlink" title="字符串与数值的拼接"></a>字符串与数值的拼接</h2><p>数值+字符串或字符串+数值这两种情况都是先将数值转化为字符串再进行拼接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;23+34=&quot;+(<span class="hljs-number">23</span>+<span class="hljs-number">34</span>));//先执行括号中的运算,结果为<span class="hljs-number">23</span>+<span class="hljs-number">34</span>=<span class="hljs-number">57</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;23+34=&quot;+<span class="hljs-number">23</span>+<span class="hljs-number">34</span>);//+运算在这里从左往右执行，<span class="hljs-number">23</span>转化为字符串拼接在后面，然后<span class="hljs-number">34</span>再转化为字符串拼接在后面，结果为<span class="hljs-number">23</span>+<span class="hljs-number">34</span>=<span class="hljs-number">2334</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">23</span>+<span class="hljs-number">34</span>+&quot;是23和34的和&quot;);//从左往右执行，结果为<span class="hljs-number">57</span>是<span class="hljs-number">23</span>和<span class="hljs-number">34</span>的和<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println((<span class="hljs-number">23</span>+<span class="hljs-number">34</span>)+&quot;是23和34的和&quot;);//从左往右执行，结果为<span class="hljs-number">57</span>是<span class="hljs-number">23</span>和<span class="hljs-number">34</span>的和<br>//减法<br>//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;23-34=&quot;+<span class="hljs-number">23</span><span class="hljs-number">-34</span>);//字符串无法减去数值，编译错误<br></code></pre></td></tr></table></figure><h1 id="变量声明、初始化和赋值"><a href="#变量声明、初始化和赋值" class="headerlink" title="变量声明、初始化和赋值"></a>变量声明、初始化和赋值</h1><p>注意：给x,y初始化时不能表示成int x&#x3D;y&#x3D;0;应该表示成int x&#x3D;0,y&#x3D;0;</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//上方都是固定常量，使用变量则能够自由存取</span><br>int <span class="hljs-attribute">x</span>,y;<span class="hljs-comment">//声明变量：类型+名称，x和y是int整数型变量，这时候没有对x和y进行初始化</span><br><span class="hljs-comment">//int x=11;//初始化</span><br><span class="hljs-attribute">x</span>=<span class="hljs-number">63</span>;<span class="hljs-comment">//将63赋值给x,=是赋值运算符</span><br><span class="hljs-attribute">y</span>=<span class="hljs-number">18</span>;<br>System<span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-attribute">x</span>+y);<span class="hljs-comment">//81</span><br>System<span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>((<span class="hljs-attribute">x</span>+y)/<span class="hljs-number">2</span>);<span class="hljs-comment">//40</span><br></code></pre></td></tr></table></figure><h1 id="通过键盘输入Scanner"><a href="#通过键盘输入Scanner" class="headerlink" title="通过键盘输入Scanner"></a>通过键盘输入Scanner</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;请输入整数x的值：&quot;);<br><span class="hljs-type">int</span> x=scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span> .println(&quot;x的值为：&quot;+x);<br></code></pre></td></tr></table></figure><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><ul><li>byte(1字节-2^7~2^7-1)</li><li>short(2字节-2^15~2^15-1)</li><li>int(4字节-2^31~2^31-1)</li><li>long(8字节-2^63~2^63-1)</li></ul><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><ul><li>float单精度</li><li>double双精度<br>单精度使用32位(4字节)来存储一个浮点数,双精度使用64位(8字节)来存储一个浮点数</li></ul><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><ul><li>char<br><code>char c=&#39;a&#39;;</code><strong>注意是单引号</strong></li></ul><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><ul><li>boolean<br><code>boolean b=true;</code></li></ul><p><strong>注意：String型不是基本类型，而是java.lang包中的类</strong></p><p>相关代码如下:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino">    package chap05;<br><br>    <span class="hljs-keyword">import</span> java.util.Scanner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">expr1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-type">int</span> a=<span class="hljs-number">12</span>_34;<span class="hljs-comment">//常量1234可在其中任意位置加上_</span><br>        <span class="hljs-type">int</span> b=<span class="hljs-number">18</span>;<br>        <span class="hljs-type">int</span> i= <span class="hljs-number">010</span>;<span class="hljs-comment">//八进制10</span><br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0x15</span>;<span class="hljs-comment">//十六进制15</span><br>        <span class="hljs-type">long</span> k=<span class="hljs-number">100L</span>;<span class="hljs-comment">//long类型</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%o&quot;</span>,i);<span class="hljs-comment">//%o指八进制</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%x&quot;</span>,j);<span class="hljs-comment">//%x指十六进制</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>,k);<span class="hljs-comment">//%d指十进制整数</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%o&quot;</span>,b);<br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%x&quot;</span>,b);<br>        <span class="hljs-comment">//十进制——&gt;八进制：十进制数除以8，得商和余数，商除以8，得商和余数，以此类推，将余数倒叙排列即为八进制数。十进制——&gt;十六进制同理</span><br><br>        <span class="hljs-comment">//十进制：1位：0~9，2位：10~99，</span><br>        <span class="hljs-comment">//八进制：1位：0~7一共8个数，之后就是10，没有8和9，以此类推，没有18、19、28、29....,所以2位：10~77一共56个数</span><br>        <span class="hljs-comment">//十六进制：1位：0~F一共16个数</span><br><br>        <span class="hljs-comment">//int型的5的二进制表示：            00000000000000000000000000000101</span><br>        <span class="hljs-comment">//而-5用补码表示：上面二进制所有位取反：11111111111111111111111111111010</span><br>        <span class="hljs-comment">//再将其末尾加1，则-5的表示为：       11111111111111111111111111111011</span><br>        <span class="hljs-comment">//整数常量可以用十进制、八进制和十六进制表示</span><br><br><br><br>        <span class="hljs-comment">//浮点数常量可以用十进制和十六进制表示</span><br>        <span class="hljs-comment">//float的精度是6~7位，位数为32；double精度位15位，位数为64位</span><br>        <span class="hljs-comment">//例如：1.23456E9——&gt;1.23456*10^9,1.23456总共的位数也就是精度是7位，指数9是位数</span><br>        <span class="hljs-type">float</span> c=<span class="hljs-number">123456789</span>_0;<span class="hljs-comment">//也可插入下划线,</span><br>        <span class="hljs-type">double</span> d=<span class="hljs-number">1.3</span>;<br>        <span class="hljs-type">float</span> d1=<span class="hljs-number">1.23f</span>;<span class="hljs-comment">//float型的值后面必须加f,不加f默认为double</span><br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;\nc=&quot;</span>+c);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;\nd=&quot;</span>+d);<br><br><br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>);<span class="hljs-type">int</span> e=scanner.<span class="hljs-built_in">nextInt</span>();<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;f=&quot;</span>);<span class="hljs-type">int</span> f=scanner.<span class="hljs-built_in">nextInt</span>();<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;e&lt;f=&quot;</span>+(e&lt;f));<span class="hljs-comment">//关系运算符、相等运算符、逻辑非运算符等判断真假的运算符的值为布尔值</span><br>        <span class="hljs-comment">//与2-1所讲相同，（e&lt;f）的值为true，会先将true转化为字符串，再和“e&lt;f=”拼接后输出</span><br><br>        <span class="hljs-type">boolean</span> b1=<span class="hljs-literal">true</span>;<br>        System.out.<span class="hljs-built_in">println</span>(b1);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s32.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap02;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Expr2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//整数型</span><br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入整数x的值：&quot;</span>);<br>        <span class="hljs-keyword">int</span> x=scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入整数y的值：&quot;</span>);<br>        <span class="hljs-keyword">int</span> y=scanner.nextInt();<br>        System.out .<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;x和y的和为：&quot;</span>+(x+y));<span class="hljs-comment">//x和y是操作数，+是二元运算符</span><br>        <span class="hljs-keyword">int</span> z=-y;<span class="hljs-comment">//-为一元运算符</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;y取反的值为：&quot;</span>+z);<br><br>        <span class="hljs-comment">//浮点数类型</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入小数a的值：&quot;</span>);<br>        <span class="hljs-keyword">double</span> a=scanner.nextDouble();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入小数b的值：&quot;</span>);<br>        <span class="hljs-keyword">double</span> b=scanner.nextDouble();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;a/b=&quot;</span>+a/b);<br><br>        <span class="hljs-comment">//final变量，一般推荐用大写字母来定义final变量，且final变量只能赋一次值或初始化</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入半径：&quot;</span>);<br>        <span class="hljs-keyword">double</span> r=scanner.nextDouble();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI=<span class="hljs-number">3.1416</span>;<span class="hljs-comment">//可以只在一处修改变量的值</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;圆的周长为&quot;</span>+(PI*r*<span class="hljs-number">2</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>final变量：一般推荐用大写字母来定义final变量，且final变量只能赋一次值或初始化</strong></p><p>运行结果如下：<br><img src="/image/s24.png"></p><h1 id="运算和类型"><a href="#运算和类型" class="headerlink" title="运算和类型"></a>运算和类型</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a=&quot;);<span class="hljs-type">int</span> a= scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;b=&quot;);<span class="hljs-type">int</span> b= scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;c=&quot;);<span class="hljs-type">int</span> c= scanner.nextInt();<br><span class="hljs-type">double</span> ave1=(a+b+c)/<span class="hljs-number">3</span>;<br><span class="hljs-type">double</span> ave2=(a+b+c)/<span class="hljs-number">3.0</span>;//要想得到相对精确的<span class="hljs-type">double</span>值，那么表达式中的必须有值是浮点型，那么在运算过程中就会自动先把<span class="hljs-type">int</span>型向上转化为相应的浮点型<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;三个数的平均值为：&quot;+ave1);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;三个数的平均值为：&quot;+ave2);<br><br>//造型运算<br><span class="hljs-type">double</span> ave3=(<span class="hljs-type">double</span>)(a+b+c)/<span class="hljs-number">3</span>;//造型运算符为(类型)x，则在运算中会先进行造型运算<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;三个数的平均值为：&quot;+ave3);<br></code></pre></td></tr></table></figure><p>运算结果如下：<br><img src="/image/s33.png"></p><h2 id="造型运算"><a href="#造型运算" class="headerlink" title="造型运算"></a>造型运算</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//缩小转换如<span class="hljs-type">double</span>——&gt;<span class="hljs-type">int</span>时必须使用造型运算，可能会丢失长度信息或精度信息，但不能直接赋值<br><span class="hljs-type">int</span> asd=(<span class="hljs-type">int</span>)<span class="hljs-number">10.0</span>;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(asd);<br><br>//放大转换不需要造型<br><span class="hljs-type">double</span> ghj=<span class="hljs-number">8</span>;<br><span class="hljs-type">double</span> jkl=<span class="hljs-number">8.3</span>f;<br><span class="hljs-type">int</span> bnm=<span class="hljs-string">&#x27;c&#x27;</span>;//<span class="hljs-type">char</span>——&gt;<span class="hljs-type">int</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ghj);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jkl);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bnm);<br></code></pre></td></tr></table></figure><p><strong>注意：循环控制不要采用浮点数，因为会产生误差</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">float</span> sum=<span class="hljs-number">0.0</span>f;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">float</span> i=<span class="hljs-number">0.0</span>f;i&lt;=<span class="hljs-number">1.0</span>f;i+=<span class="hljs-number">0.1</span>f)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;i=&quot;+i);<br>    sum+=i;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;sum=&quot;+sum);<br><br></code></pre></td></tr></table></figure><p>运算结果为：<br><img src="/image/s34.png"></p><h1 id="随机生成数字Random"><a href="#随机生成数字Random" class="headerlink" title="随机生成数字Random"></a>随机生成数字Random</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">lucky</span> <span class="hljs-operator">=</span> rand.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//随机生成0~9的整数</span><br></code></pre></td></tr></table></figure><p>针对Random做出以下练习：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap02;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Expr3 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<span class="hljs-comment">//void指不需要返回值</span><br>        <span class="hljs-comment">//生成一个0~99的随机整数</span><br>        Random rand = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> lucky = rand.nextInt(<span class="hljs-number">10</span>);<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;今天的幸运数字为&quot;</span> + lucky);<br><br>        <span class="hljs-comment">//生成一个一位数的负整数</span><br>        <span class="hljs-keyword">int</span> negativelucky = -(rand.nextInt(<span class="hljs-number">10</span>));<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的负整数为&quot;</span> + negativelucky);<br><br>        <span class="hljs-comment">//随机生成两位数的正整数</span><br>        <span class="hljs-keyword">int</span> negativelucky2 = <span class="hljs-number">10</span> + rand.nextInt(<span class="hljs-number">90</span>);<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的两位数的整数为&quot;</span> + negativelucky2);<br><br><br>        <span class="hljs-comment">//读入一个整数值，随机生成并显示其正负5范围内的整数值</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个整数的值：&quot;</span>);<br>        <span class="hljs-keyword">int</span> a = sc.nextInt();<br>        <span class="hljs-keyword">int</span> randomNumber = a + (rand.nextInt(<span class="hljs-number">11</span>) - <span class="hljs-number">5</span>);<span class="hljs-comment">//随机生成0~10的数减去5范围为-5~5，加上a范围就是a-5~a+5</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的整数是: &quot;</span> + randomNumber);<br><br><br>        <span class="hljs-comment">//随机生成0.0~1.0的实数</span><br>        <span class="hljs-keyword">double</span> c = rand.nextDouble();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成0.0~1.0的实数：&quot;</span> + c);<br><br>        <span class="hljs-comment">//随机生成0.0~10.0的实数</span><br>        <span class="hljs-keyword">double</span> b = rand.nextDouble() * <span class="hljs-number">10</span>;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成0.0~10.0的实数：&quot;</span> + b);<br><br>        <span class="hljs-comment">//随机生成的-1.0~1.0的实数</span><br>        <span class="hljs-keyword">double</span> d = rand.nextDouble()*<span class="hljs-number">2.0</span>-<span class="hljs-number">1.0</span>;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的-1.0~1.0的实数为：&quot;</span>+d);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s25.png"></p><h1 id="字符串读入"><a href="#字符串读入" class="headerlink" title="字符串读入"></a>字符串读入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chap02;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入字符串1: &quot;</span>);<br>        <br>        String s1=scanner.next();<span class="hljs-comment">//next()读入字符串,但是会被空格分开，空格后的内容不被读入；采用nextLine()不会出现这种情况</span><br>        System.out.println(<span class="hljs-string">&quot;采用next读入的字符串为：&quot;</span>+s1);<br><br><span class="hljs-comment">//        //若下面的内容也存在，用户在输入第一个字符串后直接按回车，nextLine()将会读取一个空字符串，因为next()已经消耗了那个回车符</span><br><span class="hljs-comment">//        System.out.println(&quot;请输入字符串2: &quot;);</span><br><span class="hljs-comment">//        String s2=scanner.nextLine();</span><br><span class="hljs-comment">//        System.out.println(&quot;采用nextLine读入的一行字符串为：&quot;+s2);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s26.png"><br><strong>注意：next()与nextLine()的异同：</strong></p><ul><li>同：扫描结果都为String型</li><li>异：next()只读取到下一个空白字符为止的内容，不读取空格和制表符；nextLine()则读取从当前位置到换行符之间的所有内容，会读取空格和制表符。</li></ul><p>所以经常遇到一种情况：当程序中两种都有使用时，nextLine()会读取上段代码残留的换行符，导致用户还未输入内容就做出了反应。<br><em><strong>所以在同一个程序中单单只用一种即可,避免出错误</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java在控制台上显示字符、注释</title>
    <link href="/2025/02/23/java01/"/>
    <url>/2025/02/23/java01/</url>
    
    <content type="html"><![CDATA[<h1 id="Java说明"><a href="#Java说明" class="headerlink" title="Java说明"></a>Java说明</h1><ul><li>java特点：一起编写，到处运行。因为类文件在任何平台上的JVM上都可以运行</li><li>JDK:java开发工具，包含编译器、各种工具以及JRE</li><li>JRE：java运行环境，包括JVM和各种库</li><li>JVM：java虚拟机</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr1</span> &#123;<span class="hljs-comment">//类名首字母要大写</span><br><br>    <span class="hljs-comment">//程序的入口，main方法中的语句会依次执行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;This is my first Java program&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;This is my second Java program&quot;</span>);<br>        <span class="hljs-comment">// System.out是与控制台相关的流，称为标准输出流</span><br>        <span class="hljs-comment">// println是程序的控件，也称方法，作用是打印输出并换行</span><br>        <span class="hljs-comment">// System.out.println()是在控制台输出信息</span><br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="如何编译和运行程序"><a href="#如何编译和运行程序" class="headerlink" title="如何编译和运行程序"></a>如何编译和运行程序</h1><p>.java文件（源文件）———编译javac———&gt;.class字节码文件（类文件）——运行java——&gt;控制台    </p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释：&#x2F;&#x2F;</li><li>多行注释：①传统注释：&#x2F;<em>…</em>&#x2F;；②文档注释：&#x2F;**…*&#x2F;</li></ul><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><p>字符串拼接直接采用“+”，以后会讲到它的原理toString()方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">expr2</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//字符串的拼接采用“+”</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Q:Good Evening! I am fabio. May I take your order?&quot;</span><br>                +<span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;A:I am working on it. The menu is not even in English.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
