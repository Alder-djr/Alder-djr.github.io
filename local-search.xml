<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java 高级</title>
    <link href="/2025/06/12/java34/"/>
    <url>/2025/06/12/java34/</url>
    
    <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>针对最小的部分单元（方法）进行测试，编写测试代码对其进行<strong>正确性测试</strong>。</p><h2 id="Junit单元测试框架"><a href="#Junit单元测试框架" class="headerlink" title="Junit单元测试框架"></a>Junit单元测试框架</h2><ul><li>可以用来对方法进行测试，它时第三方公司开源出来的（很多开发工具以及集成了Junit框架，如IDEA）</li><li>优点：<ul><li>可以灵活编写测试代码，可以针对某个方法执行测试，也支持一键完成对全部方法的自动化测试，且各自独立</li><li>不需要程序员去分析测试的结果，会自动生成测试报告出来</li></ul></li></ul><p><strong>步骤：</strong></p><ol><li>将junit框架的jar包导入项目中：鼠标悬停在@Test注解处，按住Alt+回车键，将该框架导入项目中</li><li>为需要测试的业务类，定义对应的测试类，并为每个业务方法，编写对应的测试方法（public、无参、void）</li><li><strong>测试方法上必须要声明<code>@Test</code>注解</strong>，在测试方法中，编写代码调用被测试的业务方法进行测试</li><li>开始测试：选中测试方法，右键点击运行，若测试通过则是绿色，如果测试失败，则是红色</li></ol><p>StringUtil.java:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.itheima.junit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> static void printNumber(String name)&#123;<br>        <span class="hljs-keyword">if</span>(name == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;名字长度&quot;</span> + name.length());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> static int getMaxIndex(String <span class="hljs-keyword">data</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">data</span> == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span>.length();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.junit;<br><br><span class="hljs-keyword">import</span> org.junit.<span class="hljs-keyword">Assert</span>;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> StringUtilTest &#123;<br>    @Test<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testPrintNumber() &#123;<br>        StringUtil.printNumber(&quot;aaaaa&quot;);<br>        StringUtil.printNumber(<span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    @Test<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testGetMaxIndex() &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-keyword">index</span> = StringUtil.getMaxIndex(&quot;aaaaa&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">index</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(StringUtil.getMaxIndex(<span class="hljs-keyword">null</span>));<br><br>        //断言机制：程序员可以通过预测业务方法的结果<br>        <span class="hljs-keyword">Assert</span>.assertEquals(&quot;方法内部有bug&quot;,<span class="hljs-number">4</span>, <span class="hljs-keyword">index</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行单个方法:<br>①testPrintNumber：<br><img src="/img/b20.png"><br>②testGetMaxIndex：<br><img src="/img/b21.png"><br>测试正确性时出现绿色不一定代表业务方法正确：</p><ul><li>测试方法中的测试用例不够全面</li><li>业务方法中的功能未按照业务要求的实现</li></ul><p><strong>之前的第二个方法测试中没有出现错误，所以分析业务方法发现是业务出现了问题，才加上了断言机制，与我们期待的结果相比较，发现并不符合业务需求</strong></p><p>正确修改方法testGetMaxIndex后，可以直接右键测试类名测试所有的方法：<br>StringUtilTest：<br><img src="/img/b22.png"></p><p>也可以右键项目名测试项目的所有测试方法：<br><img src="/img/b23.png"><br><img src="/img/b24.png"></p><p>Junit单元测试框架常见注解：（Junit 4.xxx版本&#x2F;Junit 5.xxx版本）</p><ul><li><code>@Test</code>测试类中的方法必须用它修饰才能成为测试方法，才可以启动执行</li><li><code>@Before</code>&#x2F;<code>@BeforeEach</code>用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次</li><li><code>@After</code>&#x2F;<code>@AfterEach</code>用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次</li><li><code>@BeforeClass</code>&#x2F;<code>@BeforAll</code>用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次</li><li><code>@AfterClass</code>&#x2F;<code>@AfterAll</code>用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次</li></ul><p>注意：</p><ul><li>在测试方法执行前执行的方法常用于初始化资源</li><li>在测试方法执行完后再执行的方法用于释放资源</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.junit;<br><br>import org.junit.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StringUtilTest</span> &#123;<br><br>    @Before<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----方法开始执行了-----&quot;</span>);<br>    &#125;<br><br>    @BeforeClass<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeClass</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----所有方法开始执行了----&quot;</span>);<br>    &#125;<br><br>    @After<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----方法执行结束了-----&quot;</span>);<br>    &#125;<br><br>    @AfterClass<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterClass</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----所有方法执行结束了----&quot;</span>);<br>    &#125;<br><br>    @Test<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrintNumber</span>()</span> &#123;<br>        StringUtil.printNumber(<span class="hljs-string">&quot;aaaaa&quot;</span>);<br>        StringUtil.printNumber(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    @Test<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetMaxIndex</span>()</span> &#123;<br>        <span class="hljs-built_in">int</span> index = StringUtil.getMaxIndex(<span class="hljs-string">&quot;aaaaa&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(index);<br>        System.<span class="hljs-keyword">out</span>.println(StringUtil.getMaxIndex(<span class="hljs-literal">null</span>));<br><br>        <span class="hljs-comment">//断言机制：程序员可以通过预测业务方法的结果</span><br>        Assert.assertEquals(<span class="hljs-string">&quot;方法内部有bug&quot;</span>,<span class="hljs-number">4</span>, index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/b25.png"></p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射就是加载类，并允许以编程的方式解剖类中的各种成分（成员变量、方法、构造器）</p><p><strong>步骤：</strong></p><ol><li>加载类，获取类的字节码：class对象<ul><li>获取Class对象的三中方式：<ul><li>Class c1 &#x3D; 类名.class</li><li>调用Class提供方法：<code>public static Class forName(String package);</code></li><li>Object提供的方法：<code>public Class getClass();</code> <code>Class c3 = 对象.getClass();</code></li></ul></li></ul></li><li>获取类的构造器、并对其进行操作<ul><li>Class提供了从类中获取构造器的方法：<ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>获取全部构造器（只能获取public构造器）</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>获取全部构造器</li><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>获取某个构造器（只能获取public构造器）</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>获取某个构造器</li></ul></li></ul></li></ol><p>先创建一个Student对象<br><strong>①获取Class对象：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TestClass &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">Class</span> c1 = Student.<span class="hljs-keyword">class</span>;<br>        System.out.<span class="hljs-keyword">println</span>(c1.getName());<span class="hljs-comment">//全类名</span><br>        System.out.<span class="hljs-keyword">println</span>(c1.getSimpleName());<span class="hljs-comment">//简名：类名</span><br><br>        <span class="hljs-keyword">Class</span> c2 = <span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;com.itheima.reflect.Student&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(c1 == c2);<br><br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-keyword">Class</span> c3 = s1.getClass();<br>        System.out.<span class="hljs-keyword">println</span>(c2 == c3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/b26.png"><br><strong>②获取构造器的方法：</strong></p><p>Cat.java:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.reflect;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.itheima.reflect;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2Constructor</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> void testGetConstructors() &#123;<br>        <span class="hljs-comment">//反射第一步，必须先得到这个类的Class对象</span><br>        Class c1 = Cat.<span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//获取类的全部构造器数组</span><br>        Constructor[] constructors1 = c1.getConstructors();<br>        Constructor[] constructors2 = c1.getDeclaredConstructors();<br>        <span class="hljs-comment">//遍历数组的每个构造器对象</span><br>        <span class="hljs-keyword">for</span> (Constructor <span class="hljs-keyword">constructor</span> : constructors1) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">constructor</span>.getName()+<span class="hljs-string">&quot;-----&gt;&quot;</span>+<span class="hljs-keyword">constructor</span>.getParameterCount());<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;---------------------------------&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Constructor <span class="hljs-keyword">constructor</span> : constructors2) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">constructor</span>.getName()+<span class="hljs-string">&quot;-----&gt;&quot;</span>+<span class="hljs-keyword">constructor</span>.getParameterCount());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> void testGetConstructor() throws Exception &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----------------------------------&quot;</span>);<br>        <span class="hljs-comment">//反射第一步，必须先得到这个类的Class对象</span><br>        Class c2 = Cat.<span class="hljs-keyword">class</span>;<br>        <span class="hljs-comment">//获取类的全部构造器数组</span><br>        Constructor constructor1 = c2.getConstructor();<span class="hljs-comment">//获取无参的public修饰的构造器</span><br>        Constructor constructor2 = c2.getDeclaredConstructor(String.<span class="hljs-keyword">class</span>);<span class="hljs-comment">//获取只有String类型参数的所有构造器</span><br>        Constructor constructor3 = c2.getDeclaredConstructor(String.<span class="hljs-keyword">class</span>,int.<span class="hljs-keyword">class</span>);<span class="hljs-comment">//获取只有String类型和int类型参数的所有构造器</span><br><br>        System.<span class="hljs-keyword">out</span>.println(constructor1.getName()+<span class="hljs-string">&quot;-----&gt;&quot;</span>+constructor1.getParameterCount());<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----------------------------------&quot;</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(constructor2.getName()+<span class="hljs-string">&quot;-----&gt;&quot;</span>+constructor2.getParameterCount());<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;------------------------------------&quot;</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(constructor3.getName()+<span class="hljs-string">&quot;-----&gt;&quot;</span>+constructor3.getParameterCount());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/b27.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 网络编程</title>
    <link href="/2025/06/09/java33/"/>
    <url>/2025/06/09/java33/</url>
    
    <content type="html"><![CDATA[<p>网络编程可以让设备中的程序与网络上其他设备中的程序进行数据交互。</p><h1 id="基本的通信架构"><a href="#基本的通信架构" class="headerlink" title="基本的通信架构"></a>基本的通信架构</h1><ul><li>CS架构（Client客户端&#x2F;Server客户端），例如微信；客户端需要程序开发，用户需要安装；服务端需要程序员开发实现。</li><li>BS架构（Browser浏览器&#x2F;Server客户端），例如在浏览器中访问的网页；浏览器不需要程序员开发实现，用户只需要安装浏览器；服务短需要程序员开发实现。</li></ul><p><strong>这两种架构都要依赖网络编程！</strong></p><h2 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h2><ul><li><strong>IP地址</strong>：设备在网络中的地址，是唯一的标识<ul><li><p>IPv4：4字节(32bit)——————&gt;11000000 10101000 00000001 01000010——————点分十进制表示法——————&gt;192.168.1.66<br><img src="/img/a93.png"></p></li><li><p>IPv6：128bit，分为8段表示，每段每四位编码一个十六进制位表示，数之间用<code>:</code>分开</p><p><img src="/img/a94.png"> </p><p><img src="/img/a95.png"></p></li><li><p>公网IP：可以连接互联网的IP地址，</p></li><li><p>内网IP：也叫局域网IP，只能组织机构内部使用，192.168开头的就是常见的局域网地址，范围为192.168.0.0——192.168.255.255，专为组织机构内部使用。</p></li><li><p>特殊IP地址：127.0.0.1、localhost：代表本机IP，只会寻找当前所在的主机。</p></li></ul></li><li><strong>端口</strong>：应用程序在设备中的唯一标识</li><li><strong>协议</strong>：连接和数据在网络中传输的规则</li><li>IP域名：可以转成IP地址，例如：<a href="http://www.itheima.com/">http://www.itheima.com</a><br>   <img src="/img/a96.png"></li><li>IP常见命令<ul><li><p><code>ipconfig</code>：查看本机IP地址<br><img src="/img/a97.png"> </p></li><li><p><code>ping IP地址</code>：检查网络是否接通<br><img src="/img/a98.png"><br>第一个ping主机，可以联通；第二个ping百度，可以联通，因为本机处于联网状态，且百度的服务器也没有倒闭。</p></li></ul></li></ul><h1 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h1><p>InetAddress代表IP地址</p><ul><li><code>public static InetAddress getLocalHost()</code>获取本机IP地址，返回一个InetAddress对象</li><li><code>public static InetAddress getByName(String host)</code>根据ip地址或者域名，返回一个InetAddress对象</li><li><code>public String getHostName()</code>获取该ip地址对象对应的主机名</li><li><code>public String getHostAddress()</code>获取该ip地址对象中的ip地址信息</li><li><code>public boolean isReachable(int timeout)</code>在指定毫秒内，判断主机与该ip对应的主机是否能联通</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class1;<br><br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> InetAddressTest &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取本机IP地址对象</span><br>        InetAddress ip1 = InetAddress.getLocalHost();<br>        System.out.<span class="hljs-keyword">println</span>(ip1.getHostAddress());<span class="hljs-comment">//真实IP地址</span><br>        System.out.<span class="hljs-keyword">println</span>(ip1.getHostName());<span class="hljs-comment">//主机名</span><br><br>        <span class="hljs-comment">//获取指定IP或者域名的IP地址对象</span><br>        InetAddress ip2 = InetAddress.getByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(ip2.getHostAddress());<br>        System.out.<span class="hljs-keyword">println</span>(ip2.getHostName());<br><br>        System.out.<span class="hljs-keyword">println</span>(ip2.isReachable(<span class="hljs-number">6000</span>));<span class="hljs-comment">//6s内是否可以与百度连通</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a99.png"></p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>应用程序在设备中的唯一标识，方便找到应用程序，被规定为一个16位的二进制，范围是0~65535<br><img src="/img/b1.png"><br>分类：</p><ul><li>周知端口：0~1023，被预先定义的知名应用占用（如HTTP占用80，FTP占用21）</li><li><strong>注册端口</strong>：1024~49151，分配给用户进程或某些应用程序</li><li>动态端口：49152~65535，之所以称为动态端口，是因为它一般不固定分配某种进程，而是动态分配。</li></ul><p><strong>我们自己开发的程序一般选择使用注册端口，且一个设备中不能出现两个应用程序的端口号一样，否则出错</strong></p><h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><p>网络上通信的设备，事先规定的连接规则，以及传输数据的规则被称为网络通信协议。</p><p>开放式网络互连标准：OSI网络参考模型</p><ul><li>OSI网络参考模型：全球网络互联模型</li><li>TCP&#x2F;IP网络模型：事实上的国际标准<br><img src="/img/a100.png"><br><strong>程序员需要关注的是：程序一般在应用层开发。在网络编程时，我们可以在传输层选择哪种数据通信协议（TCP&#x2F;UDP）</strong></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP称为用户数据报协议</p><ul><li><strong>无连接</strong>、<strong>不可靠</strong>通信，<strong>通信效率高</strong></li><li>不事先建立连接，数据按照<strong>包</strong>发送，一包数据包含：自己的IP、程序端口、目的地IP、程序端口和数据（限制在64KB内）等</li><li>发送方不管对方是否在线，数据在中间丢失也不管，且接收方收到数据也不返回数据，所以是不可靠的</li><li>语音通话，视频直播可以使用UDP</li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP称为传输控制协议</p><ul><li><strong>面向连接</strong>、<strong>可靠</strong>通信，<strong>通信效率低</strong></li><li>最终目的：保证在不可靠的的信道上实现可靠的传输</li><li>TCP主要有三个步骤实现可靠步骤：三次握手建立连接，传输数据进行确认，四次挥手断开连接</li><li>网页、文件的下载、支付可以使用TCP，保证<strong>数据可靠</strong></li></ul><p><strong>TCP协议：三次握手建立可靠连接</strong><br>可靠连接：确定通信双方，收发信息都是正常无问题的！（全双工通信）<br><img src="/img/b2.png"></p><p><strong>TCP协议：四次握手断开连接</strong><br>目的：确保双方数据的收发都已完成<br><img src="/img/b3.png"></p><h1 id="UDP通信编程"><a href="#UDP通信编程" class="headerlink" title="UDP通信编程"></a>UDP通信编程</h1><p><img src="/img/b11.png"><br>Java提供了一个java.net.DatagramSocket类来实现UDP通信</p><p><strong>DatagramSocket：用于创建客户端、服务端</strong></p><p>构造器：</p><ul><li><code>public DatagramSocket()</code>创建客户端或服务端的Socket对象，系统会随机为客户端分配一个端口号</li><li><code>public DatagramSocket(int port)</code>创建客户端或服务端的Socket对象，并指定端口</li></ul><p>方法：</p><ul><li><code>public void send(DatagramPacket dp)</code>发送数据包</li><li><code>public void receive(DatagramPacket p)</code>使用数据包接收数据</li></ul><p><strong>DatagramPacket：用于创建数据包</strong></p><p>构造器：</p><ul><li><code>public DatagramPacket(byte[] buf, int length, InetAddress address, int port)</code>创建<strong>发送</strong>的数据包对象</li><li><code>public DatagramPacket(byte[] buf, int length)</code>创建用来<strong>接收</strong>数据的数据包</li></ul><p>方法：</p><ul><li><code>public int getLength</code>获取数据包，实际接收到的字节个数</li></ul><h2 id="UDP通信实现一发一收"><a href="#UDP通信实现一发一收" class="headerlink" title="UDP通信实现一发一收"></a>UDP通信实现一发一收</h2><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建客户端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<span class="hljs-comment">//随机为客户端分配端口</span><br><br>        <span class="hljs-comment">//创建数据包对象封装要发出去的数据</span><br><span class="hljs-comment">//        byte buf[], 字节数组</span><br><span class="hljs-comment">//        int length,字节数组的大小</span><br><span class="hljs-comment">//        InetAddress address, 服务端的IP地址</span><br><span class="hljs-comment">//        int port，服务端程序的端口</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-string">&quot;我爱你中国！&quot;</span>.getBytes();<span class="hljs-comment">//字节数组</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length, InetAddress.getLocalHost(),<span class="hljs-number">6666</span>);<br><br><br>        <span class="hljs-comment">//正式发送这个数据包的数据出去</span><br>        socket.send(packet);<br><br>        System.out.println(<span class="hljs-string">&quot;客户端发送数据成功~~~&quot;</span>);<br><br>        <span class="hljs-comment">//释放资源</span><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动~~~&quot;</span>);<br>        <span class="hljs-comment">//创建服务端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">//创建数据包对象用来接收数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">64</span>];<span class="hljs-comment">//64KB</span><br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-comment">//正式使用数据包来接收数据</span><br>        socket.receive(packet);<br><br>        <span class="hljs-comment">//从字节数组中把接受到的数据直接打印出来</span><br>        <span class="hljs-comment">//获取数据包中接收到的数据的字节大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,len);<br>        System.out.println(str);<br><br>        System.out.println(packet.getAddress().getHostAddress());<span class="hljs-comment">//客户端的IP地址</span><br>        System.out.println(packet.getPort());<span class="hljs-comment">//客户端端口</span><br><br>        socket.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先启动服务端，再启动客户端<br><img src="/img/b4.png"></p><h2 id="UDP通信实现多发多收"><a href="#UDP通信实现多发多收" class="headerlink" title="UDP通信实现多发多收"></a>UDP通信实现多发多收</h2><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建客户端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<span class="hljs-comment">//随机为客户端分配端口</span><br><br>        <span class="hljs-comment">//创建数据包对象封装要发出去的数据</span><br><span class="hljs-comment">//        byte buf[], 字节数组</span><br><span class="hljs-comment">//        int length,字节数组的大小</span><br><span class="hljs-comment">//        InetAddress address, 服务端的IP地址</span><br><span class="hljs-comment">//        int port，服务端程序的端口</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> scanner.nextLine();<br><br>            <span class="hljs-comment">//一旦发现用户输入exit命令，则退出客户端</span><br>            <span class="hljs-keyword">if</span>(msg.equals(<span class="hljs-string">&quot;exit&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;欢迎下次光临，退出成功&quot;</span>);<br>                socket.close();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">byte</span>[] buf = msg.getBytes();<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length, InetAddress.getLocalHost(),<span class="hljs-number">6666</span>);<br><br>            <span class="hljs-comment">//正式发送这个数据包的数据出去</span><br>            socket.send(packet);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动~~~&quot;</span>);<br>        <span class="hljs-comment">//创建服务端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">64</span>];<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-comment">//正式使用数据包来接收数据</span><br>            socket.receive(packet);<br><br>            <span class="hljs-comment">//从字节数组中把接受到的数据直接打印出来</span><br>            <span class="hljs-comment">//获取数据包中接收到的数据的字节大小</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> packet.getLength();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,len);<br>            System.out.println(str);<br><br>            System.out.println(packet.getAddress().getHostAddress());<span class="hljs-comment">//客户端的IP地址</span><br>            System.out.println(packet.getPort());<span class="hljs-comment">//客户端端口</span><br><br>            System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现多发多收，就要开启多个客户端，此时要做以下配置：<br><img src="/img/b5.png"></p><p>运行结果如下，可以看出多个客户端的端口不同<br><img src="/img/b6.png"></p><p><strong>注意：服务端不需要释放资源，因为需要一直等待客户端发送信息，就像微信的服务端一样不能停止，才能供我们去使用</strong></p><h1 id="TCP通信编程"><a href="#TCP通信编程" class="headerlink" title="TCP通信编程"></a>TCP通信编程</h1><p><img src="/img/b7.png"></p><p><strong>客户端程序：</strong><br>客户端是通过java.net.Socket类来实现的</p><p>构造器：</p><ul><li><code>public Socket(String host, int port)</code>根据指定的服务器ip，端口号请求与服务器建立连接，连接通过，就获得了客户端socket</li></ul><p>方法：</p><ul><li><code>public OutputStream getOutputStream()</code>获得字节输出流对象</li><li><code>public InputStream getInputStream()</code>获得字节输入流对象</li></ul><p><strong>服务端程序：</strong></p><p>服务端通过java.net包下的ServerSocket类来实现的</p><p>构造器：</p><ul><li><code>public ServerSocket(int port)</code>为服务器程序注册端口</li></ul><p>方法：</p><ul><li><code>public Socket accept()</code>阻塞等待客户端的连接请求，一旦与某个客户端成功连接，则返回服务端这边的Socket对象</li></ul><h2 id="TCP通信实现一发一收"><a href="#TCP通信实现一发一收" class="headerlink" title="TCP通信实现一发一收"></a>TCP通信实现一发一收</h2><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动&quot;</span>);<br>        <span class="hljs-comment">//创建Socket对象，并同时请求与服务器程序连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;172.19.192.1&quot;</span>, <span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">//从socket通信管道中得到一个字节输出流，用来发送数据给服务端程序</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">//把低级字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-comment">//开始写数据到服务端</span><br>        dos.writeUTF(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>        dos.close();<br><br>        socket.close();<span class="hljs-comment">//释放资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6666</span>);<br><br>        <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">//从socket通信管道中得到一个字节输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">//把原始字节输入流包装成数据输入流</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br><br>        <span class="hljs-comment">//使用数据输入流读取客户端发送过来的消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> dis.readUTF();<span class="hljs-comment">//编码对应</span><br>        System.out.println(str);<br><br>        <span class="hljs-comment">//获取客户端的IP地址</span><br>        System.out.println(socket.getRemoteSocketAddress());<br><br>        dis.close();<br>        serverSocket.close();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/b8.png"><br>以上红框中是<strong>程序自动分配给客户端的端口</strong></p><h2 id="TCP通信实现多发多收"><a href="#TCP通信实现多发多收" class="headerlink" title="TCP通信实现多发多收"></a>TCP通信实现多发多收</h2><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动&quot;</span>);<br>        <span class="hljs-comment">//创建Socket对象，并同时请求与服务器程序连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;172.19.192.1&quot;</span>, <span class="hljs-number">6660</span>);<br><br>        <span class="hljs-comment">//从socket通信管道中得到一个字节输出流，用来发送数据给服务端程序</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">//把低级字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-comment">//一旦用户输入exit表示退出客户端</span><br>            <span class="hljs-keyword">if</span>(msg.equals(<span class="hljs-string">&quot;exit&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;退出成功&quot;</span>);<br>                dos.close();<span class="hljs-comment">//关闭输出流</span><br>                socket.close();<span class="hljs-comment">//释放资源</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//开始写数据到服务端</span><br>            dos.writeUTF(msg);<br>            dos.flush();<span class="hljs-comment">//刷新流</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6660</span>);<br><br>        <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>        <span class="hljs-comment">//从socket通信管道中得到一个字节输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        <span class="hljs-comment">//把原始字节输入流包装成数据输入流</span><br>        <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>            <span class="hljs-comment">//使用数据输入流读取客户端发送过来的消息</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> dis.readUTF();<span class="hljs-comment">//编码对应</span><br>            System.out.println(str);<br>                <br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当客户端发出<strong>exit</strong>之后，服务端抛出了异常，因为客户端的字节输出流和服务端的字节输入流是同生共死的，如下所示：<br><img src="/img/b9.png"></p><p>服务端的接收数据部分作出以下修改即可：捕获异常进行处理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-comment">//使用数据输入流读取客户端发送过来的消息</span><br>        String str = dis.readUTF();<span class="hljs-comment">//编码对应</span><br>        System.<span class="hljs-keyword">out</span>.println(str);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>         System.<span class="hljs-keyword">out</span>.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;离线了！&quot;</span>);<br>         dis.close();<br>         socket.close();<br>         <span class="hljs-keyword">break</span>;<br>   &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/img/b10.png"></p><h2 id="TCP通信——支持与多个客户端同时通信"><a href="#TCP通信——支持与多个客户端同时通信" class="headerlink" title="TCP通信——支持与多个客户端同时通信"></a>TCP通信——支持与多个客户端同时通信</h2><p><img src="/img/b12.png"></p><p>以上方法不能实现多个客户端同时通信，是因为accept()方法会阻塞，等待到一个客户端与服务端连接后，就会进入到while(true)循环，则不会再次调用accept()方法连接其他客户端。</p><p><strong>解决方法：服务端每连接到一个客户端，就将它交给一个子线程处理</strong></p><p>改造服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6660</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;上线了&quot;</span>);<br><br>            <span class="hljs-comment">//把这个客户端对应的socket通信管道交给一个独立的线程来处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServeReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServeReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServeReaderThread</span><span class="hljs-params">(Socket socket)</span> &#123;<span class="hljs-comment">//创建有参构造器</span><br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(line);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;下线了&quot;</span>);<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>处理客户端下线是在线程中，只需要捕获输入流是否有异常（因为输入流和输出流是同生共死的）就可以确定该客户端是否下线。<br><img src="/img/b13.png"></p><h1 id="TCP——综合案例"><a href="#TCP——综合案例" class="headerlink" title="TCP——综合案例"></a>TCP——综合案例</h1><h2 id="实现群发功能-CS架构"><a href="#实现群发功能-CS架构" class="headerlink" title="实现群发功能(CS架构)"></a>实现群发功能(CS架构)</h2><p><img src="/img/b14.png"><br>① 先实现服务端接收多个客户端的信息，在服务端（主线程）中创建多个子线程分别处理多个客户端<br>② 在该子线程中调用方法创建与其他所有客户端连接的输出流（<strong>注意：不能使用客户端主线程的输出流，因为输出流和输入流是一一对应的</strong>）<br>③ 将发送给服务端的数据利用字节输出流写入新创建的输出流中<br>④ 在客户端中创建新的子线程（创建输入流）接收从服务端（也就是其他客户端）发送来的信息并打印（<strong>子线程中创建输入流，与上方的输出流对应</strong>）</p><p><strong>注意：每个客户端只有一个管道（socket对象），所有的流都在管道中</strong></p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Socket&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6660</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            clients.add(socket);<span class="hljs-comment">//上线的客户端添加到集合中</span><br><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;上线了&quot;</span>);<br><br>            <span class="hljs-comment">//把这个客户端对应的socket通信管道交给一个独立的线程来处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServeReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Socket&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">6660</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            clients.add(socket);<span class="hljs-comment">//上线的客户端添加到集合中</span><br><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;上线了&quot;</span>);<br><br>            <span class="hljs-comment">//把这个客户端对应的socket通信管道交给一个独立的线程来处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServeReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><br><span class="hljs-keyword">import</span> java.io.DataOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端启动&quot;</span>);<br>        <span class="hljs-comment">//创建Socket对象，并同时请求与服务器程序连接</span><br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;172.19.192.1&quot;</span>, <span class="hljs-number">6660</span>);<br><br>        <span class="hljs-comment">//创建一个独立的线程，负责随机从socket中接收服务器发送过来的消息</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientReaderThread</span>(socket).start();<br><br>        <span class="hljs-comment">//从socket通信管道中得到一个字节输出流，用来发送数据给服务端程序</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br><br>        <span class="hljs-comment">//把低级字节输出流包装成数据输出流</span><br>        <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请说：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>            <span class="hljs-comment">//一旦用户输入exit表示退出客户端</span><br>            <span class="hljs-keyword">if</span>(msg.equals(<span class="hljs-string">&quot;exit&quot;</span>))&#123;<br>                System.out.println(<span class="hljs-string">&quot;退出成功&quot;</span>);<br>                dos.close();<span class="hljs-comment">//关闭输出流</span><br>                socket.close();<span class="hljs-comment">//释放资源</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//开始写数据到服务端</span><br>            dos.writeUTF(msg);<br>            dos.flush();<span class="hljs-comment">//刷新流</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端中创建的子线程：（负责接收客户端消息打印在服务端）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServeReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServeReaderThread</span><span class="hljs-params">(Socket socket)</span> &#123;<span class="hljs-comment">//创建有参构造器</span><br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> socket.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(line);<br><br>                    <span class="hljs-comment">//把消息分发给全部客户端进行接收</span><br>                    sendMsgToAll(line);<br><br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    Server.clients.remove(socket);<span class="hljs-comment">//删除下线客户端（静态变量通过类名.变量名访问）</span><br>                    System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;下线了&quot;</span>);<br>                    dis.close();<br>                    socket.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsgToAll</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//发送全部在线的Socket管道接收</span><br>        <span class="hljs-keyword">for</span> (Socket client : Server.clients) &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> client.getOutputStream();<span class="hljs-comment">//创建输出流负责发送给其他所有客户端</span><br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>            dos.writeUTF(msg);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端创建的子线程：（接收服务端消息打印在客户端）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket client;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientReaderThread</span><span class="hljs-params">(Socket client)</span> &#123;<br>        <span class="hljs-built_in">this</span>.client = client;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> client.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> dis.readUTF();<br>                    System.out.println(s);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    System.out.println(client.getRemoteSocketAddress() + <span class="hljs-string">&quot;自己下线了！&quot;</span>);<br>                    Server.clients.remove(client);<br>                    dis.close();<br>                    client.close();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/b15.png"></p><h2 id="实现一个简易版的BS架构"><a href="#实现一个简易版的BS架构" class="headerlink" title="实现一个简易版的BS架构"></a>实现一个简易版的BS架构</h2><p>BS架构的原理：<br><img src="/img/b16.png"><br><strong>服务器必须给浏览器响应HTTP协议规定的数据格式，否则浏览器不识别返回的数据</strong><br>HTTP协议规定：响应给浏览器的数据格式必须满足如下格式<br><img src="/img/b17.png"></p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class7;<br><br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Socket&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            clients.add(socket);<span class="hljs-comment">//上线的客户端添加到集合中</span><br><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;上线了&quot;</span>);<br><br>            <span class="hljs-comment">//把这个客户端对应的socket通信管道交给一个独立的线程来处理</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServeReaderThread</span>(socket).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class7;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServeReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServeReaderThread</span><span class="hljs-params">(Socket socket)</span> &#123;<span class="hljs-comment">//创建有参构造器</span><br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//立即响应一个网页内容“hello world”给浏览器展示</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(os);<span class="hljs-comment">//打印流</span><br>            pw.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            pw.println(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>            pw.println();<span class="hljs-comment">//必须换行</span><br>            pw.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;hello world&lt;/div&gt;&quot;</span>);<br>            pw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/b18.png"><br><strong>每次请求都开一个新线程，当线程堆积时，出现高并发，容易宕机</strong></p><h3 id="优化：使用线程池优化BS架构"><a href="#优化：使用线程池优化BS架构" class="headerlink" title="优化：使用线程池优化BS架构"></a>优化：使用线程池优化BS架构</h3><p><img src="/img/b19.png"><br>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class7;<br><br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.ArrayBlockingQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Socket&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;服务端启动&quot;</span>);<br>        <span class="hljs-comment">//为服务端注册端口</span><br>        <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8080</span>);<br><br>        <span class="hljs-comment">//创建线程池</span><br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">24</span>, <span class="hljs-number">24</span>, <span class="hljs-number">0</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">8</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">//使用ServerSocket对象，调用一个accept方法，等待客户端的连接请求</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            clients.add(socket);<span class="hljs-comment">//上线的客户端添加到集合中</span><br><br>            System.out.println(socket.getRemoteSocketAddress() + <span class="hljs-string">&quot;上线了&quot;</span>);<br><br>            <span class="hljs-comment">//把这个客户端对应的socket通信管道封装成任务，再将该任务放到线程池队列中</span><br>            pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServeReaderRunnable</span>(socket));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Runnable类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class7;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServeReaderRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket socket;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServeReaderRunnable</span><span class="hljs-params">(Socket socket)</span> &#123;<span class="hljs-comment">//创建有参构造器</span><br>        <span class="hljs-built_in">this</span>.socket = socket;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//立即响应一个网页内容“hello world”给浏览器展示</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(os);<span class="hljs-comment">//打印流</span><br>            pw.println(<span class="hljs-string">&quot;HTTP/1.1 200 OK&quot;</span>);<br>            pw.println(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>            pw.println();<span class="hljs-comment">//必须换行</span><br>            pw.println(<span class="hljs-string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;hello world&lt;/div&gt;&quot;</span>);<br>            pw.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 多线程</title>
    <link href="/2025/05/31/java32/"/>
    <url>/2025/05/31/java32/</url>
    
    <content type="html"><![CDATA[<p>线程是一个程序内部的一条执行流程，若程序中只有一条执行流程，那这个程序就是单线程的程序</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul><li>多线程指从软硬件上实现的多条执行流程的技术（多条线程由CPU负责调度执行）</li><li>Java是通过java.lang.Tread类的对象来代表线程</li></ul><h2 id="多线程的创建方式一：继承Thread类"><a href="#多线程的创建方式一：继承Thread类" class="headerlink" title="多线程的创建方式一：继承Thread类"></a>多线程的创建方式一：继承Thread类</h2><p>优点：编码简单<br>缺点：线程类已经继承Thread，无法继承其他类，不利于功能的扩展</p><p>子线程类MyThread：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.itheima.class8;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<span class="hljs-comment">//继承Thread线程类</span><br>    <span class="hljs-comment">//重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    public void run() &#123;<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;子线程MyThread: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程main：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest1</span> &#123;<br>    <span class="hljs-comment">//main是由一条默认的主线程负责执行的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//创建线程对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;主线程: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：启动线程一定使用start()方法，而不是run()方法； 不要把主线程任务放在子线程之前</strong><br>若使用run()方法：<br><img src="/img/a69.png"><br>使用strat()向CPU说明将该线程作为一个单独的线程来执行</p><p>若把主线程任务放在子线程之前：<br><img src="/img/a70.png"><br>则会导致总是先把主线程执行完才执行子线程，相当于执行一个单线程了，但是我们要实现多线程</p><h2 id="多线程的创建方式二：实现Runnable接口"><a href="#多线程的创建方式二：实现Runnable接口" class="headerlink" title="多线程的创建方式二：实现Runnable接口"></a>多线程的创建方式二：实现Runnable接口</h2><p>优点：任务类只是实现接口，可以继续继承其他类、实现其他接口、扩展性强<br>缺点：需要多创建一个Runnable对象</p><p>子线程类：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.class8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">//重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程MyThread: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程main:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest2</span> &#123;<br>    <span class="hljs-comment">//main是由一条默认的主线程负责执行的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//创建任务对象</span><br>        MyRunnable runnable = <span class="hljs-keyword">new</span> MyRunnable();<br>        <span class="hljs-comment">//把任务对象交给一个线程对象处理</span><br>        <span class="hljs-keyword">new</span> Thread(runnable).start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;主线程: &quot;</span> + i);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：创建一个任务对象后要交给Thread对象处理,,再调用start方法：<code>new Thread(runnable).start();</code></strong></p><p><em><strong>方式二匿名内部类写法</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest2_2</span> &#123;<br>    <span class="hljs-comment">//main是由一条默认的主线程负责执行的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//创建Runnable接口的匿名内部类形式</span><br>        Runnable runnable = <span class="hljs-keyword">new</span> Runnable() &#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;子线程1: &quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">new</span> Thread(runnable).start();<br><br><br>        <span class="hljs-comment">//简化1</span><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;子线程2: &quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;).start();<br>        <br>        <br>        <span class="hljs-comment">//简化2——lambda表达式</span><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;子线程3: &quot;</span> + i);<br>                &#125;<br><br>        &#125;).start();<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;主线程: &quot;</span> + i);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样无需单独创建一个类来实现Runnable接口</p><h2 id="多线程的创建方式三：实现Callable接口"><a href="#多线程的创建方式三：实现Callable接口" class="headerlink" title="多线程的创建方式三：实现Callable接口"></a>多线程的创建方式三：实现Callable接口</h2><p>以上两种方法在线程执行完毕后不能返回数据，因为它们重写的run方法均不能直接返回结果。  </p><p>优点：线程任务类只是实现接口，可以继续继承类和实现接口，扩展性增强。<strong>可以在线程执行完毕后去获取线程执行的结果。</strong><br>缺点：编码较为复杂</p><p>子线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class8;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">//重写call方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//描述线程的任务，返回线程执行返回后的结果</span><br>        <span class="hljs-comment">//需求：求1-n的和并返回</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;线程求出了1到&quot;</span>+n+<span class="hljs-string">&quot;的值：&quot;</span>+sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程类main：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class8;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest3</span> &#123;<br>    <span class="hljs-comment">//main是由一条默认的主线程负责执行的</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//创建Callable对象</span><br>        Callable&lt;String&gt; callable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">//Callable不是线程任务对象，不能直接封装成Thread对象</span><br><br>        <span class="hljs-comment">//把Callable的对象封装成一个FutureTask对象（任务对象）</span><br>        FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(callable);<br><br>        <span class="hljs-comment">//把任务对象交给一个Thread对象</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br>        <span class="hljs-comment">//获取线程执行完毕后的结果</span><br>        <span class="hljs-comment">//如果上面的线程未执行完毕，这里的代码会暂停，等待上面的线程执行完毕</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> futureTask.get();<br>        System.out.println(s);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：FutureTask对象:<br>1、实现Runnable接口的任务对象<br>2、可以在线程执行完毕后用未来任务对象调用get方法获取线程执行完毕后的结果</strong></p><h1 id="Thread提供的构造器和方法"><a href="#Thread提供的构造器和方法" class="headerlink" title="Thread提供的构造器和方法"></a>Thread提供的构造器和方法</h1><p>构造器：</p><ul><li><code>public Thread(String name)</code>可以为当前线程指定名称</li><li><code>public Thread(Runnable target)</code>封装Runnable对象称为线程对象</li><li><code>public Thread(Runnable target, String name)</code>封装Runnable对象称为线程对象，并指定线程名称</li></ul><p>方法：</p><ul><li><code>public void run()</code>线程的任务方法</li><li><code>public void start()</code>启动线程</li><li><code>public String getName()</code>获取当前线程的名称，线程名称默认是Thread-索引</li><li><code>public void setName()</code>为线程设置名称</li><li><code>public static Thread currentThread()</code>获取当前执行的线程对象</li><li><code>public static void sleep(long time)</code>让当前执行的线程休眠毫秒后，再继续执行</li><li><code>public final void join()</code>让调用当前这个方法的线程先执行完</li></ul><p>子线程类：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.itheima.class8;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-comment">//创建构造器</span><br>    public <span class="hljs-type">MyThread1</span>(<span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-comment">//重写run方法</span><br>    <span class="hljs-meta">@Override</span><br>    public void run() &#123;<br>        <span class="hljs-type">Thread</span> thread = <span class="hljs-type">Thread</span>.currentThread();<br>        <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-type">System</span>.out.println(thread.getName()+<span class="hljs-string">&quot;子线程MyThread: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类1：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class8;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest1</span> &#123;<br>    <span class="hljs-comment">//main是由一条默认的主线程负责执行的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//创建线程对象</span><br>        Thread t1 = <span class="hljs-keyword">new</span> MyThread1(<span class="hljs-string">&quot;1号线程&quot;</span>);<br>        <span class="hljs-comment">//t1.setName(&quot;1号线程&quot;);//设置线程名字</span><br>        <span class="hljs-comment">//启动线程</span><br>        t1.start();<br>        System.<span class="hljs-keyword">out</span>.println(t1.getName());<span class="hljs-comment">//获取线程名称</span><br><br>        Thread t2 = <span class="hljs-keyword">new</span> MyThread1(<span class="hljs-string">&quot;2号线程&quot;</span>);<br>        <span class="hljs-comment">//t2.setName(&quot;2号线程&quot;);</span><br>        t2.start();<br>        System.<span class="hljs-keyword">out</span>.println(t2.getName());<br><br>        <span class="hljs-comment">//哪个线程执行它，他就得到哪个线程对象</span><br>        Thread thread = Thread.currentThread();<br>        thread.setName(<span class="hljs-string">&quot;最牛的线程&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(thread.getName());<br><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;主线程: &quot;</span> + i);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a71.png"></p><p>测试类2：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.class8;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest4</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws ExecutionException, InterruptedException </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(i);<br>            <span class="hljs-comment">//休眠5s</span><br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-comment">//让当前执行的线程暂停5秒,让这个线程跑的慢些</span><br>                Thread.<span class="hljs-built_in">sleep</span>(<span class="hljs-number">5000</span>);<br>            &#125;<br>        &#125;<br><br>        MyThread1 thread1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyThread1</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        thread<span class="hljs-number">1.</span><span class="hljs-built_in">start</span>();<br>        thread<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<span class="hljs-comment">//让当前这个方法的线程先执行完</span><br><br>        MyThread1 thread2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyThread1</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>        thread<span class="hljs-number">2.</span><span class="hljs-built_in">start</span>();<br>        thread<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>        MyThread1 thread3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyThread1</span>(<span class="hljs-string">&quot;3&quot;</span>);<br>        thread<span class="hljs-number">3.</span><span class="hljs-built_in">start</span>();<br>        thread<span class="hljs-number">3.</span><span class="hljs-built_in">join</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到3时休眠5s<br><img src="/img/a72.png"><br><img src="/img/a73.png"></p><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>多个线程同时操作同一个共享资源的时候，可以会出现业务安全问题</p><p>案例：小明和小红都来取同账户（余额为100000.0）的100000.0元<br>Account.java账户类：定义取钱方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class9;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> money;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>(<span class="hljs-params">String cardId, <span class="hljs-built_in">double</span> money</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.cardId = cardId;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getMoney</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMoney</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> money</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCardId</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCardId</span>(<span class="hljs-params">String cardId</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">drawMoney</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> amount</span>)</span> &#123;<br>        <span class="hljs-comment">//先搞清楚谁来取钱,获取当前线程</span><br>        String name = Thread.currentThread().getName();<br><br>        <span class="hljs-comment">//判断余额是否足够</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.money &gt;= amount) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(name + <span class="hljs-string">&quot; 取钱 &quot;</span> + amount +  <span class="hljs-string">&quot;成功&quot;</span>);<br>            <span class="hljs-keyword">this</span>.money -= amount;<br>            System.<span class="hljs-keyword">out</span>.println( name + <span class="hljs-string">&quot;来取钱，剩余余额：&quot;</span> + <span class="hljs-keyword">this</span>.money);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(name + <span class="hljs-string">&quot; 来取钱，余额不足 &quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BankThread.java线程类：执行取钱方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.itheima.class9;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Account</span> acc;<br><br>    public <span class="hljs-type">BankThread</span>(<span class="hljs-type">Account</span> acc, <span class="hljs-type">String</span> name) &#123;<br>        <span class="hljs-keyword">super</span>(name);<br>        <span class="hljs-keyword">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    public void run() &#123;<br>        <span class="hljs-comment">//取钱</span><br>        acc.drawMoney(<span class="hljs-number">100000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：开启线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class9;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建账户对象</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">ming1819</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ming1819&quot;</span>, <span class="hljs-number">100000</span>);<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankThread</span>(ming1819,<span class="hljs-string">&quot;小明&quot;</span>).start();<span class="hljs-comment">//小明</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankThread</span>(ming1819, <span class="hljs-string">&quot;小红&quot;</span>).start();<span class="hljs-comment">//小红</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a74.png"><br>如上图所示：最终卡的余额剩下-100000.0，且银行亏损了100000.0元，发生了线程安全问题</p><h1 id="线程同步【重点】"><a href="#线程同步【重点】" class="headerlink" title="线程同步【重点】"></a>线程同步【重点】</h1><ul><li>解决线程安全的方案</li><li>线程同步让多个线程实现先后依次访问共享资源，这样就解决了安全问题</li></ul><p><strong>线程同步的常见方案</strong>：加锁:每次允许一个线程加锁，加锁后才能进入访问，访问完毕后自动解锁，其他线程才能再加锁进来。</p><h2 id="方式一：同步代码块"><a href="#方式一：同步代码块" class="headerlink" title="方式一：同步代码块"></a>方式一：同步代码块</h2><ul><li>作用：把访问共享资源的核心代码给上锁，以此保证线程安全<code>synchronized(同步锁)&#123;访问共享资源的核心代码&#125;</code></li><li>原理：每次允许一个线程加锁，加锁后才能进入访问，访问完毕后自动解锁，其他线程才能再加锁进来</li><li><strong>注意：对于当前同时执行的线程来说，同步锁必须是同一把（同一对象），否则会出Bug</strong></li></ul><p>修改以上代码：给取钱方法上锁<br>Account.java:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> drawMoney(<span class="hljs-type">double</span> amount) &#123;<br>    //先搞清楚谁来取钱,获取当前线程<br>    String <span class="hljs-type">name</span> = Thread.currentThread().getName();<br><br>    //判断余额是否足够<br>    //this指谁调用该方法，this就是谁，也就是说this就是之当前账户<br>    synchronized (this) &#123;<br>        <span class="hljs-keyword">if</span>(this.money &gt;= amount) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span> + &quot;取钱 &quot; + amount +  &quot;成功&quot;);<br>            this.money -= amount;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println( <span class="hljs-type">name</span> + &quot;来取钱，剩余余额：&quot; + this.money);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span> + &quot;来取钱，余额不足 &quot;);<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Account.<span class="hljs-keyword">class</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：以上代码中synchronized (this)中this指谁调用该方法，this就是谁，也就是说this就是当前账户。<em>这样为了避免多个账户取钱时各个账户不受其他账户的影响</em></strong><br>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class9;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建账户对象</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">ming1819</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ming1819&quot;</span>, <span class="hljs-number">100000</span>);<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankThread</span>(ming1819,<span class="hljs-string">&quot;小明&quot;</span>).start();<span class="hljs-comment">//小明</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankThread</span>(ming1819, <span class="hljs-string">&quot;小红&quot;</span>).start();<span class="hljs-comment">//小红</span><br><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">ming1811</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ming1811&quot;</span>, <span class="hljs-number">100000</span>);<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankThread</span>(ming1811,<span class="hljs-string">&quot;小黑&quot;</span>).start();<span class="hljs-comment">//小黑</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BankThread</span>(ming1811, <span class="hljs-string">&quot;小白&quot;</span>).start();<span class="hljs-comment">//小白</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a75.png"></p><p>以上账户中给实例方法上锁，采用<code>this</code>；而如果在账户类中有一个静态方法，若要给该静态方法上锁，采用的同步锁是字节码，如<code>Account.class</code></p><h2 id="方式二：同步方法"><a href="#方式二：同步方法" class="headerlink" title="方式二：同步方法"></a>方式二：同步方法</h2><ul><li>作用：把访问共享资源的核心方法上锁，以此保证线程安全<code>修饰符 synchronized 返回值类型 方法名称(形参列表)&#123;操作共享资源的代码&#125;</code></li><li>原理：每次允许一个线程加锁，加锁后才能进入访问，访问完毕后自动解锁，其他线程才能再加锁进来</li></ul><p>修改以上代码：让取钱方法变成同步方法，只需要在方法中加一个synchronized即可<br>Account.java:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//同步方法<br><span class="hljs-built_in">public</span> synchronized <span class="hljs-type">void</span> drawMoney(<span class="hljs-type">double</span> amount) &#123;<br>    //先搞清楚谁来取钱,获取当前线程<br>    String <span class="hljs-type">name</span> = Thread.currentThread().getName();<br><br>    //判断余额是否足够<br>    //this谁调用该方法，this就是谁，也就是说this就是之当前账户<br><br>        <span class="hljs-keyword">if</span>(this.money &gt;= amount) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span> + &quot;取钱 &quot; + amount +  &quot;成功&quot;);<br>            this.money -= amount;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println( <span class="hljs-type">name</span> + &quot;来取钱，剩余余额：&quot; + this.money);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span> + &quot;来取钱，余额不足 &quot;);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：把该方法设置成同步方法，就会上一个隐藏的同步锁，实例方法上锁采用<code>this</code>；静态方法采用的同步锁是<code>Account.class</code></strong></p><p>同步方法范围较大，同步代码块范围较小，所以同步代码块性能好些。</p><h2 id="方式三：Lock锁"><a href="#方式三：Lock锁" class="headerlink" title="方式三：Lock锁"></a>方式三：Lock锁</h2><ul><li>Lock锁是JDK5开始提供的以恶个新的锁定操作，通过它可以创建出锁对象进行加锁和解锁，更灵活、更方便、更强大</li><li>Lock是接口，不能直接实例化，可以采用它的实现类ReentrantLock锁对象</li><li>构造器<code>public ReentrantLock()</code>获得Lock锁的实现类对象</li><li>方法<code>void lock()</code>获得锁；<code>void unlock()</code>释放锁</li></ul><p>修改以上代码：创建锁对象<br>Account.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class11;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> money;<br><br>    <span class="hljs-comment">//创建锁对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCardId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCardId</span><span class="hljs-params">(String cardId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-comment">//同步方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-comment">//先搞清楚谁来取钱,获取当前线程</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加锁</span><br>            lk.lock();<br><br>            <span class="hljs-comment">//判断余额是否足够</span><br>            <span class="hljs-comment">//this谁调用该方法，this就是谁，也就是说this就是之当前账户</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.money &gt;= amount) &#123;<br>                System.out.println(name + <span class="hljs-string">&quot;取钱 &quot;</span> + amount +  <span class="hljs-string">&quot;成功&quot;</span>);<br>                <span class="hljs-built_in">this</span>.money -= amount;<br>                System.out.println( name + <span class="hljs-string">&quot;来取钱，剩余余额：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(name + <span class="hljs-string">&quot;来取钱，余额不足 &quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//解锁</span><br>            lk.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：解锁代码必须在finally代码块中，因为如果它不在finally代码块中，try代码块中有异常，则不会执行解锁操作，就会出现问题。</strong></p><h1 id="线程通信【了解】"><a href="#线程通信【了解】" class="headerlink" title="线程通信【了解】"></a>线程通信【了解】</h1><p>当多个线程共同操作共享的资源时，线程间通过某种方式互相告知自己的状态，相互协调，并避免无效的资源争夺</p><p>Object类的等待和唤醒方法：</p><ul><li><code>void wait()</code>让当前线程等待并释放所占锁，直到另一个线程调用notify()或notifyAll()方法</li><li><code>void notify()</code>唤醒正在等待的单个线程</li><li><code>void notifyAll()</code>唤醒正在等待的所有线程<br><strong>注意：上述方法应当使用当前同步锁对象进行调用</strong></li></ul><p>案例：需求：3个生产者，每个线程每次只能生产1个包子放在桌子上；2个消费者线程负责吃包子，每人每次只能从桌子上拿一个包子吃。</p><p>桌子Desk.java: 用于放包子取包子；同步锁必须唯一，这里的实例方法使用同步方法，锁是this，也就是唯一的Desk对象。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Desk</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; list = new ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">//生产者放包子</span><br>    <span class="hljs-keyword">public</span> synchronized void put() &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            String name = Thread.currentThread().getName();<br>            <span class="hljs-comment">//判断是否有包子</span><br>            <span class="hljs-keyword">if</span>(list.isEmpty())&#123;<br>                list.add(name + <span class="hljs-string">&quot;做的肉包子&quot;</span>);<br>                System.<span class="hljs-keyword">out</span>.println(name + <span class="hljs-string">&quot;做了一个肉包子&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br><br>                <span class="hljs-comment">//唤醒别人,等待自己</span><br>                <span class="hljs-keyword">this</span>.notifyAll();<br>                <span class="hljs-keyword">this</span>.wait();<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//有包子，不做了</span><br>                <span class="hljs-comment">//唤醒别人,等待自己</span><br>                <span class="hljs-keyword">this</span>.notifyAll();<span class="hljs-comment">//唤醒所有等待Desk对象的线程（可能是其他生产者或消费者）。</span><br>                <span class="hljs-keyword">this</span>.wait();<span class="hljs-comment">//当前线程进入等待状态，释放Desk对象的锁，等待其他线程唤醒。</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//取包子</span><br>    <span class="hljs-keyword">public</span> synchronized void <span class="hljs-keyword">get</span>() &#123;<br>        String name = Thread.currentThread().getName();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(! list.isEmpty())&#123;<br>                <span class="hljs-comment">//有包子</span><br>                System.<span class="hljs-keyword">out</span>.println(name + <span class="hljs-string">&quot;吃了包子&quot;</span> + list.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>));<br>                list.clear();<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-comment">//唤醒别人,等待自己</span><br>                <span class="hljs-keyword">this</span>.notifyAll();<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//没有包子</span><br>                <span class="hljs-keyword">this</span>.notifyAll();<br>                <span class="hljs-keyword">this</span>.wait();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">package com.itheima.class12;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest</span> &#123;<br>    public static <span class="hljs-keyword">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>        Desk desk = <span class="hljs-keyword">new</span> Desk();<br><br>        <span class="hljs-regexp">//</span>创建<span class="hljs-number">3</span>个生产线线程<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.put();<span class="hljs-regexp">//</span>不断放包子<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;厨师1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.put();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;厨师2&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.put();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;厨师3&quot;</span>).start();<br><br><br>        <span class="hljs-regexp">//</span>创建<span class="hljs-number">2</span>个消费者线程<br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.get();<span class="hljs-regexp">//</span>不断取包子<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;吃货1&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                desk.get();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;吃货2&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a76.png"></p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>线程池就是一个可以复用线程的技术，因为创建新线程的开销很大，并且请求过多时会产生大量的线程，这样会严重影响系统的性能。</p><p><strong>线程池的工作原理:</strong><br>线程池中固定有三个线程，任务队列中依次来了六个任务，三个线程会按顺序先处理前三个任务，其他任务在后面排队等待，等待前面处理完毕后再依次处理。这样不会使得线程太多而导致系统瘫痪。<br><img src="/img/a77.png"><br>任务接口：<code>Runnable</code>和<code>Callable</code></p><p><strong>如何得到线程池对象？</strong></p><ul><li>方式一：使用ExecutorService的实现类ThreadPoolExecutor创建线程池对象<ul><li>ThreadPoolExecutor构造器：</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">ThreadPoolExecutor(<span class="hljs-keyword">int</span> corePoolSize, <span class="hljs-keyword">int</span> maximumPoolSize, <span class="hljs-keyword">long</span> keepAliveTime, TimeUnit unit,<br>BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler <span class="hljs-keyword">handler</span>)<br></code></pre></td></tr></table></figure><ul><li>corePoolSize:指定线程池的核心线程数量</li><li>maximumPoolSize：指定线程池的最大线程数量</li><li>keepAliveTime：指定临时线程的存活时间</li><li>unit：指定临时线程的存活时间的单位（秒、分、时、天）</li><li>workQueue：指定线程池的任务队列</li><li>threadFactory：指定线程池的线程工厂</li><li>handler：指定线程池的任务拒绝策略（线程都在忙，任务队列也满了的时候，新任务来了该怎么处理）<ul><li>新任务拒绝策略：<code>ThreadPoolExecutor.AbortPolicy</code>丢弃任务并抛出RejectedExecutionException异常，<strong>默认策略</strong></li><li><code>ThreadPoolExecutor.CallerRunsPolicy</code>由主线程负责调用任务的run()方法从而绕过线程池直接执行</li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code>抛弃队列中等待最久的任务，然后把当前任务加入队列中</li><li><code>ThreadPoolExecutor.DiscardPolicy</code>丢弃人去，但是不抛弃异常，这是不推荐的做法</li></ul></li></ul></li><li>方式二：使用Executors（线程池的工具类）调用方法返回不同特点的线程对象</li></ul><p></br><strong>线程池的注意事项：</strong></p><ul><li>临时线程什么时候创建？<ul><li>新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会创建临时线程</li></ul></li><li>什么时候开始拒绝新任务？<ul><li>核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始拒绝该任务</li></ul></li></ul><h2 id="方式一：线程池处理Runnable任务"><a href="#方式一：线程池处理Runnable任务" class="headerlink" title="方式一：线程池处理Runnable任务"></a>方式一：线程池处理Runnable任务</h2><p>ExecutorService的常用方法</p><ul><li><code>void execute(Runnable command)</code>执行Runnable任务</li><li><code>void shutdown()</code>等全部任务执行完毕后，再关闭线程池</li><li><code>List&lt;Runnable&gt; shutdownNow()</code>立刻关闭线程池，停止正在执行的任务，并返回队列中未执行的任务</li></ul><p>MyRunnable.java:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-comment">//实现Runnable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//该任务是做什么的</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; is running.&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类ThreadTest1.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">4</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">//创建MyRunnable对象</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">//线程池自动创建一个新线程，自动处理这个任务，自动执行</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<span class="hljs-comment">//3个核心线程已满，再次创建新线程会复用前面的核心线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a78.png"><br><strong>注意：虽创建了四个线程，但是规定核心线程只有三个，所以会复用前面的核心线程。且一般线程池是不会结束的，因为它要等待着任务的到来让线程处理它。</strong></p></br><p><strong>临时线程的创建</strong>：让线程休眠<code>Integer.MAX_VALUE</code>时间，也就是让三个核心线程处于忙碌状态，四个任务队列也被占满的情况下才可以。</p><p>MyRunnable.java修改:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">Thread.<span class="hljs-built_in">sleep</span>(<span class="hljs-keyword">Integer</span>.MAX_VALUE);<br></code></pre></td></tr></table></figure><p>测试类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">4</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">//线程池自动创建一个新线程，自动处理这个任务，自动执行</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<span class="hljs-comment">//3个核心线程在忙</span><br>        <span class="hljs-comment">//四个任务队列占满</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        <span class="hljs-comment">//到了临时线程的创建时机</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a79.png"><br>如上图所示，备用的线程4和5都创建了</p></br><p><strong>新任务被拒绝</strong>：核心线程和临时线程都在忙，任务队列也满了，此时就需要拒绝新来的任务</p><p>测试类修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">//创建线程池对象</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">4</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">myRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">//线程池自动创建一个新线程，自动处理这个任务，自动执行</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<span class="hljs-comment">//3个核心线程在忙</span><br>        <span class="hljs-comment">//四个任务队列占满</span><br>        pool.execute(myRunnable);<span class="hljs-comment">//3个核心线程已满，再次创建新线程会复用前面的核心线程</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        <span class="hljs-comment">//到了临时线程的创建时机</span><br>        pool.execute(myRunnable);<br>        pool.execute(myRunnable);<br>        <span class="hljs-comment">//到了新任务拒绝时机</span><br>        pool.execute(myRunnable);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a80.png"><br>因为拒绝任务采用<code>ThreadPoolExecutor.AbortPolicy</code>策略，所以它丢弃了任务并抛出RejectedExecutionException异常。<br></br><br>若使用<code>ThreadPoolExecutor.CallerRunsPolicy</code>策略，则由主线程负责调用任务的run()方法从而绕过线程池直接执行<br><img src="/img/a81.png"><br></br></p><p>添加<code>pool.shutdown();</code>等待所有任务处理完毕再关闭线程池<br><img src="/img/a82.png"></p><h2 id="方式二：线程池处理Callable任务"><a href="#方式二：线程池处理Callable任务" class="headerlink" title="方式二：线程池处理Callable任务"></a>方式二：线程池处理Callable任务</h2><p>ExecutorService的常用方法</p><ul><li><code>Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>执行Callable任务，返回未来任务对象，用于获取线程返回的结果</li></ul><p>MyCallable.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">//重写call方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//描述线程的任务，返回线程执行返回后的结果</span><br>        <span class="hljs-comment">//需求：求1-n的和并返回</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getName() + <span class="hljs-string">&quot;线程求出了1到&quot;</span>+n+<span class="hljs-string">&quot;的值：&quot;</span>+sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest2</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws ExecutionException, InterruptedException &#123;<br>        <span class="hljs-comment">//创建线程池对象</span><br>        ExecutorService pool = <span class="hljs-keyword">new</span><span class="hljs-type"></span> ThreadPoolExecutor(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span><span class="hljs-type"></span> LinkedBlockingDeque&lt;&gt;(<span class="hljs-number">4</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span><span class="hljs-type"></span> ThreadPoolExecutor.CallerRunsPolicy());<br><br>        <span class="hljs-comment">//使用线程处理Callable任务</span><br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit1 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">100</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit2 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">200</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit3 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">300</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit4 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">400</span>));<br><br>        <span class="hljs-comment">//获取任务完毕后的结果</span><br>        System.out.println(submit1.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit2.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit3.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit4.<span class="hljs-keyword">get</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a83.png"></p><h2 id="Executors工具类实现线程池"><a href="#Executors工具类实现线程池" class="headerlink" title="Executors工具类实现线程池"></a>Executors工具类实现线程池</h2><p>Executors是一个线程池的工具类，提供了很多静态方法用于返回不同特点的线程池对象</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>创建固定数量的线程的线程池，如果某个线程因为执行因为执行异常而结束，那么线程池会补充一个新线程替代它。</li><li><code>public static ExecutorService newSingleThreadExecutor()</code>创建只有一个线程的线程池对象，如果该线程出现异常而结束，那么线程池会补充一个新线程。</li><li><code>public static ExecutorService newCachedThreadPool()</code>线程数量随着任务的增加而增加，如果线程任务执行完毕且空闲了60s则会被回收掉。</li><li><code>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</code>创建一个线程，可以实现在给定的延迟后运行任务，或者定期执行任务。</li></ul><p><strong>注意：这些方法的底层，都是通过线程池的实现类ThreadPoolExecutor创建的线程池对象</strong><br>测试类：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.itheima.class12;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadTest3</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws ExecutionException, InterruptedException &#123;<br><br>        <span class="hljs-comment">//通过Executors工具类实现线程池</span><br>        ExecutorService pool = Executors.newFixedThreadPool(<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//创建单个线程的线程池</span><br>        ExecutorService pool1 = Executors.newSingleThreadExecutor();<br><br>        <span class="hljs-comment">//使用线程处理Callable任务</span><br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit1 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">100</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit2 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">200</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit3 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">300</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit4 = pool.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">400</span>));<br><br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit5 = pool1.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">400</span>));<br>        Future&lt;<span class="hljs-keyword">String</span>&gt; submit6 = pool1.submit(<span class="hljs-keyword">new</span><span class="hljs-type"></span> MyCallable(<span class="hljs-number">500</span>));<br><br>        <span class="hljs-comment">//获取任务完毕后的结果</span><br>        System.out.println(submit1.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit2.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit3.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit4.<span class="hljs-keyword">get</span>());<br><br>        System.out.println(submit5.<span class="hljs-keyword">get</span>());<br>        System.out.println(submit6.<span class="hljs-keyword">get</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a84.png"></p><p><strong>核心线程数量到底配置多少？</strong></p><ul><li>计算密集型的任务，核心线程数量 &#x3D; CPU核数 + 1</li><li>IO密集型（读取文件数据、通信）的任务，核心线程数量 &#x3D; CPU核数 + 2</li></ul><p>查看CPU核数为下图中的红框：<br><img src="/img/a85.png"></p><p><em><strong>注意：大型并发系统环境中使用Executors如果不注意可能会出现系风险</strong></em><br><img src="/img/a86.png"></p><h1 id="并发、并行"><a href="#并发、并行" class="headerlink" title="并发、并行"></a>并发、并行</h1><ul><li>正在运行的程序（软件）就是一个独立的<strong>进程</strong>。</li><li><strong>线程属于进程</strong>，一个进程中可以同时运行很多线程。</li><li>线程中很多线程是<strong>并发</strong>和<strong>并行</strong>执行的。<ul><li>并发：进程中的线程是由CPU负责调度执行的，但CPU能同时处理线程的数量有限，为了保证全部线程都能往前执行CPU会轮询为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。<ul><li>单核CPU：即使在一个单核CPU上，也可以实现并发。操作系统会将CPU时间分成多个时间片，每个任务轮流占用这些时间片，从而实现多个任务的并发执行。</li></ul></li><li>并行：同一时刻，同一个多个线程在被CPU调度执行。<ul><li>例如CPU是4核的，那么同一个时刻就可能有4个进程被同时执行</li></ul></li></ul></li></ul><p>如下图所示：一刻处理12个线程（并行），每12个线程每12个线程地进行切换，这一刻执行这12个线程，下一刻切换执行另外12个线程（并发）。<img src="/img/a85.png"></p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>线程从生到死的过程中，经历的各种状态及状态转换。Java中的6种状态，定义在了Thread类的内部枚举类：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">public enum State &#123;<br><span class="hljs-built_in">    NEW,</span><br><span class="hljs-built_in">    RUNNABLE,</span><br><span class="hljs-built_in">    BLOCKED,</span><br><span class="hljs-built_in">    WAITING,</span><br><span class="hljs-built_in">    TIMED_WAITING,</span><br>    TERMINATED<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a88.png"></p><h1 id="扩展：悲观锁、乐观锁"><a href="#扩展：悲观锁、乐观锁" class="headerlink" title="扩展：悲观锁、乐观锁"></a>扩展：悲观锁、乐观锁</h1><ul><li>悲观锁：一上来就加锁，每次只能一个线程进入，访问完毕后再解锁，线程安全但性能较差</li><li>乐观锁：一开始不上锁，等要出现线程安全问题时才开始控制，线程安全性能较好</li></ul><p>需求：1个静态变量，100个线程，每个线程对其加100次</p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>MyRunnable.java:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.class13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot; count ======&gt;&quot;</span> + (++number));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnable).start();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下:<br><img src="/img/a89.png" alt="结果正确"><img src="/img/a90.png" alt="结果不正确"><br>以上两种情况是多次运行的不同结果，第二张图中最终结果没有到10000，说明<strong>多个线程同时访问和修改同一个共享变量number时，出现了线程安全问题</strong>，具体说明如下：<br><strong>测试类中的<code>++number</code>是非原子操作，也就是必须经过多个步骤才能全部完成，例如：</strong></p><p>线程 A：</p><ul><li>读取 number 的值为 10。</li><li>将 10 加 1，得到 11。</li><li>准备将 11 写回 number。</li></ul><p>线程 B：</p><ul><li>在线程 A 写回之前，线程 B 读取 number 的值为 10。</li><li>将 10 加 1，得到 11。</li><li>将 11 写回 number。</li></ul><p>线程 A：</p><ul><li>线程 A 写回 11。</li></ul><p>最终，number 的值为 11，而不是 12。这是因为线程 B 的操作覆盖了线程 A 的操作，导致 number 的值只增加了 1，而不是 2。导致最后的结果出现错误。</p><p><strong>补充：原子操作（Atomic Operation）是指一个不可分割的操作，它在执行过程中不会被其他操作中断。</strong></p><p>修改如下：上锁,这样保证一个线程一个线程的执行<br>MyRunnable.java:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">for (<span class="hljs-name">int</span> i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 100; i++) &#123;</span><br>    synchronized (<span class="hljs-name">this</span>) &#123;<br>        System.out.println(<span class="hljs-name">Thread</span>.currentThread().getName() + <span class="hljs-string">&quot; count ======&gt;&quot;</span> + (<span class="hljs-name">++number</span>))<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a91.png"></p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p><strong>当多个线程访问并修改同一个变量时，会先将原变量及其地址记录下来，修改完成后将记录下的原变量与当前的原变量进行比较，如果相同则说明没有被其他线程修改，则可以放心将结果写入其中，如下：</strong></p><p>线程 A：</p><ul><li>读取并记录 number 的值为 10 和它的地址。</li><li>将 10 加 1，得到 11。</li></ul><p>线程 B：</p><ul><li>在线程 A 写回之前，线程 B 读取 number 的值为 10。</li><li>将 10 加 1，得到 11。</li><li>将 11 写回 number。</li></ul><p>线程 A：</p><ul><li>将 10 与现在的原变量比较，发现变成了11，不相等</li><li>则废除这次修改，按照这样的规则重新读取并修改变量。</li></ul><p>这样就不会发生线程错误。</p><p>只需要修改MyRunnable.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class13;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">//整数修改的乐观锁：原子类实现的</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot; count ======&gt;&quot;</span> + number.incrementAndGet());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多线程案例"><a href="#多线程案例" class="headerlink" title="多线程案例"></a>多线程案例</h1><p>需求：有100份礼品，小红和小明两人同时发送，当剩下的礼品小于1份时不再送出。利用多线程模拟该过程并将线程的名称打印出来，并最后在控制台分别打印小红，小明各自送出多少份礼物。</p><p>礼物使用集合来装<br>MyThread.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class14_test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;String&gt; gifts;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-comment">//创建构造函数，将礼物集合传到线程中</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(List&lt;String&gt; gifts,String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.gifts = gifts;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName();<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (gifts) &#123;<span class="hljs-comment">//锁要唯一</span><br>                <span class="hljs-keyword">if</span>(gifts.size() &lt; <span class="hljs-number">10</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> gifts.remove(random.nextInt(gifts.size()));<br>                System.out.println(name + <span class="hljs-string">&quot;发出了&quot;</span> +rs);<br>                count++;<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//当前线程休眠100ms，可以让另一个线程运行运行，</span><br>                    <span class="hljs-comment">// 否则会出现一直是一个人发的情况</span><br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//每个线程对象都有各自的count</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意①：在测试类中创建的礼物集合，在线程类中使用构造函数可以在测试类中将创建好的礼物集合传入线程中；</strong><br><strong>注意②：同步锁的设置必须是唯一的，这里不能是this，因为this指的是MyThread对象，而测试类中有多个该对象</strong><br><strong>注意③：每个MyThread都有一个count，且有它对应的get、set方法</strong><br></br></p><p>测试类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.class14_test;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws InterruptedException </span>&#123;<br><br>        <span class="hljs-comment">//拿礼物</span><br>        List&lt;<span class="hljs-type">String</span>&gt; gifts = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-type">String</span>[] names = &#123;<span class="hljs-string">&quot;鲜花&quot;</span>,<span class="hljs-string">&quot;粽子&quot;</span>,<span class="hljs-string">&quot;皮带&quot;</span>,<span class="hljs-string">&quot;口红&quot;</span>,<span class="hljs-string">&quot;裙子&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            Random random = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>();<br>            <span class="hljs-type">int</span> randomInt = random.<span class="hljs-built_in">nextInt</span>(names.length);<br>            gifts.<span class="hljs-built_in">add</span>(names[randomInt]);<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(gifts);<br><br>        <span class="hljs-comment">//创建线程对象去集合中拿礼物，</span><br>        MyThread thread1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyThread</span>(gifts, <span class="hljs-string">&quot;小红&quot;</span>);<br>        thread<span class="hljs-number">1.</span><span class="hljs-built_in">start</span>();<br><br>        MyThread thread2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">MyThread</span>(gifts, <span class="hljs-string">&quot;小明&quot;</span>);<br>        thread<span class="hljs-number">2.</span><span class="hljs-built_in">start</span>();<br><br>        <span class="hljs-comment">//主线程要等待小明线程跑完再继续</span><br>        thread<span class="hljs-number">1.</span><span class="hljs-built_in">join</span>();<br>        <span class="hljs-comment">//主线程要等待小红线程跑完再继续</span><br>        thread<span class="hljs-number">2.</span><span class="hljs-built_in">join</span>();<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;小明总共发了&quot;</span>+thread<span class="hljs-number">1.</span><span class="hljs-built_in">getCount</span>()+<span class="hljs-string">&quot;个&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;小红总共发了&quot;</span>+thread<span class="hljs-number">2.</span><span class="hljs-built_in">getCount</span>()+<span class="hljs-string">&quot;个&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：使用join()方法是为了在最后执行sout统计数量的语句，否则会在最开始执行该语句。</strong><br><img src="/img/a92.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 特殊文本文件、日志技术</title>
    <link href="/2025/05/30/java31/"/>
    <url>/2025/05/30/java31/</url>
    
    <content type="html"><![CDATA[<h1 id="特殊文件：Properties文件"><a href="#特殊文件：Properties文件" class="headerlink" title="特殊文件：Properties文件"></a>特殊文件：Properties文件</h1><p><img src="/img/a52.png"><br>特点:</p><ul><li>都只能是键值对</li><li>键不能重复</li><li>文件后缀一般是.properties结尾</li></ul><p>Properties</p><ul><li>是一个Map集合（键值对集合），但我们一般不会当集合使用</li><li>核心作用：Properties使用来代表属性文件的，通过Properties可以读写属性文件里的内容</li></ul><p>构造器：</p><ul><li><code>public Properties()</code>构建Properties集合对象（空容器）</li></ul><h2 id="读取properties属性文件的内容"><a href="#读取properties属性文件的内容" class="headerlink" title="读取properties属性文件的内容"></a>读取properties属性文件的内容</h2><p>读数据方法：</p><ul><li><code>public void load(InputStream inStream)</code>通过字节输入流读取属性文件中的键值对数据</li><li><code>public void load(Reader reader)</code>通过字符输入流读取属性文件中的键值对数据</li><li><code>public String getProperty(String key)</code>根据键获取值</li><li><code>public  Set&lt;String&gt; stringPropertyNames()</code>获取全部键的集合</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> PropertiesTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span> &#123;<br>        //创建一个Properties对象<br>        Properties prop = <span class="hljs-built_in">new</span> Properties();<br><br>        //开始加载属性文件的键值对数据到Properties对象中<br>        prop.<span class="hljs-keyword">load</span>(<span class="hljs-built_in">new</span> FileReader(&quot;oop-app6\\src\\users.properties&quot;));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(prop);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===========================&quot;);<br><br>        //根据键取值<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(prop.getProperty(&quot;张三&quot;));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;============================&quot;);<br><br>        //遍历键取值<br>        <span class="hljs-keyword">Set</span>&lt;String&gt; <span class="hljs-keyword">set</span> = prop.stringPropertyNames();<br>        <span class="hljs-keyword">for</span> (String s : <span class="hljs-keyword">set</span>) &#123;<br>            String v = prop.getProperty(s);<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s + &quot;:&quot; + v);<br><br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;============================&quot;);<br><br><br>        //直接使用Map集合的lambda表达式来遍历<br>        prop.<span class="hljs-keyword">forEach</span>((k,v) -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(k + &quot;----&gt;&quot; + v));<br>        <br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a53.png"></p><h2 id="向properties属性文件写数据"><a href="#向properties属性文件写数据" class="headerlink" title="向properties属性文件写数据"></a>向properties属性文件写数据</h2><p>写数据方法：</p><ul><li><code>public Object setProperty(String key, String value)</code>保存键值对数据到Properties对象中去</li><li><code>public void store(OutputStream out, String comments)</code>把键值对数据，通过字节输出流写到属性文件中</li><li><code>public void store(Writer writer, String comments)</code>把键值对数据，通过字符输出流写道属性文件中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建一个Properties对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        <span class="hljs-comment">//存储一些键值对数据</span><br>        prop.setProperty(<span class="hljs-string">&quot;孙七&quot;</span>,<span class="hljs-string">&quot;111111&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;杜佳&quot;</span>,<span class="hljs-string">&quot;11131445111&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;李思&quot;</span>,<span class="hljs-string">&quot;11199011&quot;</span>);<br><br>        prop.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\user2.properties&quot;</span>),<span class="hljs-string">&quot;我存储了一些用户信息&quot;</span>);<br>        <br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a54.png"></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>读取属性文件，判断是否有键“李芳”，年龄改为18。该文件即使是txt文件，但是它内部的内容及格式与properties文件一致，所以可以直接使用properties的构造器与方法<br><img src="/img/a55.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//读取属性文件，判断是否有“李芳”，年龄改为18</span><br><br>        <span class="hljs-comment">//创建一个Properties对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>        prop.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;oop-app6\\src\\user.txt&quot;</span>));<br><br>        <span class="hljs-comment">//判断是否包含李芳这个键</span><br>        <span class="hljs-keyword">if</span>(prop.containsKey(<span class="hljs-string">&quot;李芳&quot;</span>))&#123;<br>            prop.setProperty(<span class="hljs-string">&quot;李芳&quot;</span>,<span class="hljs-string">&quot;18&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//将键值对数据重新写入属性文件中</span><br>        prop.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;oop-app6\\src\\user.txt&quot;</span>), <span class="hljs-string">&quot;success&quot;</span>);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：最后必须要利用store方法写入文件中</strong></p><p><img src="/img/a56.png"></p><h1 id="特殊文件：XML文件"><a href="#特殊文件：XML文件" class="headerlink" title="特殊文件：XML文件"></a>特殊文件：XML文件</h1><ul><li>XML,可扩展标记语言，本质是一种数据的格式，可以用来存储复杂的数据结构，和数据无关</li><li>应用场景：经常用来作为系统的配置文件，或者作为一种特殊的数据结构，在网络中进行传输</li></ul><p><img src="/img/a57.png"></p><p>特点：</p><ul><li>XML中的“&lt;标签名&gt;”称为一个标签或一个元素，一般都是成对出现的</li><li>XML中的标签名可以自己定义（可扩展），但必须要正确的嵌套</li><li>XML中只能有一个根标签</li><li>XML中的标签可以有属性</li><li>如果一个文件中放置的是XML格式的数据，这个文件都是XML文件，后缀一般都要写成.xml</li></ul><p>语法规则：</p><ul><li>第一行必须是文档声明</li><li>书写“&lt;”、“&amp;”等，可以会出现异常报错，用以下字符来替代<table><thead><tr><th>字符</th><th>XML字符</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr><tr><td>&amp;</td><td>&amp;</td></tr><tr><td>&apos;</td><td>‘</td></tr><tr><td>&quot;</td><td>“</td></tr></tbody></table></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- 注释：以上抬头声明必须放在第一行--&gt;</span><br><br><span class="hljs-comment">&lt;!--跟标签只能有一个--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">desc</span>=<span class="hljs-string">&quot;第一个用户&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span> x <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> x <span class="hljs-symbol">&amp;gt;</span> 8 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data1</span>&gt;</span><br>            &lt;![CDATA[<br>            3 &gt; 2 &amp;&amp; 3 &lt; 9<br>            ]]&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">data1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">people</span>&gt;</span>很多人<span class="hljs-tag">&lt;/<span class="hljs-name">people</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>quajans9s90<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>x <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在浏览器中展示：<br><img src="/img/a58.png"></p><h2 id="利用Dom4j解析XML文件"><a href="#利用Dom4j解析XML文件" class="headerlink" title="利用Dom4j解析XML文件"></a>利用Dom4j解析XML文件</h2><p>构造器：<br>SAXReader：Dom4j提供的解析器，可以认为是代表整个Dom4j框架</p><ul><li><code>public SAXReader()</code>构建Dom4j的解析器对象</li><li><code>public Document read(String url)</code>把XML文件都城Document对象</li><li><code>public Document read(InputStream is)</code>通过字节输入流读取XML文件</li></ul><p>Document：</p><ul><li><code>Element getRootElement()</code>获取根元素对象</li></ul><p>Element提供的方法：</p><ul><li><code>public String getName</code>得到元素名字</li><li><code>public List&lt;Element&gt; elements()</code>得到当前元素下所有元素</li><li><code>public List&lt;Element&gt; elements(String name)</code>得到当前元素下指定名字的子元素返回集合</li><li><code>public Element element(String name)</code>得到当前元素下指定名字的子元素，如果有很多名字相同的返回第一个</li><li><code>public String attributeValue(String name)</code>通过属性名直接得到属性值</li><li><code>public String elementText(子元素名)</code>得到指定名称的子元素的文本</li><li><code>public String getText()</code>得到文本</li></ul><p>helloworld.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- 注释：以上抬头声明必须放在第一行--&gt;</span><br><br><span class="hljs-comment">&lt;!--跟标签只能有一个--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">desc</span>=<span class="hljs-string">&quot;第一个用户&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span> x <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> x <span class="hljs-symbol">&amp;gt;</span> 8 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data1</span>&gt;</span><br>            &lt;![CDATA[<br>            3 &gt; 2 &amp;&amp; 3 &lt; 9<br>            ]]&gt;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">data1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">people</span>&gt;</span>很多人<span class="hljs-tag">&lt;/<span class="hljs-name">people</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">address</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>quajans9s90<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span>x <span class="hljs-symbol">&amp;lt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Dom4JTest1.java:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> org.dom4j.Attribute;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Dom4JTest1 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> DocumentException &#123;<br>        <span class="hljs-comment">//创建一个Dom4j</span><br>        SAXReader saxReader = <span class="hljs-keyword">new</span> SAXReader();<br><br>        <span class="hljs-comment">//使用SAXReader对象把需要解析的文件都城一个Document对象</span><br>        Document <span class="hljs-keyword">read</span> = saxReader.<span class="hljs-keyword">read</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\helloworld.xml&quot;</span>));<br><br>        <span class="hljs-comment">//从文档对象中解析XML文件的全部数据</span><br>        <span class="hljs-comment">//拿到根元素</span><br>        Element root = <span class="hljs-keyword">read</span>.getRootElement();<br>        System.out.<span class="hljs-keyword">println</span>(root.getName());<span class="hljs-comment">//拿到根元素名字</span><br><br>        <span class="hljs-comment">//获得一级子元素</span><br>        List&lt;Element&gt; list = root.elements(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element e : list) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(e.getName());<span class="hljs-comment">//拿到一级子元素</span><br>        &#125;<br><br>        <span class="hljs-comment">//获取当前元素下的某个子元素</span><br>        Element p = root.element(<span class="hljs-string">&quot;people&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(p.<span class="hljs-keyword">getText</span>());<br><br>        <span class="hljs-comment">//获取当前元素下的某个子元素,若盖子元素有多个，则默认获取第一个</span><br>        Element user = root.element(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//获取当前子元素下的子元素文本</span><br>        System.out.<span class="hljs-keyword">println</span>(user.elementText(<span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.<span class="hljs-keyword">println</span>(user.elementText(<span class="hljs-string">&quot;address&quot;</span>));<br>        System.out.<span class="hljs-keyword">println</span>(user.elementText(<span class="hljs-string">&quot;age&quot;</span>));<br>        <span class="hljs-comment">//子元素文本另一种方法</span><br>        Element data = user.element(<span class="hljs-string">&quot;data&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(data.<span class="hljs-keyword">getText</span>());<br>        System.out.<span class="hljs-keyword">println</span>(data.getTextTrim());<span class="hljs-comment">//去除前后空格</span><br><br><br>        <span class="hljs-comment">//获取元素的属性信息</span><br>        System.out.<span class="hljs-keyword">println</span>(user.attributeValue(<span class="hljs-string">&quot;id&quot;</span>));<br>        System.out.<span class="hljs-keyword">println</span>(user.attributeValue(<span class="hljs-string">&quot;desc&quot;</span>));<br><br>        <span class="hljs-comment">//根据元素属性信息获得其具体的键和值</span><br>        Attribute i = user.attribute(<span class="hljs-string">&quot;id&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(i.getName());<br>        System.out.<span class="hljs-keyword">println</span>(i.getValue());<br>        <span class="hljs-comment">//直接遍历属性信息得到键和值</span><br>        List&lt;Attribute&gt; attributes = user.attributes();<br>        <span class="hljs-keyword">for</span> (Attribute a : attributes) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(a.getName() + <span class="hljs-string">&quot;=&quot;</span> + a.getValue());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a59.png"></p><h2 id="将数据写入XML文件"><a href="#将数据写入XML文件" class="headerlink" title="将数据写入XML文件"></a>将数据写入XML文件</h2><p>直接把程序中的数据拼接成XML格式，再通过IO流写入文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">package</span> com.itheima.class6;<br><br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dom4JTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-type">String</span>[] args) <span class="hljs-keyword">throws</span> <span class="hljs-type">DocumentException</span> &#123;<br>        <span class="hljs-comment">//使用一个StringBuilder对象来拼接XML格式的数据</span><br>        <span class="hljs-type">StringBuilder</span> sb <span class="hljs-operator">=</span> new <span class="hljs-type">StringBuilder</span>();<br>        sb.append(<span class="hljs-string">&quot;&lt;?xml version=<span class="hljs-subst">\&quot;</span>1.0<span class="hljs-subst">\&quot;</span> encoding=<span class="hljs-subst">\&quot;</span>UTF-8<span class="hljs-subst">\&quot;</span>?&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;&lt;root&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&lt;name&gt;&quot;</span>).append(<span class="hljs-string">&quot;张三&quot;</span>).append(<span class="hljs-string">&quot;&lt;/name&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&lt;age&gt;&quot;</span>).append(<span class="hljs-number">18</span>).append(<span class="hljs-string">&quot;&lt;/age&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;<span class="hljs-subst">\t</span>&lt;sex&gt;&quot;</span>).append(<span class="hljs-string">&quot;女&quot;</span>).append(<span class="hljs-string">&quot;&lt;/sex&gt;<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;&lt;/root&gt;&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">BufferedWriter</span> bw <span class="hljs-operator">=</span> new <span class="hljs-type">BufferedWriter</span>(new <span class="hljs-type">FileWriter</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>helloworld.xml&quot;</span>));<br>                )&#123;<br>            bw.write(sb.toString());<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) &#123;<br>            <span class="hljs-keyword">throw</span> new <span class="hljs-type">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a60.png"></p><h2 id="XML文件约束"><a href="#XML文件约束" class="headerlink" title="XML文件约束"></a>XML文件约束</h2><p>利用dtd文件对XML文件进行约束：<br><img src="/img/a61.png"></p><h1 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h1><p>日志技术：</p><ul><li>可以将系统执行的信息，方便地记录到指定的位置（控制台、文件中、数据库中）</li><li>可以随时以开关的形式控制日志的启停，无需侵入到源代码中去进行修改</li></ul><p>日志框架：</p><ul><li>JUL(java.util.logging)</li><li>Log4j</li><li>Logback</li></ul><p>日志接口：</p><ul><li>Commons Logging(JCL)</li><li>Simple Logging Facade for Java(SLF4J)</li></ul><h2 id="Logback日志框架"><a href="#Logback日志框架" class="headerlink" title="Logback日志框架"></a>Logback日志框架</h2><p><strong>Logback是基于SLF4J的日志规范实现的框架</strong></p><p>Logback日志框架有以下几个模块：</p><ul><li>logback-core 模块为其他两个模块奠定了基础。</li><li>logback-classic 原生实现了SLF4J-API。</li><li>logback-access 模块与 Tomcat 和 Jetty 等 Servlet 容器集成，提供 HTTP 访问日志功能。可以轻松在 logback-core 之上构建自己的模块。</li></ul><p><strong>所以要想使用Logback日志框架，至少需要在项目中整合三个模块：SLF4J-API（日志接口）、logback-core、logback-classic</strong></p><p><strong>实现步骤：</strong></p><ul><li><p>将Logback框架导入项目中：<br><img src="/img/a62.png"></p></li><li><p>将Logback框架的核心配置文件logback.xml直接拷贝到src目录下</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">  <span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>System.out<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span></span><br><span class="hljs-comment"><span class="language-xml">                %msg：日志消息，%n是换行符--&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="language-xml"> [%-5level]  %c [%thread] : %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- File是输出的方向通向文件的 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;</span><span class="language-xml"> [%thread] %-5level %logger</span><span class="hljs-template-variable">&#123;36&#125;</span><span class="language-xml"> - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--日志输出路径--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>F:/log/java-data.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!--指定日志文件拆分和压缩规则--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span></span></span><br><span class="hljs-tag"><span class="language-xml">                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>F:/log/java-data-%i-%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="language-xml">-.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-comment">&lt;!--文件拆分大小--&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>1MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">        1、控制日志的输出情况：如，开启日志，取消日志</span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>创建Logback框架提供的Logger对象，然后用Logger对象调用其提供的方法就可以记录系统的日志信息<br><code>public static final Logger LOGGER = LoggerFactory.getLogger(&quot;类名&quot;);</code></p></li></ul><p>测试类：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.class7;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogTest1</span> </span>&#123;<br>    <span class="hljs-comment">//创建一个Logger日志对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(<span class="hljs-string">&quot;LogTest1.class&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;chu方法开始执行&quot;</span>);<br>            chu(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);<br>            LOGGER.info(<span class="hljs-string">&quot;chu方法执行成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            LOGGER.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;chu方法执行失败&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">chu</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;参数a:&quot;</span> + a);<br>        LOGGER.debug(<span class="hljs-string">&quot;参数b:&quot;</span> + b);<br>        <span class="hljs-keyword">int</span> c = a / b;<br>        LOGGER.info(<span class="hljs-string">&quot;结果是：&quot;</span> + c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a63.png"><img src="/img/a64.png"><br>对于日志文件的内容：<br><img src="/img/a65.png"></p><h2 id="Logback框架的核心配置文件logback-xml说明"><a href="#Logback框架的核心配置文件logback-xml说明" class="headerlink" title="Logback框架的核心配置文件logback.xml说明"></a>Logback框架的核心配置文件logback.xml说明</h2><h3 id="rollingPolicy部分"><a href="#rollingPolicy部分" class="headerlink" title="rollingPolicy部分"></a>rollingPolicy部分</h3><p>指定日志文件拆分和压缩规则,避免日志文件所占内存太大</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>F:/log/java-data-%i-%d</span><span class="hljs-template-variable">&#123;yyyy-MM-dd&#125;</span><span class="language-xml">-.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--文件拆分大小--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>1MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>表示当文件大小等于1MB时，就将该文件进行压缩，如下所示：<br><img src="/img/a66.png"><br>解压其中一个压缩包，发现它的大小确实为1MB<br><img src="/img/a67.png"></p><h3 id="root部分"><a href="#root部分" class="headerlink" title="root部分"></a>root部分</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        1、控制日志的输出情况：如，开启日志ALL，取消日志OFF</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;ALL&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在控制台输出日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在文件中输出日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上所示，在哪里输出日志、是否输出日志在这里都可以进行设置。</p><h2 id="【重点】Logback设置日志级别"><a href="#【重点】Logback设置日志级别" class="headerlink" title="【重点】Logback设置日志级别"></a>【重点】Logback设置日志级别</h2><p>日志级别：指日志信息的类型，常见的日志级别如下（优先级依次升高）</p><table><thead><tr><th>日志级别</th><th>说明</th></tr></thead><tbody><tr><td>trace</td><td>追踪，指明程序运行轨迹</td></tr><tr><td>debug</td><td>调试，实际应用中一般将其作为最低级别，而trace则很少使用</td></tr><tr><td>info</td><td>输出重要的重要信息，数据连接、网络连接、IO操作等，使用较多</td></tr><tr><td>warn</td><td>警告信息，可能会发生问题，使用较多</td></tr><tr><td>error</td><td>错误信息，使用较多</td></tr></tbody></table><p>学习日志级别是为了方便查询不同级别的日志信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        1、控制日志的输出情况：如，开启日志ALL，取消日志OFF</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在控制台输出日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在文件中输出日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要想只记录info级别及其以上的日志级别，需要将level修改为info；如上所示，这时再次运行测试类,只展示info和error类型的日志。<br><img src="/img/a68.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java File与IO流</title>
    <link href="/2025/05/26/java30/"/>
    <url>/2025/05/26/java30/</url>
    
    <content type="html"><![CDATA[<p>变量、数组、对象、集合都是存储数据的容器，但是当在断电或者程序终止时会丢失。要想将数据长久保存起来，会使用文件，文件是在计算机硬盘中，这样数据不会在之前那种情况下而丢失。</p><p><strong>File类只能对文件本身操作，不能读写文件中的数据，而IO流可以读写文件或网络中的数据</strong></p><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p><strong>File是java.io包下的类，File类的对象，用于代表当前操作系统的文件（文件、文件夹）</strong></p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p><code>public File(String pathname)</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileTest &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//创建File对象</span><br>        <span class="hljs-comment">//File file1 = new File(&quot;C:\\Users\\hhd0717\\Documents\\学生信息管理代码.txt&quot;);</span><br>        <span class="hljs-keyword">File</span> file1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C:/Users/hhd0717/Documents/学生信息管理代码.txt&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(file1.getName());<br>        System.out.<span class="hljs-keyword">println</span>(file1.length());<br><br>        <span class="hljs-keyword">File</span> file2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C\u202AC:\\Users\\hhd0717\\Documents\\WXWork&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(file2.getName());<br><br>        <span class="hljs-comment">//File对象可以指代一个不存在的文件路径</span><br>        <span class="hljs-keyword">File</span> file3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;C:/Users/hhd0717/Documents/a.txt&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(file3.getName());<span class="hljs-comment">//a.txt</span><br>        System.out.<span class="hljs-keyword">println</span>(file3.length());<span class="hljs-comment">//0</span><br>        System.out.<span class="hljs-keyword">println</span>(file3.exists());<span class="hljs-comment">//false</span><br><br>        <span class="hljs-comment">//模块中的文件，使用相对路径，默认直接从工程寻找路径</span><br>        <span class="hljs-keyword">File</span> file4 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\aaa.txt&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(file4.length());<br>        System.out.<span class="hljs-keyword">println</span>(file4.exists());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a88.png"><br><img src="/image/a89.png"></p><p>相对路径（不带盘符）寻找文件：<br><img src="/image/a90.png"></p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><ul><li><code>public boolean exists()</code>判断文件路径是否存在</li><li><code>public boolean isFile()</code>判断是否为文件</li><li><code>public boolean isDirectory()</code>判断是否为文件夹</li><li><code>public long length()</code>获取文件的字节长度</li><li><code>public String getName()</code>获取文件名字</li><li><code>public long lastModified()</code> 获取文件的最后修改时间(时间毫秒值)</li><li><strong><code>public String getPath()</code>获取创建文件对象时使用的路径,new File的路径</strong></li><li><code>public String getAbsolutePath()</code>获取绝对路径</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> FiLETest1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        File f1 = <span class="hljs-built_in">new</span> File(&quot;oop-app6\\src\\aaa.txt&quot;);<br><br>        //文件路径是否存在<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.<span class="hljs-keyword">exists</span>());<br><br>        //是否为文件<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.isFile());<br><br>        //是否为文件夹<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.isDirectory());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.getName());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.length());<br><br>        //获取文件的最后修改时间<br>        long <span class="hljs-type">time</span> = f1.lastModified();<br>        SimpleDateFormat sdf = <span class="hljs-built_in">new</span> SimpleDateFormat(&quot;yyyy-MM-yy HH:mm:ss&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sdf.format(<span class="hljs-type">time</span>));<br><br>        //获取创建文件对象时使用的路径,<span class="hljs-built_in">new</span> File的路径<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.getPath());<br><br>        //获取绝对路径<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(f1.getAbsolutePath());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a91.png"></p><h3 id="创建删除文件"><a href="#创建删除文件" class="headerlink" title="创建删除文件"></a>创建删除文件</h3><ul><li><code>public boolean createNewFile()</code>创建文件，内容为空</li><li><code>public boolean mkdir()</code>创建一级文件夹</li><li><code>public boolean mkdirs()</code>创建多级文件夹</li><li><code>public boolean delete()</code>删除文件或空文件夹，不可以删除非空文件夹</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileTest2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-keyword">File</span> f1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\bbb.txt&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(f1.createNewFile());<span class="hljs-comment">//true</span><br><br>        <span class="hljs-comment">//创建一级文件夹</span><br>        <span class="hljs-keyword">File</span> f2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\a\\b\\c&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(f2.mkdir());<span class="hljs-comment">//false</span><br><br>        <span class="hljs-keyword">File</span> f3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\a&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(f3.mkdir());<span class="hljs-comment">//false</span><br><br>        <span class="hljs-comment">//创建多级文件夹</span><br>        <span class="hljs-keyword">File</span> f4 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa\\b\\c&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(f4.mkdirs());<span class="hljs-comment">//true</span><br><br>        <span class="hljs-comment">//删除文件或空文件夹</span><br>        <span class="hljs-comment">//System.out.println(f1.delete());</span><br>        <span class="hljs-keyword">File</span> f5 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\com\\itheima\\class1&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(f5.<span class="hljs-keyword">delete</span>());<br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a92.png"><br><img src="/image/a93.png"></p><h3 id="遍历文件夹一级文件"><a href="#遍历文件夹一级文件" class="headerlink" title="遍历文件夹一级文件"></a>遍历文件夹一级文件</h3><ul><li><code>public String[] List()</code>获取当前目录下所有的“一级文件名称”到一个字符串数组中返回</li><li><strong><code>public File[] listFiles()</code>获取当前目录下所有的“一级文件对象”到一个文件对象数组中返回</strong></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileTest3 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br><br>        <span class="hljs-comment">//获取一级文件名称</span><br>        <span class="hljs-keyword">File</span> f1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src&quot;</span>);<br>        String[] l1 = f1.list();<br>        System.out.<span class="hljs-keyword">println</span>(Arrays.toString(l1));<br><br>        <span class="hljs-comment">//获取一级文件对象</span><br>        <span class="hljs-keyword">File</span>[] files = f1.listFiles();<br>        System.out.<span class="hljs-keyword">println</span>(Arrays.toString(files));<br><br>        <span class="hljs-comment">//文件或者路径不存在</span><br>        <span class="hljs-keyword">File</span> f2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\bbb.txt&quot;</span>);<br>        <span class="hljs-keyword">File</span>[] files1 = f2.listFiles();<br>        System.out.<span class="hljs-keyword">println</span>(Arrays.toString(files1));<br><br>        <span class="hljs-comment">//空文件夹</span><br>        <span class="hljs-keyword">File</span> f3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\a&quot;</span>);<br>        <span class="hljs-keyword">File</span>[] files3 = f3.listFiles();<br>        System.out.<span class="hljs-keyword">println</span>(Arrays.toString(files3));<br><br>        <span class="hljs-comment">//存在隐藏文件夹，也会被遍历出来</span><br>        <span class="hljs-keyword">File</span> f4 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;E:\\Git&quot;</span>);<br>        <span class="hljs-keyword">File</span>[] files4 = f4.listFiles();<br>        System.out.<span class="hljs-keyword">println</span>(Arrays.toString(files4));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a94.png"><br><strong>文件夹为空或者路径不存在则返回null，空文件夹则返回空数组，隐藏文件夹也可被遍历出来</strong></p><h3 id="遍历文件夹所有文件"><a href="#遍历文件夹所有文件" class="headerlink" title="遍历文件夹所有文件"></a>遍历文件夹所有文件</h3><h4 id="前置知识：方法递归"><a href="#前置知识：方法递归" class="headerlink" title="前置知识：方法递归"></a>前置知识：方法递归</h4><p>方法调用自身的形式称为方法递归。递归的形式：直接递归（方法自己调用自己）与间接递归（方法调用其他方法，其他方法调用自己）</p><p>以下方法会出现栈内存溢出错误(StackOverflowError)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FileTest4</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//先在栈中加载test1方法，有调用test1方法</span><br>        test1();<br><br>    &#125;<br><br>    <span class="hljs-comment">//直接方法递归</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----tses---&quot;</span>);<br>        test1();<br>    &#125;<br><br>    <span class="hljs-comment">//间接方法递归</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----test2---&quot;</span>);<br>        test3();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----test3---&quot;</span>);<br>        test2();<span class="hljs-comment">//间接递归</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a96.png"><br>原理：当程序运行时，会在栈中调用test1方法，test1方法由调用自己，无限调用后就会导致栈内存溢出<br><img src="/image/a95.png"><br><strong>所以递归要控制好终止，否则会出现递归死循环，导致栈内存溢出</strong></p><h4 id="案例——计算n的阶乘"><a href="#案例——计算n的阶乘" class="headerlink" title="案例——计算n的阶乘"></a>案例——计算n的阶乘</h4><p>计算n的阶乘，5的阶乘&#x3D;1<em>2</em>3<em>4</em>5<br>所以f(n)&#x3D;1<em>2</em>3<em>4</em>…(n-1)*n——&gt;*<em>f(n)&#x3D;f(n-1)<em>n</em></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FileTest4</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> result = f(<span class="hljs-number">9</span>);<br>        System.<span class="hljs-keyword">out</span>.println(result);<br><br>    &#125;<br><br>    <span class="hljs-comment">//求n阶乘</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">f</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//终结点</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> f(n<span class="hljs-number">-1</span>) * n;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a97.png" alt="递归算法原理"></p><p>递归算法三要素：</p><ul><li>递归公式：f(n)&#x3D;f(n-1)*n</li><li>递归的终结点：f(1)</li><li>递归的方向必须走向终结点</li></ul><h4 id="经典面试题——猴子吃桃"><a href="#经典面试题——猴子吃桃" class="headerlink" title="经典面试题——猴子吃桃"></a>经典面试题——猴子吃桃</h4><p>第一天猴子摘了若干个桃子，吃了一半不过瘾，又吃了一个，第二天又吃了前一天剩余桃子的一半，又觉得不过瘾，又多吃了一个，此后每天都吃前一天剩余桃子的一半加一个桃子，第十天发现只有1个桃子了，请问猴子第一天摘了多少个桃子？</p><p>分析：</p><ul><li>f(10)&#x3D;1;</li><li>第一天有f(1)个桃子</li><li>第2天有f(2)&#x3D;f(1)-f(1)&#x2F;2-1桃子</li><li>第n天有f(n)&#x3D;f(n-1)-f(n-1)&#x2F;2-1</li><li>令n&#x3D;n+1，f(n+1)&#x3D;f(n)-f(n)&#x2F;2-1;</li><li><strong>f(n)&#x3D;2*f(n+1)+2</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FileTest5</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//猴子吃桃</span><br>        <span class="hljs-comment">//f(10)=1</span><br>        <span class="hljs-comment">//f(x)-f(x)/2-1=f(x+1)</span><br>        <span class="hljs-comment">//f(x)=2f(x+1)+2</span><br>        <span class="hljs-built_in">int</span> result2 = f2(<span class="hljs-number">1</span>);<br>        System.<span class="hljs-keyword">out</span>.println(result2);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">f2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> m</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(m == <span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f2(m+<span class="hljs-number">1</span>) + <span class="hljs-number">2</span>;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a98.png"></p><h4 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h4><p>需求：</p><ul><li>在某盘搜索某文件</li><li>遍历文件夹的文件对象，判断其是文件还是文件夹</li><li>判断是文件夹则继续遍历该文件夹，直到找到为止</li></ul><p>从E盘找QQ.exe并启动:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileTest6 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> IOException &#123;<br>        searchFiles(<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;E:/&quot;</span>),<span class="hljs-string">&quot;QQ.exe&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 去目录下搜索某个文件</span><br><span class="hljs-comment">     * @param dir 目录</span><br><span class="hljs-comment">     * @param fileName 文件名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> searchFiles(<span class="hljs-keyword">File</span> dir, String fileName) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//判断是否合法</span><br>        <span class="hljs-keyword">if</span> (dir == <span class="hljs-keyword">null</span> || !dir.exists() || !dir.isDirectory()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//合法</span><br>        <span class="hljs-keyword">File</span>[] files = dir.listFiles();<br><br>        <span class="hljs-comment">//判断当前目录下是否存在一级文件对象，以及是否可以拿到以及文件对象</span><br>        <span class="hljs-keyword">if</span>(files != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//遍历全部一级文件对象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span> : files) &#123;<br>                <span class="hljs-comment">//判断文件是否是文件，还是文件夹</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">file</span>.isFile()) &#123;<br>                    <span class="hljs-comment">//是文件，判断是否是我们要找的文件</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">file</span>.getName().equals(fileName)) &#123;<br>                        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;File found: &quot;</span> + <span class="hljs-keyword">file</span>.getAbsolutePath());<br>                        <span class="hljs-keyword">Runtime</span> rt = <span class="hljs-keyword">Runtime</span>.getRuntime();<br>                        rt.exec(<span class="hljs-keyword">file</span>.getAbsolutePath());<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//是文件夹，继续重复搜索过程</span><br>                    searchFiles(<span class="hljs-keyword">file</span>, fileName);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a99.png"></p><h4 id="删除非空文件夹"><a href="#删除非空文件夹" class="headerlink" title="删除非空文件夹"></a>删除非空文件夹</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class2;<br><br><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">File</span>;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> FileTest7 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args)&#123;<br>        deleteDir(<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(<span class="hljs-string">&quot;F:\\IntelliJ IDEA 2024.3.5\\project\\Javasepromax\\oop-app6\\src\\aa&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除非空文件夹</span><br><span class="hljs-comment">     * @param dir 目录</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> deleteDir(<span class="hljs-keyword">File</span> dir)&#123;<br><br>        <span class="hljs-comment">//传过来的路径为空或路径不存在</span><br>       <span class="hljs-keyword">if</span> (dir == <span class="hljs-keyword">null</span> || !dir.exists()) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       <span class="hljs-comment">//是文件</span><br>       <span class="hljs-keyword">if</span> (dir.isFile()) &#123;<br>           dir.<span class="hljs-keyword">delete</span>();<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       <span class="hljs-comment">//存在且是文件夹</span><br>       <span class="hljs-keyword">if</span> (dir.exists() &amp;&amp; dir.isDirectory()) &#123;<br>           <span class="hljs-keyword">File</span>[] files = dir.listFiles();<br><br><br>           <span class="hljs-keyword">if</span> (files == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//无权限删除,因为直接输出files是地址</span><br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br><br><span class="hljs-comment">//           if (files.length == 0) &#123;//无内容的文件夹</span><br><span class="hljs-comment">//               dir.delete();</span><br><span class="hljs-comment">//           &#125;</span><br><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span> : files) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">file</span>.isFile()) &#123;<br>                   <span class="hljs-comment">//文件</span><br>                   <span class="hljs-keyword">file</span>.<span class="hljs-keyword">delete</span>();<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-comment">//文件夹</span><br>                   deleteDir(<span class="hljs-keyword">file</span>);<br>               &#125;<br>           &#125;<br>           dir.<span class="hljs-keyword">delete</span>();<br><br>       &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">File</span>[] <span class="hljs-keyword">files</span> = dir.listFiles();<br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">files</span> == null) &#123;<span class="hljs-comment">//无权限删除,因为直接输出files是地址</span><br>    return;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里的files &#x3D;&#x3D; null指的是无权限删除，而非指这个文件数组为空（dir下无内容）。</strong></p><h4 id="啤酒问题"><a href="#啤酒问题" class="headerlink" title="啤酒问题"></a>啤酒问题</h4><p>啤酒2元1瓶，4个盖子换一瓶，2个空瓶换一瓶，10元可以喝多少瓶？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FileTest8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> total;<span class="hljs-comment">//啤酒总数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> lastBottleNumber;<span class="hljs-comment">//剩余瓶子数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> lastCoverNumber;<span class="hljs-comment">//剩余盖子数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        buy(<span class="hljs-number">10</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;总数&quot;</span>+total);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;剩余瓶子数&quot;</span>+lastBottleNumber);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;剩余盖子数&quot;</span>+lastCoverNumber);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> money</span>)</span>&#123;<br>        <span class="hljs-comment">//先把钱花完，总共买的酒的数量</span><br>        <span class="hljs-built_in">int</span> n = money/<span class="hljs-number">2</span>;<br>        total += n;<br><br>        <span class="hljs-comment">//把瓶子和盖子换成钱继续买</span><br>        <span class="hljs-comment">//计算本轮总的盖子数和瓶子数</span><br>        <span class="hljs-built_in">int</span> allBottleNumber = n + lastBottleNumber;<br>        <span class="hljs-built_in">int</span> allCoverNumber = n + lastCoverNumber;<br>        <span class="hljs-built_in">int</span> allMoney = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//总共的瓶子数大于等于2</span><br>        <span class="hljs-keyword">if</span>(allBottleNumber &gt;= <span class="hljs-number">2</span>)&#123;<br>            allMoney += (allBottleNumber / <span class="hljs-number">2</span>) * <span class="hljs-number">2</span>;<br>        &#125;<br>        lastBottleNumber = allBottleNumber % <span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">//总共的盖子数大于等于4</span><br>        <span class="hljs-keyword">if</span>(allCoverNumber &gt;= <span class="hljs-number">4</span>)&#123;<br>            allMoney += (allCoverNumber / <span class="hljs-number">4</span>) * <span class="hljs-number">2</span>;<br>        &#125;<br>        lastCoverNumber = allCoverNumber % <span class="hljs-number">4</span>;<br><br>        <span class="hljs-comment">//总钱大于2，还可以再买</span><br>        <span class="hljs-keyword">if</span>(allMoney &gt;= <span class="hljs-number">2</span>)&#123;<br>            buy(allMoney);<span class="hljs-comment">//递归</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a100.png"><br>这里也用到了递归，而且也没有用到函数，只是单纯地分析问题解决问题。</p><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="前置知识：字符集"><a href="#前置知识：字符集" class="headerlink" title="前置知识：字符集"></a>前置知识：字符集</h2><ul><li>ASCII是美国信息交换标准代码，包括英文、符号；</li><li>标准ASCII字符集使用1个字节存储一个字符，首尾是0，总共克表示128个字符</li><li>GBK：汉字编码字符集，一个中文字符编码成两个字节的形式存储。<strong>GBK兼容了ASCII字符集</strong>。<strong>汉字的第一个字节的第一位必须是1。</strong></li><li>Unicode是国际组织制定的，可以容纳世界上所有文字、符号的字符集。<ul><li>UTF-32：4个字节表示一个字符，较奢侈</li><li>UTF-8：是Unicode字符集的一种边骂方案，采取可变常编码方案，共分四个长度区：1个字节、2个字节、3个字节、4个字节。<ul><li>英文字符、数字等只占1个字节，汉字字符占用3个字节<table><thead><tr><th>字节数</th><th>UTF-8编码方式（二进制）</th></tr></thead><tbody><tr><td>一字节</td><td>0××××××××</td></tr><tr><td>二字节</td><td>110××××× 10×××××× 10××××××</td></tr><tr><td>三字节</td><td>1110×××× 10×××××× 10××××××</td></tr><tr><td>四字节</td><td>11110××× 10×××××× 10×××××× 10××××××</td></tr></tbody></table></li></ul></li></ul></li></ul><p><strong>字符编码使用的字符集和解码使用的字符集必须相同，否则会出现乱码；英文数字一般不会乱码，因为很多字符集都兼容ASCII编码</strong></p><h3 id="对字符编码解码"><a href="#对字符编码解码" class="headerlink" title="对字符编码解码"></a>对字符编码解码</h3><ul><li><code>byte[] getBytes()</code>使用平台的默认字符集将该String字符串进行<strong>编码</strong>为一系列字节，将结果存储到字节数组中</li><li><code>byte[] getBytes(String charsetName)</code>使用指定的字符集将该String字符串进行<strong>编码</strong>为一系列字节，将结果存储到字节数组中</li><li><code>String(byte[] bytes)</code>通过使用平台的默认字符集<strong>解码</strong>指定的字节数组来构建新的String</li><li><code>String(byte[] bytes,String charsetName)</code>通过使用指定的字符集<strong>解码</strong>指定的字节数组来构建新的String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a我b&quot;</span>;<br>        <span class="hljs-type">byte</span>[] bytes = str.getBytes();<span class="hljs-comment">//默认按照平台字符集进行编码的UTF-8</span><br>        System.out.println(Arrays.toString(bytes));<br><br>        <span class="hljs-comment">//按照GBK编码</span><br>        <span class="hljs-type">byte</span>[] bytes1 = str.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>);<br>        System.out.println(Arrays.toString(bytes1));<br><br>        <span class="hljs-comment">//解码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<span class="hljs-comment">//按照平台默认字符集解码</span><br>        System.out.println(s);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes1);<span class="hljs-comment">//按照平台默认字符集解码</span><br>        System.out.println(s1);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a1.png"></p><h2 id="IO流——字符流"><a href="#IO流——字符流" class="headerlink" title="IO流——字符流"></a>IO流——字符流</h2><p><img src="/img/a2.png"><br>IO流的分类：</p><ul><li>按照流的方向：输入流和输出流</li><li>按流中数据的最小单位：字节流（适合操作所有类型的文件，如音频、视频、图片等文件的<strong>复制</strong>，但不适合读取中文内容输出）、字符流（只可以操作（<strong>读写</strong>）纯文本文件，如txt文件、Java文件）</li></ul><p><strong>IO流总体来看有四大流：</strong></p><ul><li>字节输入流：抽象类<code>InputStream</code>,实现类：<code>FileIntputStream</code>、<code>BufferedInputStream</code>字节缓冲输入流</li><li>字节输出流：抽象类<code>OutputStream</code>,实现类：<code>FileOutputStream</code>、<code>BufferedOutputStream</code>字节缓冲输出流</li><li>字符输入流：抽象类<code>Reader</code>,实现类：<code>FileReader</code>、<code>BufferedReader</code>字符缓冲输入流</li><li>字符输出流：抽象类<code>Writer</code>,实现类：<code>FileWriter</code>、<code>BufferedWriter</code>字符缓冲输出流</li></ul><h3 id="FileInputStream-文件字节输入流"><a href="#FileInputStream-文件字节输入流" class="headerlink" title="FileInputStream(文件字节输入流)"></a>FileInputStream(文件字节输入流)</h3><p>把磁盘文件中的数据以字节的形式读入到内存中去</p><ul><li><code>public FileInputStream(File file)</code>创建字节输入流管道与源文件接通</li><li><code>public FileInputStream(String name)</code>创建字节输入流管道与源文件接通</li><li><code>public int read()</code>一次读取一字节，读取完毕后返回-1</li><li><code>public int read(byte[] b)</code>每次读取多个字节到字节数组中，返回读取的字节数量，读取完毕后返回-1</li></ul><h4 id="每次读取一个字节"><a href="#每次读取一个字节" class="headerlink" title="每次读取一个字节"></a>每次读取一个字节</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> IOTest2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建文件字节输入流管道与源文件接通</span><br>        <span class="hljs-comment">//InputStream fs1 = new FileInputStream(new File(&quot;oop-app6\\src\\a.txt&quot;));//使用多态写法</span><br>        InputStream fs1 = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;oop-app6\\src\\a.txt&quot;</span>);<span class="hljs-comment">//使用多态写法</span><br><br>        <span class="hljs-comment">//read()每次读取一个字节</span><br>        <span class="hljs-keyword">int</span> r1 = fs1.<span class="hljs-keyword">read</span>();<br>        System.out.<span class="hljs-keyword">println</span>(r1);<br>        System.out.<span class="hljs-keyword">println</span>((<span class="hljs-keyword">char</span>)r1);<span class="hljs-comment">//转换成字符</span><br><br>        <span class="hljs-keyword">int</span> r2 = fs1.<span class="hljs-keyword">read</span>();<br>        System.out.<span class="hljs-keyword">println</span>(r2);<br>        System.out.<span class="hljs-keyword">println</span>((<span class="hljs-keyword">char</span>)r2);<br><br>        <span class="hljs-keyword">int</span> r3 = fs1.<span class="hljs-keyword">read</span>();<span class="hljs-comment">//无内容可读取</span><br>        System.out.<span class="hljs-keyword">println</span>(r3);<span class="hljs-comment">//输出-1</span><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a4.png"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//使用循环改造上述代码</span><br>        int b;<br>        <span class="hljs-keyword">while</span> ((b = fs1.<span class="hljs-keyword">read</span>()) != -1) &#123;<br>            System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>((<span class="hljs-keyword">char</span>) b);<br>        &#125;<br><br>        fs1.<span class="hljs-keyword">close</span>();<span class="hljs-comment">//使用完输入流必须关闭，释放系统资源</span><br></code></pre></td></tr></table></figure><p><img src="/img/a3.png"><br>注意：使用FileInputStream每次读取一个字节，读取性能较差，并且读取汉字输出会乱码</p><h4 id="每次读取多个字节"><a href="#每次读取多个字节" class="headerlink" title="每次读取多个字节"></a>每次读取多个字节</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\a.txt&quot;</span>);<br><br>        <span class="hljs-comment">//开始读取文件中的字节数据，每次读取多个字节</span><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">//每次读取3个字节</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fs1.read(b);<span class="hljs-comment">//读取的字节数数量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<span class="hljs-comment">//解码成字符</span><br>        System.out.println(rs);<br>        System.out.println(<span class="hljs-string">&quot;当前读取的字节数量为&quot;</span>+len);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> fs1.read(b);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b,<span class="hljs-number">0</span>,len1);<br>        System.out.println(rs1);<br>        System.out.println(<span class="hljs-string">&quot;当前读取的字节数量为&quot;</span>+len1);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len2</span> <span class="hljs-operator">=</span> fs1.read(b);<br>        System.out.println(len2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a5.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//使用循环改造</span><br><span class="hljs-type">byte</span>[] b = <span class="hljs-built_in">new</span> <span class="hljs-type">byte</span>[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> <span class="hljs-built_in">len</span>;<br>while((<span class="hljs-built_in">len</span> = fs1.read(b)) != <span class="hljs-number">-1</span>) &#123;<br>    String s = <span class="hljs-built_in">new</span> String(b,<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>);<span class="hljs-comment">//必须规定范围，否则后面不够3字节的字符会</span><br>    System.out.<span class="hljs-built_in">print</span>(s);<br>&#125;<br><br>fs1.<span class="hljs-built_in">close</span>();<span class="hljs-comment">//关闭流，释放系统资源</span><br></code></pre></td></tr></table></figure><p>注意：每次读取多个字节，系统调用次数减少，性能明显提升，但读取汉字仍会出现乱码，如下所示：</p><p>若文件内容是“ab1我爱中国”，利用上面循环来读取的结果为：<br><img src="/img/a6.png"><br>若文件内容是“ab11我爱中国”，结果为：<br><img src="/img/a7.png"><br>出现以上结果原因是每次读取字节的长度为3，而“ab11我爱中国”中读取前三个字节是“ab1”，而一个汉字占3个字节，如果把汉字字节拆开的话，则会导致乱码</p><h4 id="一次读取全部字节"><a href="#一次读取全部字节" class="headerlink" title="一次读取全部字节"></a>一次读取全部字节</h4><ul><li>直接创建与文件字节长度相同的字节数组即可<code>public int read(byte[] b)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\a.txt&quot;</span>);<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;oop-app6\\src\\a.txt&quot;</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">lens</span> <span class="hljs-operator">=</span> f1.length();<br><br>        <span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)lens];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fs1.read(b);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br>        System.out.println(s);<br>        System.out.println(<span class="hljs-string">&quot;文件字节总数&quot;</span>+len);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a8.png"></p><ul><li>直接将当前字节输入流对应的文件对象的字节数据装到一个字节数组返回<code>public byte[] readAllBytes() throws IOException</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\a.txt&quot;</span>);<br>        <br><br>        <span class="hljs-type">byte</span>[] bytes = fs1.readAllBytes();<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a9.png"><br><strong>注意：若文件太大，创建字节数组也会过大，可能引起内存溢出</strong></p><h3 id="FileOutputStream-文件字节输出流"><a href="#FileOutputStream-文件字节输出流" class="headerlink" title="FileOutputStream(文件字节输出流)"></a>FileOutputStream(文件字节输出流)</h3><p>把内存中的数据以字节的形式写入到文件中去</p><ul><li><code>public FileOutputStream(File file)</code>创建一个字节输出流管道与目标文件接通</li><li><code>public FileOutputStream(String name)</code>创建一个字节输出流管道与目标文件接通</li><li><code>public FileOutputStream(File file, boolean append)</code>创建一个字节输出流管道与目标文件接通，可追加数据</li><li><code>public FileOutputStream(String name, boolean append)</code>创建一个字节输出流管道与目标文件接通，可追加数据</li><li><code>public void write(byte[] b)</code>从指定的字节数组中写入字节到文件</li><li><code>public void write(int b)</code>将指定的字节写入此文件</li><li><code>public void write(byte[] b, int off, int len)</code>从指定的字节数组中写入从offset开始的长度为len的字节</li><li><code>public void close()</code>关闭此文件输出流并释放所有系统资源</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> IOTest5 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//创建一个字节输出流管道与目标文件接通</span><br>        <span class="hljs-comment">//该管道会覆盖之前的数据</span><br><span class="hljs-comment">//        OutputStream fso1 = new FileOutputStream(&quot;oop-app6\\src\\aa.txt&quot;);</span><br><br>        <span class="hljs-comment">//true代表会往文件中追加数据，不会覆盖</span><br>        eOutputStream fso1 = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>,<span class="hljs-keyword">true</span>);<br><br><br>        <span class="hljs-comment">//写字节数据数据出去</span><br>        fso1.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<span class="hljs-comment">//97是一个字节，代表a</span><br>        fso1.<span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<span class="hljs-comment">//‘b’也是一个字节</span><br>        <span class="hljs-comment">//fso1.write(&#x27;我&#x27;);//我不是一个字节，是三个字节，不可写</span><br><br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">&quot;我爱你中国sss&quot;</span>.getBytes();<span class="hljs-comment">//将字符串编码成字节数组</span><br>        <span class="hljs-comment">//写入字节数组</span><br>        fso1.<span class="hljs-keyword">write</span>(bytes);<br>        <br>        fso1.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;\r\n&quot;</span>.getBytes());<br><br>        <span class="hljs-comment">//写入指定字节数组长度的字节</span><br>        fso1.<span class="hljs-keyword">write</span>(bytes,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>);<br>        fso1.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件内容写入结果：<br><img src="/img/a10.png"></p><h3 id="案例——文件复制"><a href="#案例——文件复制" class="headerlink" title="案例——文件复制"></a>案例——文件复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//复制照片</span><br>        <span class="hljs-comment">//创建字节输入流管道与源文件接通</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">fsi1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\hhd0717\\Pictures\\yuangu.png&quot;</span>);<br>        <span class="hljs-comment">//创建一个字节输出流管道与目标文件接通</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fso1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\hhd0717\\Documents\\yuangu.png&quot;</span>);<br>        <span class="hljs-comment">//创建一个字节数组,负责转移字节数据</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1KB</span><br>        <span class="hljs-comment">//从字节输入流读取字节数据，写出去到字节输出流中，都多少写出去多少</span><br>        <span class="hljs-type">int</span> len;<span class="hljs-comment">//记住每次读取的字节数量</span><br>        <span class="hljs-keyword">while</span> ((len = fsi1.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>            fso1.write(buf, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        fso1.close();<span class="hljs-comment">//先关闭输出流</span><br>        fsi1.close();<br>        System.out.println(<span class="hljs-string">&quot;Done&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a11.png"><br>查看文件资源器，发现图片复制成功。<br><strong>注意：任何文件的底层都是字节，字节流做复制，是一字不漏的转移完全部字节，只要赋值后的文件格式一致就没问题</strong></p><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><p>上面代码中对于资源的释放采用的是close方法，但是这种方法不太专业，而且如果代码过度，很容易抛出其他异常，这样写不太专业。</p><h4 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h4><p>try-catch-finally语句中finally代码区</p><ul><li>特点：无论try中程序是正常执行还是出现了异常，最后一定会执行finally区，除非JVM终止。</li><li>作用：一般用于在程序执行完成后进行资源的释放操作（专业）</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;finally 执行了一次&quot;</span>);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a14.png"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">10</span>/<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//终止main方法</span><br>    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;finally 执行了一次&quot;</span>);<span class="hljs-comment">//</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a12.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">public static void main(String[] args) &#123;<br>    try&#123;<br>        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">1</span>);<br>        System.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>直接终止Java虚拟机<br>    &#125;catch (Exception e)&#123;<br>        e.printStackTrace();<br>    &#125;finally &#123;<br>        System.out.println(<span class="hljs-string">&quot;finally 执行了一次&quot;</span>);<span class="hljs-regexp">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a13.png"><br>如上三种情况，无论try代码区中发生异常和正常运行，都不会影响finally中的语句的执行，若直接是Java虚拟机终止，才可以终止其语句的执行。</p><p>还有一种情况，如果在finally代码区中写return语句，则会覆盖try代码块中的return语句，<strong>所以千万不要再finally代码区中写return语句</strong>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IOTest7</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(chu(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">chu</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span>&#123;<span class="hljs-comment">//静态方法属于类本身，而不是类的某个具体对象。</span><br>        <span class="hljs-comment">// 它不需要通过类的实例来调用，可以直接通过类名来访问。</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">return</span> a/b;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//出现异常</span><br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//不要在finally返回数据</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">111</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a15.png"></p><h5 id="输入输出流释放的专业操作"><a href="#输入输出流释放的专业操作" class="headerlink" title="输入输出流释放的专业操作"></a>输入输出流释放的专业操作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <br>        <span class="hljs-comment">//流的创建放在外面，这样finally代码块中也可以识别到</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">fsi1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fso1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//System.out.println(10/0);</span><br>            <span class="hljs-comment">//复制照片</span><br>            <span class="hljs-comment">//创建字节输入流管道与源文件接通</span><br>            fsi1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\hhd0717\\Pictures\\yuangu.png&quot;</span>);<br>            <span class="hljs-comment">//创建一个字节输出流管道与目标文件接通</span><br>            fso1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\hhd0717\\Documents\\yuangu.png&quot;</span>);<br>            <span class="hljs-comment">//创建一个字节数组,负责转意字节数据</span><br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1KB</span><br>            <span class="hljs-comment">//从字节输入流读取字节数据，写出去到字节输出流中，都多少写出去多少</span><br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记住每次读取的字节数量</span><br>            <span class="hljs-keyword">while</span> ((len = fsi1.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                fso1.write(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;Done&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fso1 != <span class="hljs-literal">null</span>) fso1.close();<span class="hljs-comment">//防止在创建流之前发生异常而导致流未被创建为null，所以要加上if判断，</span><br>                <span class="hljs-comment">//否则会发生空指针异常</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fsi1 != <span class="hljs-literal">null</span>) fsi1.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h4><p><code> try(定义资源1;定义资源2;...)&#123;可能出现异常的代码&#125;catch(异常类名 变量名)&#123;异常处理代码&#125;</code><br>try()中定义的资源使用完毕后，会自动调用其close()方法，完成对资源的释放。更加专业。</p><p>对上方的try-catch-finally语句进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//复制照片</span><br>        <span class="hljs-keyword">try</span> (<br>            <br>                <span class="hljs-comment">//创建字节输入流管道与源文件接通</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fsi1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\hhd0717\\Pictures\\yuangu.png&quot;</span>);<br>                <span class="hljs-comment">//创建一个字节输出流管道与目标文件接通</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fso1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;C:\\Users\\hhd0717\\Documents\\yuangu.png&quot;</span>);<br>                )&#123;<br><br>            <span class="hljs-comment">//创建一个字节数组,负责转意字节数据</span><br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1KB</span><br>            <span class="hljs-comment">//从字节输入流读取字节数据，写出去到字节输出流中，都多少写出去多少</span><br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记住每次读取的字节数量</span><br>            <span class="hljs-keyword">while</span> ((len = fsi1.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                fso1.write(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;Done&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：try()中只能放置资源对象，不能放置变量等</strong><br><strong>如何判断是否是资源？资源最终都实现了AutoCloseable接口</strong><br><img src="/img/a16.png"><img src="/img/a17.png"></p><h3 id="FileReader（文件字符输入流）"><a href="#FileReader（文件字符输入流）" class="headerlink" title="FileReader（文件字符输入流）"></a>FileReader（文件字符输入流）</h3><p>把磁盘文件中的数据以字符的形式读入到内存中去</p><ul><li><code>public FileReader(File file)</code>创建字符输入流管道与源文件接通</li><li><code>public FileReader(String fileName)</code>创建字符输入流管道与源文件接通</li><li><code>public int read()</code>每次读取一个字符返回，如果发现没有数据可读会返回-1</li><li><code>public int read(char[] buffer)</code> 每次用一个字符数组读取数据，返回字符数组读取的字符数量，如果发现没有数据可读则返回-1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br>;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建字符输入流与原文件接通</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Reader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>);)&#123;<br><br><span class="hljs-comment">//            //读取文本文件内容</span><br><span class="hljs-comment">//            int c;//用来记住每次读取的字符编号</span><br><span class="hljs-comment">//            while ((c = fileReader.read()) != -1) &#123;</span><br><span class="hljs-comment">//                System.out.print((char) c);</span><br><span class="hljs-comment">//            &#125;</span><br><br><br>            <span class="hljs-comment">//每次读取多个字符</span><br>            <span class="hljs-type">char</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记住每次读取多少字符</span><br>            <span class="hljs-keyword">while</span> ((len = fileReader.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-comment">//读取多少倒出多少</span><br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf, <span class="hljs-number">0</span>, len));<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a18.png"><br><strong>读取字符是将每个汉字、字母等都看成一个字符来读，不会像字节那样将汉字拆开</strong></p><h3 id="FileWriter（文件字符输出流）"><a href="#FileWriter（文件字符输出流）" class="headerlink" title="FileWriter（文件字符输出流）"></a>FileWriter（文件字符输出流）</h3><p>把内存中的数据以字符的形式写入到文件中去</p><ul><li><code>public FileWriter(File file)</code>创建一个字符输出流管道与目标文件接通</li><li><code>public FileWriter(String name)</code>创建一个字符输出流管道与目标文件接通</li><li><code>public FileWriter(File file, boolean append)</code>创建一个字符输出流管道与目标文件接通，可追加数据</li><li><code>public FileWriter(String name, boolean append)</code>创建一个字符输出流管道与目标文件接通，可追加数据</li><li><code>public void write(char[] cbuf)</code>写一个字符数组</li><li><code>public void write(int b)</code>写一个字符</li><li><code>public void write(String str, int off, int len)</code>写字符串的一部分</li><li><code>public void write(char[] cbuf, int off, int le)</code>写一个字符数组的一部分</li><li><code>public void write(String str)</code>写一个字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest9</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建字符输出流管道,覆盖原数据</span><br>                <span class="hljs-comment">//Writer fw = new FileWriter(&quot;oop-app6\\src\\aa.txt&quot;);</span><br>                <span class="hljs-comment">//追加数据</span><br>                <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>                )&#123;<br>            <span class="hljs-comment">//写入一个字符</span><br>            fw.write(<span class="hljs-string">&#x27;w&#x27;</span>);<br>            fw.write(<span class="hljs-number">97</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.write(<span class="hljs-string">&quot;我爱你&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.write(<span class="hljs-string">&quot;我爱你中国&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            <span class="hljs-type">char</span>[] cbuf = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>            fw.write(cbuf);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.write(cbuf,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a19.png"><br><strong>注意：字符输出流写出数据后，必须刷新流，或者关闭流，写出取得数据才能生效</strong></p><ul><li><code>public void flush() throws IOExcpetion</code>刷新流，将内存缓冲区的数据立即写到文件中生效</li><li><code>public void close() throws IOExcpetion</code>关闭流包括刷新流，但是关闭流后不可以再使用</li></ul><p>如下代码所示，当文件需要新建后，数据先被写在了缓冲区内，<strong>输出流刷新后</strong>才会调用系统功能将缓冲区的数据写到文件中：<br><strong>如果缓冲区装满了数据，但数据还未读完，那么会自动将缓冲区的数据存到目标文件内</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class3;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Writer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IOTest9</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>           <span class="hljs-type">Writer</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;oop-app6\\src\\aaa.txt&quot;</span>);<br><br>            <span class="hljs-comment">//写入一个字符</span><br>            fw.write(<span class="hljs-string">&#x27;w&#x27;</span>);<br>            fw.write(<span class="hljs-number">97</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.write(<span class="hljs-string">&quot;我爱你&quot;</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.write(<span class="hljs-string">&quot;我爱你中国&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            <span class="hljs-type">char</span>[] cbuf = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>            fw.write(cbuf);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.write(cbuf,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>            fw.write(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><br>            fw.flush();<span class="hljs-comment">//刷新流</span><br>            fw.write(<span class="hljs-string">&quot;张三&quot;</span>);<br>            fw.flush();<span class="hljs-comment">//需要再次刷新</span><br><br>            <span class="hljs-comment">//fw.close();//关闭流包含刷新流</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：刷新流后还可以继续使用流，但是关闭流后不可以再使用</strong></p><h2 id="IO流——缓冲流"><a href="#IO流——缓冲流" class="headerlink" title="IO流——缓冲流"></a>IO流——缓冲流</h2><p>缓冲流的作用是对原始流进行包装，以提高原始流读写数据的性能</p><h3 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h3><ul><li>抽象类<code>InputStream</code>,实现类：<code>BufferedInputStream</code>字节缓冲输入流</li><li>抽象类<code>OutputStream</code>,实现类：<code>BufferedOutputStream</code>字节缓冲输出流</li></ul><p><img src="/img/a21.png" alt="原始字节流读写数据"><br>如上所示，若需要读取16kb的数据，原始流读写数据需要调用系统32次才可以完成，性能较差<br><img src="/img/a22.png" alt="缓冲字节流读写数据"><br>而<strong>字节缓冲输入输出流都自带8KB缓冲池</strong>，通过缓冲池来读写数据，且两个缓冲池是在内存中读写数据，速度非常快，性能较好。</p><ul><li><code>public BufferedInputStream(InputStream is)</code>把低级的字节输入流包装成一个高级的缓冲字节输入流，从而提高读取数据的性能</li><li><code>public BufferedOutputStream(OutputStream os)</code>把低级的字节输出流包装成一个高级的缓冲字节输出流，从而提高读取数据的性能</li></ul><p>文件的复制代码修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedIOTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\aaa.txt&quot;</span>);<br><br>                <span class="hljs-comment">//定义一个字节缓冲输入流包装原始的字节输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(is);<br><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6\\b.txt&quot;</span>);<br><br>                <span class="hljs-comment">//定义一个字节缓冲输出流包装原始的字节输出流</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        )&#123;<br>            <span class="hljs-comment">//创建一个字节数组,负责转意字节数据</span><br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1KB</span><br>            <span class="hljs-comment">//从字节输入流读取字节数据，写出去到字节输出流中，都多少写出去多少</span><br>            <span class="hljs-type">int</span> len;<span class="hljs-comment">//记住每次读取的字节数量</span><br>            <span class="hljs-keyword">while</span> ((len = bis.read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(buf, <span class="hljs-number">0</span>, len);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;Done&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>字节缓冲流自带8KB的缓冲池，如下代码：<br><img src="/img/a23.png"><img src="/img/a24.png"><br>8192就指的是8KB</p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><ul><li>抽象类<code>Reader</code>,实现类：<code>BufferedReader</code>字符缓冲输入流</li><li>抽象类<code>Writer</code>,实现类：<code>BufferedWriter</code>字符缓冲输出流</li></ul><p>字符缓冲输入输出流都自带8K的缓冲池，提高字符读写性能<br><img src="/img/a25.png"><img src="/img/a26.png"></p><h4 id="字符缓冲输入流"><a href="#字符缓冲输入流" class="headerlink" title="字符缓冲输入流"></a>字符缓冲输入流</h4><ul><li><code>public BufferedReader(Reader r)</code>把低级的字符输入流包装成一个高级的缓冲字符输入流，从而提高读取数据的性能</li></ul><p>字符缓冲输入流<strong>新增</strong>的功能：</p><ul><li><code>public String readLine()</code>每次读取一行数据</li></ul><p>读取文件数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedIOTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//创建字符输入流与原文件接通</span><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>);<br><br>                <span class="hljs-comment">//创建字符缓冲输入流包装输入流包装低级的字符输入流</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fileReader)<span class="hljs-comment">//不使用多态</span><br>        )&#123;<br><br><span class="hljs-comment">//            //每次读取多个字符</span><br><span class="hljs-comment">//            char[] buf = new char[1024];</span><br><span class="hljs-comment">//            int len;//记住每次读取多少字符</span><br><span class="hljs-comment">//            while ((len = br.read(buf)) != -1) &#123;</span><br><span class="hljs-comment">//                //读取多少倒出多少</span><br><span class="hljs-comment">//                System.out.print(new String(buf, 0, len));</span><br><span class="hljs-comment">//            &#125;</span><br><br><br>            String str;<br>            <span class="hljs-keyword">while</span>((str = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(str);<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：readLine()是字符缓冲输入流新增的方法，要想使用它时，不能用多态写法，否则无法调用</strong></p><h4 id="字符缓冲输出流"><a href="#字符缓冲输出流" class="headerlink" title="字符缓冲输出流"></a>字符缓冲输出流</h4><ul><li><code>public BufferedWriter(Writer r)</code>把低级的字符输出流包装成一个高级的缓冲字符输出流，从而提高读取数据的性能</li></ul><p>字符缓冲输出流<strong>新增</strong>的功能：</p><ul><li><code>public void newLine()</code>换行</li></ul><p>向文件写入数据</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> BufferedIOTest3 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br><br>        <span class="hljs-keyword">try</span> (<br>                Writer fw = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;oop-app6\\src\\bb.txt&quot;</span>);<br><br>                BufferedWriter bw = <span class="hljs-keyword">new</span> BufferedWriter(fw);<br>                )&#123;<br><br>            <span class="hljs-comment">//写入一个字符</span><br>            bw.<span class="hljs-keyword">write</span>(<span class="hljs-string">&#x27;w&#x27;</span>);<br>            bw.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<br>            <span class="hljs-comment">//fw.write(&quot;\r\n&quot;);</span><br>            bw.newLine();<span class="hljs-comment">//换行</span><br><br>            bw.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;我爱你&quot;</span>);<br>            <span class="hljs-comment">//fw.write(&quot;\r\n&quot;);</span><br>            bw.newLine();<br><br>            bw.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;我爱你中国&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br>            <span class="hljs-comment">//fw.write(&quot;\r\n&quot;);</span><br>            bw.newLine();<br><br>            <span class="hljs-keyword">char</span>[] cbuf = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>            bw.<span class="hljs-keyword">write</span>(cbuf);<br>            <span class="hljs-comment">//fw.write(&quot;\r\n&quot;);</span><br>            bw.newLine();<br><br>            bw.<span class="hljs-keyword">write</span>(cbuf,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>            <span class="hljs-comment">//fw.write(&quot;\r\n&quot;);</span><br>            bw.newLine();<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例——恢复出师表原本顺序"><a href="#案例——恢复出师表原本顺序" class="headerlink" title="案例——恢复出师表原本顺序"></a>案例——恢复出师表原本顺序</h4><p><img src="/img/a27.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedIOTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：恢复出师表原本顺序</span><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建字符缓冲输入流</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;oop-app6\\src\\teacher.txt&quot;</span>));<br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;oop-app6\\src\\teacher1.txt&quot;</span>))<br>        )&#123;<br>            <span class="hljs-comment">//定义ArrayList集合存储每段数据</span><br>            List&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>            <span class="hljs-comment">//按照行读取数据</span><br>            String str;<br>            <span class="hljs-keyword">while</span> ((str = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                strings.add(str);<span class="hljs-comment">//存入到集合中</span><br>            &#125;<br><br>            <span class="hljs-comment">//对集合中的每段文章排序</span><br>            Collections.sort(strings);<span class="hljs-comment">//直接使用sort排序，Java中String已经实现了Comparable</span><br>            System.out.println(strings);<br><br>            <span class="hljs-comment">//遍历集合的每段内容，一次写到新文件中</span><br>            <span class="hljs-keyword">for</span> (String string : strings) &#123;<br>                bw.write(string);<br>                bw.newLine();<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a28.png"></p><h3 id="【重点】原始流、缓冲流的性能对比"><a href="#【重点】原始流、缓冲流的性能对比" class="headerlink" title="【重点】原始流、缓冲流的性能对比"></a>【重点】原始流、缓冲流的性能对比</h3><p>性能好坏通常是对比程序开始到结束的时间得来的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class4;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedIOTest5</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">VIDEO_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\short_video\\Hit the Jackpot! My Broke Chef Husband Is a Billionaire_!\\01.mp4&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEST_FILE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//copy01();//低级字节流一个一个字节复制性能太差，时间太长</span><br>        copy02();<span class="hljs-comment">//低级字节流按照字节数组复制1，速度较慢</span><br>        copy03();<span class="hljs-comment">//缓冲流按照一个一个字节形式复制，速度较慢</span><br>        copy04();<span class="hljs-comment">//缓冲流按照字节数组形式复制，最快</span><br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">starttime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<span class="hljs-comment">//获取程序开始前的时间</span><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(VIDEO_FILE);<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DEST_FILE+<span class="hljs-string">&quot;01.mp4&quot;</span>);<br>                )&#123;<br>            <span class="hljs-type">int</span> b;<br>            <span class="hljs-keyword">while</span> ((b = fs.read()) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(b);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endtime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<span class="hljs-comment">//获取程序结束的时间</span><br>        System.out.println(<span class="hljs-string">&quot;低级字节流一个一个字节复制耗时&quot;</span> + (endtime-starttime)/<span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">starttime1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(VIDEO_FILE);<br><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DEST_FILE+<span class="hljs-string">&quot;02.mp4&quot;</span>);<br>        )&#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1KB</span><br>            <span class="hljs-type">int</span> b;<br>            <span class="hljs-keyword">while</span> ((b = fs.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                os.write(buffer, <span class="hljs-number">0</span>, b);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endtime1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;低级字节流利用1KB字节数组复制耗时&quot;</span> + (endtime1-starttime1)/<span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">starttime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(VIDEO_FILE);<br><br>                <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fs);<br><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DEST_FILE+<span class="hljs-string">&quot;03.mp4&quot;</span>);<br><br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        )&#123;<br>            <span class="hljs-type">int</span> b;<br>            <span class="hljs-keyword">while</span> ((b = bis.read()) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(b);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endtime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;缓冲字节流一个一个字节复制耗时&quot;</span> + (endtime-starttime)/<span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy04</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">starttime2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(VIDEO_FILE);<br><br>                <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fs);<br><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DEST_FILE+<span class="hljs-string">&quot;04.mp4&quot;</span>);<br><br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(os);<br>        )&#123;<br>            <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//1KB</span><br>            <span class="hljs-type">int</span> b;<br>            <span class="hljs-keyword">while</span> ((b = bis.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                bos.write(buffer, <span class="hljs-number">0</span>, b);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">endtime2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;缓冲字节流利用1KB字节数组复制耗时&quot;</span> + (endtime2-starttime2)/<span class="hljs-number">1000.0</span> + <span class="hljs-string">&quot;s&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a29.png"></p><p><strong>注意：另外如果扩大字节数组的大小也可以提高性能，但是字节数组太大会导致每次存到数组数据的时间变长，反而不是那么节省时间</strong></p><h2 id="IO流——转换流"><a href="#IO流——转换流" class="headerlink" title="IO流——转换流"></a>IO流——转换流</h2><h3 id="引入问题：不同编码读取时会乱码"><a href="#引入问题：不同编码读取时会乱码" class="headerlink" title="引入问题：不同编码读取时会乱码"></a>引入问题：不同编码读取时会乱码</h3><p>如果代码编码和被读取的文本文件的编码一致，使用字符流读取文本文件时不会出现乱码，否则会出现乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.Reader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>(<br>                <span class="hljs-comment">//创建文件字符输入流</span><br>                <span class="hljs-comment">//代码编码</span><br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;oop-app6\\src\\ccc.txt&quot;</span>);<br>                <span class="hljs-comment">//包装</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>        ) &#123;<br>            String s;<br>            <span class="hljs-keyword">while</span> ((s = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(s);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a31.png"><br>如上图所示：结果出现乱码情况，原因是ccc.txt文件的编码不是UTF-8,而是GBK<br><img src="/img/a30.png"></p><h3 id="字符输入转换流"><a href="#字符输入转换流" class="headerlink" title="字符输入转换流"></a>字符输入转换流</h3><ul><li>抽象类<code>Reader</code>,实现类：<code>InputtStreamReader</code>字符输入转换流</li><li>作用：解决不同编码时，字符流读取文本内容乱码的问题</li><li>解决思路：先获取文件的<strong>原始字节流</strong>，再将其按真实的<strong>字符编码</strong>转换成<strong>字符输入流</strong></li><li>构造器<ul><li><code>public InputStreamReader(InputStream is)</code>把原始字节输入流按照代码默认编码转换城字符输入流（与直接使用FileReader效果一样）</li><li>【重点】<code>public InputStreamReader(InputStream is, String charset)</code>把原始的字节输入流，按照指定字符集编码转成字符输入流</li></ul></li></ul><p>利用UTF-8编码的代码读取GBK编码的文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//得到文件的原始字节流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\ccc.txt&quot;</span>);<br>                <span class="hljs-comment">//把原始字节输入流按照指定的字符集编码转换成字符输入流</span><br>                <span class="hljs-type">Reader</span> <span class="hljs-variable">gbk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(fs,<span class="hljs-string">&quot;GBK&quot;</span>);<br>                <span class="hljs-comment">//把字符输入流包装成缓冲字符输入流</span><br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(gbk);<br>        )&#123;<br>            String s;<br>            <span class="hljs-keyword">while</span>((s = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(s);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a32.png"></p><h3 id="字符输出转换流（了解）"><a href="#字符输出转换流（了解）" class="headerlink" title="字符输出转换流（了解）"></a>字符输出转换流（了解）</h3><ul><li>抽象类<code>Writer</code>,实现类：<code>BufferedWriter</code>字符缓冲输出流</li></ul><p>控制写出去的字符使用什么字符集编码</p><ul><li>调用String提供的getBytes方法解决<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String data <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我爱你中国aaa&quot;</span>；<br>byte[] bytes <span class="hljs-operator">=</span> data.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>使用“<code>OutputStreamWriter</code>字符输出转换流”实现<ul><li>解决思路：获取字节输出流，再按照指定的字符集编码将其转换成字符输出流</li><li><code>public OutputStreamWriter(OutputStream os)</code>把原始字节输出流按照代码默认编码转换城字符输出流</li><li>【重点】<code>public OutputStreamWriter(OutputStream os, String charset)</code>把原始的字节输出流，按照指定字符集编码转成字符输出流</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//指定写出去的字符编码</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\cccc.txt&quot;</span>);<br>                <span class="hljs-comment">//把原始输出流按照指定编码转换成字符输出流</span><br>                <span class="hljs-type">Writer</span> <span class="hljs-variable">gbk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(os,<span class="hljs-string">&quot;GBK&quot;</span>);<br>                <span class="hljs-comment">//包装成缓冲字符输出流</span><br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(gbk);<br>        )&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我爱你中国~亲爱的母亲&quot;</span>;<br>            bw.write(s);<br>            bw.newLine();<br>            bw.write(s,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如下图所示，利用UTF-8编码的结果是乱码<br><img src="/img/a33.png"><br>将右下角的编码字符集修改为GBK,成功编码<br><img src="/img/a34.png"></p><h2 id="IO流——打印流"><a href="#IO流——打印流" class="headerlink" title="IO流——打印流"></a>IO流——打印流</h2><ul><li>抽象类<code>OutputStream</code>,实现类：<code>PrintStream</code>打印流</li><li>抽象类<code>Writer</code>,实现类：<code>PrintWriter</code>打印流</li></ul><p>作用：打印流可以实现更方便、更高效的打印数据出去，能实现打印内容与打印结果一致</p><h3 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h3><p>构造器：</p><ul><li><code>public PrintStream(OutputStream/File/String)</code>打印流直接通向字节输出流&#x2F;文件&#x2F;文件路径</li><li><code>public PrintStream(String fileName, Charset charset)</code>可以指定写出去的字符编码</li><li><code>public PrintStream(OutputStream out, boolean autoFlush)</code>可以指定实现自动刷新</li><li><code>public PrintStream(OutputStream out, boolean autoFlush, String encoding)</code>可以指定实现自动刷新，并可指定写出取得字符编码</li></ul><p>方法:</p><ul><li><code>public void println(××× ××)</code>打印任意类型的数据出去</li><li><code>public void write(int/byte[]/byte[]一部分)</code>可以支持写<strong>字节</strong>数据出去，因为它继承字节输出流OutputStream<br><img src="/img/a36.png"></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Test4 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建打印流管道</span><br>                <span class="hljs-comment">//指定字符编码</span><br>               <span class="hljs-comment">//PrintStream printStream = new PrintStream(&quot;oop-app6\\src\\cc.txt&quot;, Charset.forName(&quot;GBK&quot;));</span><br>                PrintStream printStream = <span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;oop-app6\\src\\cc.txt&quot;</span>);<br><br>                )&#123;<br>            printStream.<span class="hljs-keyword">println</span>(<span class="hljs-string">&#x27;s&#x27;</span>);<br>            printStream.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;aaaaaaa&quot;</span>);<br>            printStream.<span class="hljs-keyword">println</span>(<span class="hljs-number">97</span>);<br>            printStream.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">true</span>);<br>            printStream.<span class="hljs-keyword">println</span>(<span class="hljs-number">99.9</span>);<br><br>            printStream.<span class="hljs-keyword">write</span>(<span class="hljs-number">97</span>);<span class="hljs-comment">//&#x27;a&#x27;</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a35.png"><br><strong>注意：PrintStream有缓冲池，性能较好</strong></p><h3 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h3><p>构造器：</p><ul><li><code>public PrintWriter(OutputStream/Writer/File/String)</code>打印流直接通向字节输出流&#x2F;字符输出流&#x2F;文件&#x2F;文件路径</li><li><code>public PrintWriter(String fileName, Charset charset)</code>可以指定写出去的字符编码</li><li><code>public PrintWriter(OutputStream out, boolean autoFlush)</code>可以指定实现自动刷新</li><li><code>public PrintWriter(OutputStream out, boolean autoFlush, String encoding)</code>可以指定实现自动刷新，并可指定写出取得字符编码</li></ul><p>方法:</p><ul><li><code>public void println(××× ××)</code>打印任意类型的数据出去</li><li><code>public void write(int/String/char[]/..)</code>可以支持写<strong>字符</strong>数据出去，因为它继承字符输出流Writer<br><img src="/img/a37.png"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建打印流管道</span><br>                <span class="hljs-comment">//指定字符编码</span><br>                <span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(&quot;oop-app6\\src\\cc.txt&quot;, Charset.forName(&quot;GBK&quot;));</span><br>                <br>                <span class="hljs-comment">//要想追加数据，必须包装低级流才可</span><br>                <span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(new FileOutputStream(&quot;oop-app6\\src\\cc.txt&quot;,true));</span><br>                <br>                <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;oop-app6\\src\\cc.txt&quot;</span>);<br>                )&#123;<br>            printWriter.println(<span class="hljs-string">&#x27;s&#x27;</span>);<br>            printWriter.println(<span class="hljs-string">&quot;aaaaaaa&quot;</span>);<br>            printWriter.println(<span class="hljs-number">97</span>);<br>            printWriter.println(<span class="hljs-literal">true</span>);<br>            printWriter.println(<span class="hljs-number">99.9</span>);<br><br>            printWriter.write(<span class="hljs-number">97</span>);<span class="hljs-comment">//&#x27;a&#x27;</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a35.png"><br><strong>注意：要想实现向文件追加数据，而非覆盖数据，需要包装成低级流才可以</strong></p><p>打印流的一种应用：输出语句的重定向，将<code>System.out.println(&quot;Hello World&quot;)</code>输出语句的打印位置改到某个文件去。</br><br>对于<code>System.out.println(&quot;Hello World&quot;)</code>，这是系统默认的打印流，如下图所示：out是系统定义的打印流，它表示在控制台输出。<br><img src="/img/a38.png"><br>以下代码中修改了默认的打印流为自定义的文件</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class5;<br><br>import java.io.PrintStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test6</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello World1&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello World2&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> (<br>                PrintStream printStream = <span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;oop-app6\\src\\cc.txt&quot;</span>);<br>              )&#123;<br><br>            <span class="hljs-comment">//将系统默认的打印流改成自己设置的打印流</span><br>            System.setOut(printStream);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello World3&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello World4&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a39.png"></p><h2 id="IO流——数据流"><a href="#IO流——数据流" class="headerlink" title="IO流——数据流"></a>IO流——数据流</h2><ul><li>抽象类<code>OutputStream</code>,实现类：<code>DataOutputStream</code>数据输出流</li><li>抽象类<code>InputStream</code>,实现类：<code>DataInputStream</code>数据输入流</li></ul><p>作用：允许把数据和其类型一并写出去</p><p>构造器：</p><ul><li><code>public DataOutputStream(OutputStream out)</code>创建数据输出流包装基础的字节输出流</li><li><code>public DataInputStream(InputStream in)</code>创建新数据输入包装基础的字节输入流</li></ul><p>方法：<br><img src="/img/a40.png"><img src="/img/a41.png"></p><p>使用数据输出流将数据写入文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建数据输出流</span><br>                <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dataOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\cc.txt&quot;</span>));<br><br>                )&#123;<br><br>            dataOutputStream.writeInt(<span class="hljs-number">111</span>);<br>            dataOutputStream.writeBoolean(<span class="hljs-literal">true</span>);<br>            dataOutputStream.writeUTF(<span class="hljs-string">&quot;Hello&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a42.png"><br><strong>注意：以上文件的结果并非乱码，只是将对于数据和其类型按照编码形式存进去了</strong></p><p>接着使用数据输入流读出文件中数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建数据输出流</span><br>                <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dataInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\cc.txt&quot;</span>));<br><br>                )&#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> dataInputStream.readInt();<br>            System.out.println(i);<br><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> dataInputStream.readBoolean();<br>            System.out.println(i2);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> dataInputStream.readUTF();<br>            System.out.println(b);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a43.png"><br><strong>注意：读取文件内容时必须要和写入文件内容时的方法一致，顺序一致，否则无法读出</strong></p><h2 id="IO流——序列化流"><a href="#IO流——序列化流" class="headerlink" title="IO流——序列化流"></a>IO流——序列化流</h2><ul><li>抽象类<code>OutputStream</code>,实现类：<code>ObjectaOutputStream</code>对象字节输出流，对对象进行序列化，把Java对象存到某个文件中</li><li>抽象类<code>InputStream</code>,实现类：<code>ObjectInputStream</code>对象字节输入流，对对象进行反序列化，把Java对象从某个文件读取出来</li></ul><h3 id="ObjectnOutputStream（对象字节输出流）"><a href="#ObjectnOutputStream（对象字节输出流）" class="headerlink" title="ObjectnOutputStream（对象字节输出流）"></a>ObjectnOutputStream（对象字节输出流）</h3><p>构造器：</p><ul><li><code>public ObjectOutputStream(OutputStream out)</code>创建对象字节输出流，包装基础字节输出流</li></ul><p>方法：</p><ul><li><code>publi final void writeObject(Object o) throws IOException</code>把对象写出去</li></ul><p>Java对象：User.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">class5</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">io</span>.<span class="hljs-property">Serializable</span>;<br><br><span class="hljs-comment">//如果对象需要序列化，必须要使对象类实现Serializable接口，这样是为了给虚拟机看，让其对对象进行序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> userName;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> passWord;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> loginName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_">String</span> userName, int age, <span class="hljs-title class_">String</span> passWord, <span class="hljs-title class_">String</span> loginName) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = userName;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">passWord</span> = passWord;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loginName</span> = loginName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> userName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassWord</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPassWord</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> passWord</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">passWord</span> = passWord;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getLoginName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> loginName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setLoginName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> loginName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">loginName</span> = loginName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userName=&#x27;&quot;</span> + userName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, passWord=&#x27;&quot;</span> + passWord + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, loginName=&#x27;&quot;</span> + loginName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectIOTest</span>  &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建java对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建一个对象字节流输出流管道包装成原始字节输出流</span><br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>));<br>                )&#123;<br>           <span class="hljs-comment">//序列化对象到文件中</span><br>            objectOutputStream.writeObject(user);<br>            System.out.println(<span class="hljs-string">&quot;Written object&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a44.png"></p><p><strong>注意：要想实现对对象的序列化，就必须要使对象类实现Serializable序列化接口，这样是为了标识给虚拟机看，从而实现序列化</strong></p><h3 id="ObjectInputStream（对象字节输入流）"><a href="#ObjectInputStream（对象字节输入流）" class="headerlink" title="ObjectInputStream（对象字节输入流）"></a>ObjectInputStream（对象字节输入流）</h3><p>构造器：</p><ul><li><code>public ObjectInputStream(InputStream out)</code>创建对象字节输入流，包装基础字节输入流</li></ul><p>方法：</p><ul><li><code>publi final Object readObject(Object o)</code>把对象从文件中读出来</li></ul><p>在测试类中添加对象字节输入流内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectIOTest</span>  &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建java对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-comment">//创建一个对象字节流输出流管道包装成原始字节输出流</span><br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>));<br><br>                <span class="hljs-comment">//创建一个对象字节输入流包装原始输入流</span><br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6\\src\\aa.txt&quot;</span>));<br>                )&#123;<br>           <span class="hljs-comment">//序列化对象到文件中</span><br>            objectOutputStream.writeObject(user);<br>            System.out.println(<span class="hljs-string">&quot;Written object&quot;</span>);<br><br>           <span class="hljs-comment">//从文件中读取对象信息</span><br>            <span class="hljs-type">User</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (User)objectInputStream.readObject();<br>            System.out.println(o);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/a45.png"></p><p><strong>如果我们不想将password参与序列化</strong>，可以进行如下操作<br><img src="/img/a46.png"><br>结果如下：<br><img src="/img/a47.png"></p><p><strong>补充：ArrayList集合也可以实现序列化</strong><br><img src="/img/a49.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ArrayList&lt;<span class="hljs-keyword">User</span>&gt; users = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br><span class="hljs-keyword">User</span> u = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(&quot;aaaaa&quot;,<span class="hljs-number">18</span>,&quot;admin&quot;,&quot;aaaaaa&quot;);<br><span class="hljs-keyword">User</span> u1 = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(&quot;bbbbb&quot;,<span class="hljs-number">23</span>,&quot;admin&quot;,&quot;bbbbbb&quot;);<br>users.<span class="hljs-keyword">add</span>(u);<br>users.<span class="hljs-keyword">add</span>(u1);<br>objectOutputStream.writeObject(users);<br><br>ArrayList&lt;<span class="hljs-keyword">User</span>&gt; users1 = (ArrayList&lt;<span class="hljs-keyword">User</span>&gt;) objectInputStream.readObject();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(users1);<br></code></pre></td></tr></table></figure><p><img src="/img/a48.png"></p><h2 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h2><p>IO框架封装了java提供的对文件、数据进行操作的代码，对外提供了更简单的方式来对文件进行操作，对数据进行读写</p><h3 id="Commons-io框架"><a href="#Commons-io框架" class="headerlink" title="Commons-io框架"></a>Commons-io框架</h3><p>由apache开源基金组织提供的一组有关IO操作的小框架，目的是提高IO流的开发效率<br>FileUtils类提供的部分方法：</p><ul><li><code>public static void copyFile(File srcFile,File destFile)</code>复制文件内容</li><li><code>public static void copyDirectory(File srcDir, File destDir)</code>复制文件夹内容</li><li><code>public static void deleteDirectory(File directory)</code>删除文件夹</li><li><code>public static String readFileToString(File file, String charsetName)</code>按照指定编码将文件的内容输出</li><li><code>public static void writeStringToFile(File file, String data, Charset charset, boolean append)</code>按照指定编码写数据到文件中，是否追加</li></ul><p>IOUtils类提供的部分方法：</p><ul><li><code>public static int copy(InputStream inputStream, OutputStream outputStream)</code>复制文件内容</li><li><code>public static int copy(Reader reader, Writer writer)</code>复制文件内容</li><li><code>public static void write(String data, OutputStream output, String charsetName)</code>按照指定编码写数据到文件中</li></ul><p>首先下载commons-io的bin压缩包，将其中的commons-io-2.19.0.jar添加到模块中<br><img src="/img/a50.png"><br><strong>注意：当把jar包复制到lib文件夹下后需要做以下操作：这样才可以使用jar包的类</strong><br><img src="/img/a51.png"></p><p>方法的使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">package</span> com.itheima.class5;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.io.IOUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-type">String</span>[] args) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        <span class="hljs-type">FileUtils</span>.copyFile(new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>aaa.txt&quot;</span>),new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>a.txt&quot;</span>));<br><br>        <span class="hljs-type">FileUtils</span>.copyDirectory(new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;C:<span class="hljs-subst">\\</span>Users<span class="hljs-subst">\\</span>hhd0717<span class="hljs-subst">\\</span>Documents<span class="hljs-subst">\\</span>PPT模板&quot;</span>),new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;F:<span class="hljs-subst">\\</span>ppt&quot;</span>));<br><br>        <span class="hljs-type">FileUtils</span>.deleteDirectory(new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;F:<span class="hljs-subst">\\</span>ppt&quot;</span>));<br><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-type">FileUtils</span>.readFileToString(new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>aaa.txt&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br>        <span class="hljs-type">FileUtils</span>.writeStringToFile(new <span class="hljs-type">File</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>a.txt&quot;</span>), <span class="hljs-string">&quot;oop-app6&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>,<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">IOUtils</span>.copy(new <span class="hljs-type">FileInputStream</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>aaa.txt&quot;</span>),new <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>a.txt&quot;</span>));<br><br>        <span class="hljs-type">FileReader</span> reader <span class="hljs-operator">=</span> new <span class="hljs-type">FileReader</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>bb.txt&quot;</span>);<br>        <span class="hljs-type">FileWriter</span> writer <span class="hljs-operator">=</span> new <span class="hljs-type">FileWriter</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>a3.txt&quot;</span>);<br>        <span class="hljs-type">IOUtils</span>.copy(reader, writer);<br>        writer.flush();<br><br>        <span class="hljs-type">IOUtils</span>.write(<span class="hljs-string">&quot;aaaa&quot;</span>, new <span class="hljs-type">FileOutputStream</span>(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>aa.txt&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>        <span class="hljs-comment">//java自带的方法</span><br>        <span class="hljs-comment">//复制文件内容，目标文件必须是不存在的</span><br>        <span class="hljs-type">Files</span>.copy(<span class="hljs-type">Path</span>.of(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>bb.txt&quot;</span>),<span class="hljs-type">Path</span>.of(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>a2.txt&quot;</span>));<br>        <br>        <span class="hljs-comment">//将文件内容读出来</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-type">Files</span>.readString(<span class="hljs-type">Path</span>.of(<span class="hljs-string">&quot;oop-app6<span class="hljs-subst">\\</span>src<span class="hljs-subst">\\</span>aa.txt&quot;</span>)));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java考题</title>
    <link href="/2025/05/24/java29/"/>
    <url>/2025/05/24/java29/</url>
    
    <content type="html"><![CDATA[<h1 id="综合练习1"><a href="#综合练习1" class="headerlink" title="综合练习1"></a>综合练习1</h1><p>需求：给100个囚犯赋上1-200的随机编号，且不重复，让他们依次站好，位置从1到100，监狱长处理位置为奇数的囚犯，直到最后只剩下一个囚犯是幸运者。</p><p>每个囚犯是一个对象，利用面向对象的思想<br>Person.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">class1</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Integer</span> location;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Person</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_">Integer</span> code, <span class="hljs-title class_">Integer</span> location) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">location</span> = location;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getCode</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCode</span>(<span class="hljs-params"><span class="hljs-title class_">Integer</span> code</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">code</span> = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getLocation</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> location;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setLocation</span>(<span class="hljs-params"><span class="hljs-title class_">Integer</span> location</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">location</span> = location;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;code=&#x27;&quot;</span> + code + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, location=&#x27;&quot;</span> + location + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Test.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.class1;<br><br>import java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br><br>    <span class="hljs-comment">//创建所有囚犯的集合,共享</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Person&gt; peoples = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>       Random random = <span class="hljs-keyword">new</span> Random();<br>       <span class="hljs-comment">//给100个囚犯赋值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//在循环内部，因为每次都要重新生成</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-built_in">int</span> number = random.nextInt(<span class="hljs-number">200</span>)+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(isUse(number)) &#123;<br>                    Person person = <span class="hljs-keyword">new</span> Person(number,i);<br>                    peoples.<span class="hljs-keyword">add</span>(person);<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//若该编号可以使用，则跳出while(true)循环，</span><br>                    <span class="hljs-comment">// 否则就一直重新生成编号，直到该编号可以使用</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(peoples);<br><br>        <span class="hljs-comment">//准备处置位置是奇数的囚犯，直到最后剩下一个，所以这个就是循环条件</span><br>        <span class="hljs-keyword">while</span>(peoples.size() &gt; <span class="hljs-number">1</span> ) &#123;<br>            <span class="hljs-comment">//处置位置是奇数的囚犯，也就是留下位置是偶数的囚犯，把他们放到新集合中,这样索引也会依次更新</span><br>            List&lt;Person&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-comment">//1 2 3 4</span><br>            <span class="hljs-comment">//0 1 2 3(索引)</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;i &lt; peoples.size();i+=<span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//索引加2对应的编号是偶数</span><br>                <span class="hljs-comment">//注意：这里判断的是囚犯的索引，而囚犯的索引并不是一成不变的，第一轮结束后会更新索引，</span><br>                <span class="hljs-comment">// 不能使用getLocation,因为它是不变的，他只是记录原始位置</span><br>                temp.<span class="hljs-keyword">add</span>(peoples.<span class="hljs-keyword">get</span>(i));<br>            &#125;<br>            peoples=temp;<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(peoples.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>));<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//判断该编号是否重复</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> boolean <span class="hljs-title">isUse</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> code</span>)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Person people : peoples) &#123;<br>            <span class="hljs-keyword">if</span>(people.getCode() == code)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a87.png"><br><strong>注意：break的使用，while循环的使用以及思维的练习：善于转变思维，将需求拆解成能够完成的代码</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java集合进阶与Stream</title>
    <link href="/2025/05/20/java28/"/>
    <url>/2025/05/20/java28/</url>
    
    <content type="html"><![CDATA[<h1 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h1><ul><li>单列集合Collection：每个元素只包含一个值，是接口，支持泛型<code>Collection&lt;E&gt;</code><ul><li>List集合：添加的元素是有序的（存和取 集合中的元素的顺序是相同的）、可重复、有索引<ul><li>ArrayList：有序，重复，有索引</li><li>LinkedList：有序，重复，有索引</li></ul></li><li>Set集合：添加的元素是无序的（存和取 集合中的元素的顺序是不同的）、不重复、无索引<ul><li>HashSet：无序，不重复，无索引</li><li>LinkedHashSet：<strong>有序</strong>，不重复，无索引</li><li>TreeSet:<strong>按照大小默认升序排序</strong>，不重复，无索引</li></ul></li></ul></li><li>双列集合Map：每个元素包含两个值（键值对）</li></ul><p>简单了解：</p><p>ArrayList：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CollectionTest1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        ArrayList&lt;<span class="hljs-type">Integer</span>&gt; list = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-number">3</span>);<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(list);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a40.png"><br>HashSet：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class2;<br><br>import java.util.HashSet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CollectionTest1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        HashSet&lt;String&gt; <span class="hljs-keyword">set</span> = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java1&quot;</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java2&quot;</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java1&quot;</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java2&quot;</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java4&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a41.png"><br>如上图所示，HashSet不可重复，且是无序的，添加元素的顺序与取出的顺序相反，所以也不可以根据索引来取值。</p><h1 id="Collection单列集合"><a href="#Collection单列集合" class="headerlink" title="Collection单列集合"></a>Collection单列集合</h1><h2 id="Collection的常用方法"><a href="#Collection的常用方法" class="headerlink" title="Collection的常用方法"></a>Collection的常用方法</h2><p><code>Collection&lt;E&gt;</code>的所有子类集合的方法都继承自它，所以我们直接了解它的方法即可。</p><ul><li><p><code>public static boolean add()</code>：添加元素</p></li><li><p><code>public void clear()</code>:清空元素</p></li><li><p><code>public boolean isEmpty()</code>:判断集合是否为空</p></li><li><p><code>public int size()</code>:获取集合的长度</p></li><li><p><code>public boolean contains(Object o)</code>:判断是否包含某元素</p></li><li><p><code>public boolean remove(Object o)</code>:删掉某元素</p></li><li><p><code>public Object[] toArray()</code>:将集合转换为数组</p><ul><li>转成的数组是Object类型的原因是：在泛型中编译时会出现擦除现象，如下图所示：</li></ul><p><img src="/image/a42.png"></p></li><li><p><code>public boolean addAll(Collection&lt;? extends E&gt; c)</code>:将一个集和的所有数据拷贝到另一个集合中</p></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs abnf">package com.ithema.class2<span class="hljs-comment">;</span><br><br>import java.util.ArrayList<span class="hljs-comment">;</span><br>import java.util.Arrays<span class="hljs-comment">;</span><br>import java.util.Collection<span class="hljs-comment">;</span><br>import java.util.HashSet<span class="hljs-comment">;</span><br><br>public class CollectionTest1 &#123;<br>    public static void main(String[] args) &#123;<br>        Collection&lt;String&gt; c1 <span class="hljs-operator">=</span> new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br><br>        c1.add(<span class="hljs-string">&quot;A&quot;</span>)<span class="hljs-comment">;</span><br>        c1.add(<span class="hljs-string">&quot;B&quot;</span>)<span class="hljs-comment">;</span><br>        c1.add(<span class="hljs-string">&quot;C&quot;</span>)<span class="hljs-comment">;</span><br>        c1.add(<span class="hljs-string">&quot;C&quot;</span>)<span class="hljs-comment">;</span><br>        c1.add(<span class="hljs-string">&quot;D&quot;</span>)<span class="hljs-comment">;</span><br>        System.out.println(c1)<span class="hljs-comment">;</span><br><br>        System.out.println(c1.isEmpty())<span class="hljs-comment">;</span><br><br>        System.out.println(c1.size())<span class="hljs-comment">;</span><br><br>        System.out.println(c1.contains(<span class="hljs-string">&quot;A&quot;</span>))<span class="hljs-comment">;</span><br><br>        System.out.println(c1.remove(<span class="hljs-string">&quot;B&quot;</span>))<span class="hljs-comment">;</span><br>        System.out.println(c1)<span class="hljs-comment">;</span><br><br>        Object[] arr <span class="hljs-operator">=</span> c1.toArray()<span class="hljs-comment">;</span><br>        System.out.println(Arrays.toString(arr))<span class="hljs-comment">;</span><br><br>        c1.clear()<span class="hljs-comment">;</span><br>        System.out.println(c1)<span class="hljs-comment">;</span><br><br>        System.out.println(<span class="hljs-string">&quot;===========================&quot;</span>)<span class="hljs-comment">;</span><br>        Collection&lt;String&gt; c2 <span class="hljs-operator">=</span> new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br>        c2.add(<span class="hljs-string">&quot;Java1&quot;</span>)<span class="hljs-comment">;</span><br>        c2.add(<span class="hljs-string">&quot;Java2&quot;</span>)<span class="hljs-comment">;</span><br>        Collection&lt;String&gt; c3 <span class="hljs-operator">=</span> new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br>        c3.add(<span class="hljs-string">&quot;Java3&quot;</span>)<span class="hljs-comment">;</span><br>        c3.add(<span class="hljs-string">&quot;Java4&quot;</span>)<span class="hljs-comment">;</span><br>        c2.addAll(c3)<span class="hljs-comment">;</span><br>        System.out.println(c2)<span class="hljs-comment">;</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a43.png"></p><h2 id="Collection的遍历方式"><a href="#Collection的遍历方式" class="headerlink" title="Collection的遍历方式"></a>Collection的遍历方式</h2><p>Collection的子类的遍历方法也都继承自它</p><h3 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h3><p>迭代器是用来遍历集合的专用方法（数组没有迭代器）</p><ul><li>Collection集合获取迭代器的方法：<code>Iterator&lt;E&gt; iterator()</code>，返回集合的迭代器对象，该迭代器对象默认指向当前集合的第一个元素</li><li>Iterator迭代器中的常用方法：<ul><li><code>bollean hasNext()</code>:询问当前位置是否有元素存在</li><li><code>E next()</code>:获取当前元素，并同时将迭代器对象指向下一个元素</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Collection&lt;String&gt; c1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        c1.add(<span class="hljs-string">&quot;Java1&quot;</span>);<br>        c1.add(<span class="hljs-string">&quot;Java2&quot;</span>);<br>        c1.add(<span class="hljs-string">&quot;Java3&quot;</span>);<br>        c1.add(<span class="hljs-string">&quot;Java4&quot;</span>);<br>        System.out.println(c1);<br><br>        <span class="hljs-comment">//遍历集合</span><br>        <span class="hljs-comment">//从集合对象中获取迭代对象</span><br>        Iterator&lt;String&gt; i1 = c1.iterator();<br>        <span class="hljs-keyword">while</span> (i1.hasNext()) &#123;<span class="hljs-comment">//问一次</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> i1.next();<span class="hljs-comment">//取一次</span><br>            System.out.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a44.png"><br><strong>注意：遍历元素时，一定要使用hasNext问一次，二则会出现bug,如下图所示：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">while</span> (i1.hasNext()) &#123;<span class="hljs-comment">//问一次</span><br><span class="hljs-comment">//取三次</span><br>    System.out.<span class="hljs-keyword">println</span>(i1.<span class="hljs-keyword">next</span>());<br>    System.out.<span class="hljs-keyword">println</span>(i1.<span class="hljs-keyword">next</span>());<br>    System.out.<span class="hljs-keyword">println</span>(i1.<span class="hljs-keyword">next</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a45.png"></p><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p><code>for(元素的数据类型 变量名：数组或集合)&#123;&#125;</code></p><ul><li>增强for循环既可以用来遍历数组，也可以用来遍历集合</li><li>增强for循环遍历集合本质是迭代器遍历集合的简化写法</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CollectionTest2 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Collection&lt;String&gt; c1 = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java1&quot;);<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java2&quot;);<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java3&quot;);<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java4&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(c1);<br>        <br>        <span class="hljs-keyword">for</span>(String s : c1) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>        &#125;<br><br>        String[] <span class="hljs-keyword">array</span> = &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;&#125;;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.toString(<span class="hljs-keyword">array</span>));<br>        <span class="hljs-keyword">for</span> (String s : <span class="hljs-keyword">array</span>) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a46.png"></p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p><code>default void forEach(Consumer&lt;? super T&gt; action)</code>:结合Lambda表达式遍历集合</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">function</span>.Consumer;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CollectionTest2 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Collection&lt;String&gt; c1 = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java1&quot;);<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java2&quot;);<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java3&quot;);<br>        c1.<span class="hljs-keyword">add</span>(&quot;Java4&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(c1);<br>        <br>        c1.<span class="hljs-keyword">forEach</span>(<span class="hljs-built_in">new</span> Consumer&lt;String&gt;() &#123;<br>            @Override<br>            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> accept(String s) &#123;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>            &#125;<br>        &#125;);<br><br>        //简化一<br>        c1.<span class="hljs-keyword">forEach</span>((String s)-&gt;&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>        &#125;);<br><br>        //简化二<br>        c1.<span class="hljs-keyword">forEach</span>(s-&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s));<br><br>        //最终简化结果<br>        c1.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例：遍历集合中的自定义对象"><a href="#案例：遍历集合中的自定义对象" class="headerlink" title="案例：遍历集合中的自定义对象"></a>案例：遍历集合中的自定义对象</h2><p>需求：展示多部电影的信息</p><p>Movie.java:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.ithema.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> actor;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Movie</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Movie</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">String</span> actor, <span class="hljs-type">double</span> score)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.actor = actor;<br>        <span class="hljs-keyword">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getActor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> actor;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setActor</span><span class="hljs-params">(<span class="hljs-type">String</span> actor)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.actor = actor;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getScore</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.score = score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CollectionTest3.java:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CollectionTest3 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        //<span class="hljs-number">1.</span>创建一个集合容器负责存储多部电影对象<br>        Collection&lt;Movie&gt; movies = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        movies.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Movie(&quot;《肖申克的救赎》&quot;, &quot;Harry Potter&quot;, <span class="hljs-number">9.9</span>));<br>        movies.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Movie(&quot;霸王别姬&quot;, &quot;Harry Potter&quot;, <span class="hljs-number">9.9</span>));<br><br>        <span class="hljs-keyword">for</span> (Movie movie : movies) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;电影名称：&quot;+movie.getName());<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;电影主角：&quot;+movie.getActor());<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;电影得分&quot;+movie.getScore());<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;==============&quot;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a47.png"><br><strong>注意：集合中存入的是元素对象的地址，对象拿到地址通过get方法获取具体数据</strong></p><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><h3 id="List的常用方法"><a href="#List的常用方法" class="headerlink" title="List的常用方法"></a>List的常用方法</h3><p>List系列的集合有以下特点：有序，重复，有索引，因为支持索引，所以多了很多与索引相关的方法，Collection的功能List也同样继承了。</p><ul><li><code>public void add()</code>：添加元素</li><li><code>public void add(int index,E element)</code>:在某索引index处添加元素E</li><li><code>public E remove(int index)</code>:删除索引index处的元素，并返回该元素</li><li><code>public E get(int index)</code>:返回集合中指定位置的元素</li><li><code>public E set(int index,E element)</code>:修改索引位置处的元素，修改成功后返回原来的数据</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class2;<br><br>import java.util.ArrayList;<br>import java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ListTest1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//创建一个ArrayList集合对象</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//经典：多态写法</span><br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;C&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(list);<br><br>        <span class="hljs-comment">//在某个索引位置插入元素</span><br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;D&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(list);<br><br>        <span class="hljs-comment">//根据索引删除元素，返回被删除元素</span><br>        System.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">remove</span>(<span class="hljs-number">2</span>));<br>        System.<span class="hljs-keyword">out</span>.println(list);<br><br>        <span class="hljs-comment">//返回集合中指定位置的元素</span><br>        System.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//修改索引位置处的元素，修改成功后返回原来的数据</span><br>        list.<span class="hljs-keyword">set</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;E&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="List的遍历方式"><a href="#List的遍历方式" class="headerlink" title="List的遍历方式"></a>List的遍历方式</h3><ul><li>for循环遍历</li><li>迭代器</li><li>增强for循环</li><li>lambda表达式</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> ListTest2 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        //创建一个ArrayList集合对象<br>        List&lt;String&gt; list = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();//经典：多态写法<br>        list.<span class="hljs-keyword">add</span>(&quot;A&quot;);<br>        list.<span class="hljs-keyword">add</span>(&quot;B&quot;);<br>        list.<span class="hljs-keyword">add</span>(&quot;C&quot;);<br>        list.<span class="hljs-keyword">add</span>(&quot;C&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(list);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===for循环遍历===&quot;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(i));<br>        &#125;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===迭代器遍历===&quot;);<br>        Iterator&lt;String&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(it.next());<br>        &#125;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===增强for循环===&quot;);<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br>        &#125;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===lambda表达式遍历===&quot;);<br>        list.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a49.png"></p><p>List系列集合底层采用的数据结构不同，应用场景也不同</p><h3 id="ArrayList集合的底层原理"><a href="#ArrayList集合的底层原理" class="headerlink" title="ArrayList集合的底层原理"></a>ArrayList集合的底层原理</h3><ul><li>基于数组实现<ul><li>数组根据索引查询数据快</li><li>数组删除效率低,因为需要将后面的数据往前移</li><li>数组添加效率低，因为需要把后面很多的数据后移，再添加元素；或者也可能需要进行数组的扩容</li></ul></li><li>①利用无参构造器创建的集合，会在底层创建一个默认长度为0的数组</li><li>②添加第一个数组时，底层会创建一个新的长度为10的数组</li><li>③存满时，会扩容1.5倍，也就是扩容到15</li><li>④如果一次添加多个元素，1.5倍还放不下，则新创建数组的长度以实际为准。长度10存满后，又一次性添加11个数据，这时就会创建一个长度为21的数组</li></ul><p><strong>所以ArrayList集合也存在查询快，增删慢的特点。</strong></p><h3 id="ArrayList集合适合的应用场景"><a href="#ArrayList集合适合的应用场景" class="headerlink" title="ArrayList集合适合的应用场景"></a>ArrayList集合适合的应用场景</h3><ul><li>ArrayList集合适合：根据随机索引查询数据，或者数据量不是很大时</li><li>ArrayList集合不适合：数据量大的同时，又要频繁进行增删操作</li></ul><h3 id="LinkedList集合的底层原理"><a href="#LinkedList集合的底层原理" class="headerlink" title="LinkedList集合的底层原理"></a>LinkedList集合的底层原理</h3><ul><li>基于双链表实现<ul><li>链表的结点是独立的对象，在内存中是不连续的，每个结点包含数据值和下一个结点的地址</li><li>链表查询慢，无论查询哪个数据都要从头开始找</li><li>链表增删相对快，只需改变结点地址的指向，不存在扩容情况</li></ul></li></ul><p><strong>注意：单链表只能从前往后读取数据，而双链表还可以从后往前读取，所以双链表相对于单链表查询更快些，且双链表有头结点地址和尾结点地址，对首尾结点的增删改查的速度是极快的</strong></p><h3 id="LinkedList集合的新增方法"><a href="#LinkedList集合的新增方法" class="headerlink" title="LinkedList集合的新增方法"></a>LinkedList集合的新增方法</h3><ul><li><code>public void addFirst(E e)</code>在该列表开头插入指定的元素</li><li><code>public void addLast(E e)</code>在指定的元素追加到此列表的末尾</li><li><code>public E getFirst()</code>返回列表中的第一个元素</li><li><code>public E getLast()</code>返回列表中的最后一个元素</li><li><code>public E removeFirst()</code>从此列表中删除第一个元素</li><li><code>public E removeLast()</code>从此列表中删除最后一个元素</li></ul><h3 id="LinkedList集合适合的应用场景"><a href="#LinkedList集合适合的应用场景" class="headerlink" title="LinkedList集合适合的应用场景"></a>LinkedList集合适合的应用场景</h3><ul><li>设计队列，队列瓶头和瓶尾都不封闭<br>因为双链表对首尾结点的增删改查的速度是极快的，用来设计队列是非常合适的，队列的特点是先进先出，通常用在生活中的叫号系统。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedListTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建队列</span><br>        LinkedList&lt;<span class="hljs-type">String</span>&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-comment">//入队：入队入到队列尾部</span><br>        queue.<span class="hljs-built_in">addLast</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>        queue.<span class="hljs-built_in">addLast</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>        queue.<span class="hljs-built_in">addLast</span>(<span class="hljs-string">&quot;c&quot;</span>);<br>        queue.<span class="hljs-built_in">addLast</span>(<span class="hljs-string">&quot;d&quot;</span>);<br><br>        System.out.<span class="hljs-built_in">println</span>(queue);<br>        <br>        <span class="hljs-comment">//出队：先进的先出去</span><br>        System.out.<span class="hljs-built_in">println</span>(queue.<span class="hljs-built_in">removeFirst</span>());<br>        System.out.<span class="hljs-built_in">println</span>(queue.<span class="hljs-built_in">removeFirst</span>());<br>        System.out.<span class="hljs-built_in">println</span>(queue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a50.png"></p><ul><li>设计栈，栈瓶头不封闭，瓶尾封闭<br>栈的特点：后进先出，先进后出。最先进去的数据称为栈底元素，最后进去的称为栈顶元素。数据进入栈模型的过程称为：压&#x2F;进栈（push）；数据离开栈的过程称为：弹&#x2F;出栈（pop）。例如手枪的弹夹就可以使用栈实现。<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> LinkedListTest2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//创建栈</span><br>        LinkedList&lt;String&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-comment">//入栈：入栈入到栈尾部</span><br><span class="hljs-comment">//        stack.addFirst(&quot;1子弹&quot;);</span><br><span class="hljs-comment">//        stack.addFirst(&quot;2子弹&quot;);</span><br><span class="hljs-comment">//        stack.addFirst(&quot;3子弹&quot;);</span><br><span class="hljs-comment">//        stack.addFirst(&quot;4子弹&quot;);</span><br>        stack.<span class="hljs-keyword">push</span>(<span class="hljs-string">&quot;1子弹&quot;</span>);<br>        stack.<span class="hljs-keyword">push</span>(<span class="hljs-string">&quot;2子弹&quot;</span>);<br>        stack.<span class="hljs-keyword">push</span>(<span class="hljs-string">&quot;3子弹&quot;</span>);<br>        stack.<span class="hljs-keyword">push</span>(<span class="hljs-string">&quot;4子弹&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(stack);<br><br>        <span class="hljs-comment">//出栈：后进先出</span><br><span class="hljs-comment">//        System.out.println(stack.removeFirst());</span><br><span class="hljs-comment">//        System.out.println(stack.removeFirst());</span><br>        System.out.<span class="hljs-keyword">println</span>(stack.<span class="hljs-keyword">pop</span>());<br>        System.out.<span class="hljs-keyword">println</span>(stack.<span class="hljs-keyword">pop</span>());<br>        System.out.<span class="hljs-keyword">println</span>(stack);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/image/a51.png"></li></ul><h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set集合：添加的元素是无序的（存和取 集合中的元素的顺序是不同的）、不重复、无索引</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> SetTest1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br>        //创建<span class="hljs-keyword">Set</span>集合<br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; set1 = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();//创建一个HashSet的集合对象，经典代码,无序，不重复，无索引<br>        set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>        set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">32</span>);<br>        set1.<span class="hljs-keyword">add</span>(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set1);//只无序一次<br><br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; set2 = <span class="hljs-built_in">new</span> LinkedHashSet&lt;&gt;();//有序，不重复，无索引<br>        set2.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        set2.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        set2.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>        set2.<span class="hljs-keyword">add</span>(<span class="hljs-number">32</span>);<br>        set2.<span class="hljs-keyword">add</span>(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set2);<br><br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; set3 = <span class="hljs-built_in">new</span> TreeSet&lt;&gt;();//默认从小到大排序，不重复，无索引<br>        set3.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        set3.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>        set3.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>);<br>        set3.<span class="hljs-keyword">add</span>(<span class="hljs-number">32</span>);<br>        set3.<span class="hljs-keyword">add</span>(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(set3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a52.png"><br>Set集合的常用方法基本上就是Collection常用方法，无新增。</p><p><strong>哈希值</strong></br></p><ul><li>哈希值就是一个int类型的数值，Java中每个对象都有一个哈希值</li><li>Java中所有对象都可以调用Object类提供的hashCode方法，返回该对象自己的哈希值。<code>public int hashCode()</code></li><li>同一个对象多次调用hashCode方法返回的哈希值是相同的</li><li>不同对象，它们的哈希值一般不相同但也可能会相同（哈希碰撞），因为int型是有范围的，但这种情况是极少数的</li></ul><p>Student.java:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.ithema.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SetTest2.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SetTest2</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">12</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">19</span>);<br>        System.<span class="hljs-keyword">out</span>.println(s1.hashCode());<br>        System.<span class="hljs-keyword">out</span>.println(s1.hashCode());<br>        System.<span class="hljs-keyword">out</span>.println(s2.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a53.png"></p><h3 id="HashSet集合的底层原理"><a href="#HashSet集合的底层原理" class="headerlink" title="HashSet集合的底层原理"></a>HashSet集合的底层原理</h3><ul><li>基于哈希表实现</li><li>哈希表是一种增删改查数据性能都比较好的数据结构</li></ul><h4 id="JDK8之前HashSet集合的底层原理基于哈希表：数组-链表"><a href="#JDK8之前HashSet集合的底层原理基于哈希表：数组-链表" class="headerlink" title="JDK8之前HashSet集合的底层原理基于哈希表：数组+链表"></a>JDK8之前HashSet集合的底层原理基于哈希表：<strong>数组+链表</strong></h4><ul><li>底层 创建一个默认长度16，默认加载因子0.75的数组，数组名table。<br><img src="/image/a54.png"></li><li>使用元素的哈希值对数组长度求余计算出应存入的位置。</li><li>判断要插入的位置是否为null，为null则直接存入</li><li>若不为null，则调用equals方法比较 内部的属性值，如果一样，则不存，不一样则将新元素存入数组，将老元素挂在新元素下面形成链表结构。<br><img src="/image/a55.png"></li><li>扩容：当数组里面存了16*0.75 &#x3D;12个元素的时候，数组就会扩容为原先的两倍</li></ul><h4 id="JDK8之后HashSet集合的底层原理基于哈希表：数组-链表-红黑树"><a href="#JDK8之后HashSet集合的底层原理基于哈希表：数组-链表-红黑树" class="headerlink" title="JDK8之后HashSet集合的底层原理基于哈希表：数组+链表+红黑树"></a>JDK8之后HashSet集合的底层原理基于哈希表：<strong>数组+链表+红黑树</strong></h4><ul><li>当链表长度&gt;8时，且数组长度&gt;&#x3D;64时，自动将链表转成红黑树。这样的好处就是比较次数减少，小的往左边比较，大的往右边比较。进一步提高操作数据的性能。<br><img src="/image/a56.png"></li></ul><h4 id="补充：数据结构"><a href="#补充：数据结构" class="headerlink" title="补充：数据结构"></a>补充：数据结构</h4><p><strong>普通二叉树</strong></p><ul><li><p>二叉树的任意节点的度&lt;&#x3D;2；度指的是每一个节点的子节点数量；</p></li><li><p>树高指树的总层数</p></li><li><p>跟节点：最顶层的结点</p></li><li><p>二叉树的每个节点都由四部分组成，父节点地址，值，左子节点地址，右子节点地址<br><img src="/image/a57.png"><br><strong>二叉查找树（二叉排序树）</strong></p></li><li><p>规则:小的存左边，大的存右边，一样的不存<br>但是会出现问题，如下图所示：这就相当于链式结构，查询效率降低<br><img src="/image/q56.png"><br>所以就有了平衡二叉树的出现<br><img src="/image/a58.png"></p></li><li><p>红黑树<br>红黑树是可以自平衡的二叉树，是一种增删改查数据性能相对都较好的结构。<br><img src="/image/a59.png"></p></li></ul><h4 id="HashSet集合去除重复对象"><a href="#HashSet集合去除重复对象" class="headerlink" title="HashSet集合去除重复对象"></a>HashSet集合去除重复对象</h4><p>当内容相同的对象添加到HashSet集合中，它是不会去掉重复的对象的<br><img src="/image/a60.png"><br>这是因为不同的对象哈希值不同，算出来的位置有不同，要想实现只保留一个重复的对象，需要做一些处理：是它们哈希值相同，且内容相同。这就需要重写equals方法和hashCode方法，如下：</p><p>Student.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">class2</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Objects</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>() &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_">String</span> name, int age) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//只有两个对象内容一样就返回true</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">equals</span>(<span class="hljs-params"><span class="hljs-title class_">Object</span> o</span>) &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || <span class="hljs-title function_">getClass</span>() != o.<span class="hljs-title function_">getClass</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-title class_">Student</span> student = (<span class="hljs-title class_">Student</span>) o;<br>        <span class="hljs-keyword">return</span> age == student.<span class="hljs-property">age</span> &amp;&amp; <span class="hljs-title class_">Objects</span>.<span class="hljs-title function_">equals</span>(name, student.<span class="hljs-property">name</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//只有两个对象内容一样返回的哈希值就一样</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">hashCode</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Objects</span>.<span class="hljs-title function_">hash</span>(name, age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HashSetTes.java:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> HashSetTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">Set</span>&lt;Student&gt; <span class="hljs-keyword">set</span> = <span class="hljs-built_in">new</span> HashSet&lt;&gt;();<br>        Student s1 = <span class="hljs-built_in">new</span> Student(&quot;张三&quot;,<span class="hljs-number">12</span>);<br>        Student s2 = <span class="hljs-built_in">new</span> Student(&quot;李四&quot;,<span class="hljs-number">19</span>);<br>        Student s3 = <span class="hljs-built_in">new</span> Student(&quot;张三&quot;,<span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s1.hashCode());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s3.hashCode());<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(s1);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(s2);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(s3);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a61.png"></p><h3 id="LinkedHashSet集合的底层原理"><a href="#LinkedHashSet集合的底层原理" class="headerlink" title="LinkedHashSet集合的底层原理"></a>LinkedHashSet集合的底层原理</h3><ul><li>基于哈希表（数组、链表、红黑树）实现</li><li>它的每个元素都额外多一个双链表的机制记录它前后元素的位置<br><img src="/image/a62.png"></li></ul><p><strong>LinkedHashSet集合内记录的很多多西，所以它是用增加内存的方式来实现有序的特点的。</strong></p><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul><li>不重复、无索引、可排序（默认升序排序）</li><li>底层基于红黑树实现的排序:将第一个存入的数据作为树的根节点，剩下的数据依次于根节点比较放置在左子节点或右子节点</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TreeSetTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-keyword">set</span> = <span class="hljs-built_in">new</span> TreeSet&lt;&gt;();<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-number">50</span>);<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a63.png"><br><strong>注意：对于数值类型：Integer、Double，默认按照数值本身的大小进行升序排序； 对于字符串类型，默认按照首字母的编号升序排序； 对于自定义的类型如Student对象，TreeSet默认无法直接排序,如下图所示</strong><br><img src="/image/a64.png"></p><ul><li>解决方法一：让自定义的类实现ComparaTo方法，重写里面的compareTo方法来指定比较规则。<br>Student.java:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">class2</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Objects</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;<span class="hljs-title class_">Student</span>&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">compareTo</span>(<span class="hljs-params"><span class="hljs-title class_">Student</span> o</span>) &#123;<span class="hljs-comment">//升序排序</span><br>        <span class="hljs-comment">//this   o </span><br>        <span class="hljs-comment">// 前面大于后面返回正整数</span><br>        <span class="hljs-comment">// 前面小于后面返回负整数</span><br>        <span class="hljs-comment">// 前面等于后面返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> - o.<span class="hljs-property">age</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>() &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_">String</span> name, int age) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>TreeSetTest.java:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TreeSetTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">Set</span>&lt;Student&gt; <span class="hljs-keyword">set</span> = <span class="hljs-built_in">new</span> TreeSet&lt;&gt;();<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;sss&quot;,<span class="hljs-number">12</span>));<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;ssss&quot;,<span class="hljs-number">13</span>));<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;qqqq&quot;,<span class="hljs-number">79</span>));<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;pppp&quot;,<span class="hljs-number">79</span>));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a65.png"><br><strong>看到结果发现最后一个对象被舍去了，因为它和第三个的age相同，TreeSet就将其舍掉了</strong></p><ul><li>解决方法二：通过调用TreeSet集合有参构造器<code>public TreeSet(Comparaor&lt;? super E&gt; comparator)</code>，可以设置Comparator对象（比较器对象，用于指定比较规则。）<br>Student.java不变，也可以不实现ComparaTo方法。<br>TreeSetTest.java:</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class2;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> TreeSetTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br><br>        <span class="hljs-keyword">Set</span>&lt;Student&gt; <span class="hljs-keyword">set</span> = <span class="hljs-built_in">new</span> TreeSet&lt;&gt;(<span class="hljs-built_in">new</span> Comparator&lt;Student&gt;() &#123;<br>            @Override<br>            <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> compare(Student o1, Student o2) &#123;<br>                <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();<br>            &#125;<br>        &#125;);<br><br><br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;sss&quot;,<span class="hljs-number">12</span>));<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;ssss&quot;,<span class="hljs-number">13</span>));<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;qqqq&quot;,<span class="hljs-number">79</span>));<br>        <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> Student(&quot;pppp&quot;,<span class="hljs-number">79</span>));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：如果Student类实现了ComparaTo方法，同时测试类也调用TreeSet集合有参构造器，若两者的比较体不同，则会就近按照测试类中TreeSet集合的参构造器中的比较体来比较。</strong></p><h2 id="集合的并发修改异常"><a href="#集合的并发修改异常" class="headerlink" title="集合的并发修改异常"></a>集合的并发修改异常</h2><p>使用迭代器遍历集合时，同时又在删除集合中的数据，程序就会出现并发修改异常的错误</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs abnf">package com.ithema.class2<span class="hljs-comment">;</span><br><br>import java.util.ArrayList<span class="hljs-comment">;</span><br>import java.util.Iterator<span class="hljs-comment">;</span><br>import java.util.List<span class="hljs-comment">;</span><br>import java.util.Scanner<span class="hljs-comment">;</span><br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        List&lt;String&gt; list <span class="hljs-operator">=</span> new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br>        list.add(<span class="hljs-string">&quot;李爱华&quot;</span>)<span class="hljs-comment">;</span><br>        list.add(<span class="hljs-string">&quot;李四&quot;</span>)<span class="hljs-comment">;</span><br>        list.add(<span class="hljs-string">&quot;独家&quot;</span>)<span class="hljs-comment">;</span><br>        list.add(<span class="hljs-string">&quot;李三&quot;</span>)<span class="hljs-comment">;</span><br>        list.add(<span class="hljs-string">&quot;下闸&quot;</span>)<span class="hljs-comment">;</span><br>        list.add(<span class="hljs-string">&quot;网易宝&quot;</span>)<span class="hljs-comment">;</span><br>        System.out.println(list)<span class="hljs-comment">;</span><br><br>        //找出集合中全部带李的名字，并删除<br>        //使用迭代器删除<br>        Iterator&lt;String&gt; it <span class="hljs-operator">=</span> list.iterator()<span class="hljs-comment">;</span><br>        while (it.hasNext()) &#123;<br>            String s <span class="hljs-operator">=</span> it.next()<span class="hljs-comment">;</span><br>            if(s.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>                //list.remove(s)<span class="hljs-comment">;//使用集合自带的删除操作一定会出现并发操作</span><br>                it.remove()<span class="hljs-comment">;//每删除一个数据，在底层执行i--</span><br>            &#125;<br>        &#125;<br>        System.out.println(list)<span class="hljs-comment">;</span><br><br><br>        //使用for循环正着删除，没闪出一个数据需要加上i--<br>        for (int i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; list.size(); i++) &#123;</span><br>            String s <span class="hljs-operator">=</span> list.get(i)<span class="hljs-comment">;</span><br>            if(s.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>                list.remove(i)<span class="hljs-comment">;</span><br>                i--<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;<br>        System.out.println(list)<span class="hljs-comment">;</span><br><br><br>        //使用for循倒着删除<br>        for(int i <span class="hljs-operator">=</span> list.size()-<span class="hljs-number">1</span><span class="hljs-comment">; i &gt;= 0; i--)&#123;</span><br>            String s <span class="hljs-operator">=</span> list.get(i)<span class="hljs-comment">;</span><br>            if(s.contains(<span class="hljs-string">&quot;李&quot;</span>))&#123;<br>                list.remove(i)<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;<br>        System.out.println(list)<span class="hljs-comment">;</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a67.png"><br>如上述代码所示，删除集合中的数据有三种方法，在使用迭代器删除方法时需要注意不可以使用集合自带的remove方法，因为每删除一个数据，集合的长度就会变短，所以要使用迭代器自带的方法来删除。否则会出现以下错误：<br><img src="/image/a66.png"><br><strong>注意：使用lambda和增强for循环的方式不能实现删除集合中某特定元素的操作，因为无法进行i–的操作</strong></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><ul><li>可变参数就是一种特殊参数，定义在方法、构造器的形参列表中，格式为<code>数据类型...参数名称</code></li><li>特点：可以不传数据给它，可以传一个或者同时传多个数据给它，也可以传一个数据给它</li><li>好处：常常用来灵活的接收数据</li><li><strong>注意事项：</strong><ul><li>可变参数在方法内部就是一个数组</li><li>一个形参列表中只有一个可变参数</li><li>可变参数必须放在形参列表的最后面</li></ul></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class3;<br><br>import java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ParamTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        test();<span class="hljs-comment">//不添加数据</span><br>        test(<span class="hljs-number">10</span>);<span class="hljs-comment">//添加一个数据</span><br>        test(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<span class="hljs-comment">//添加多个数据</span><br>        test(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;);<span class="hljs-comment">//添加一个数组</span><br>        test2(<span class="hljs-number">10</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//1、一个形参列表中只能有一个可变参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>...nums</span>)</span>&#123;<br>        <span class="hljs-comment">//可变参数在方法内部，本质就是一个数组</span><br>        System.<span class="hljs-keyword">out</span>.println(nums.length);<br>        System.<span class="hljs-keyword">out</span>.println(Arrays.toString(nums));<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;============&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//2、可变参数必须放到形参列表的最后面</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">int</span>...nums</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(age);<br>        System.<span class="hljs-keyword">out</span>.println(nums.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a68.png"></p><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p>Collections是一个用来操作集合的工具类</p><ul><li>为集合批量添加数据<code>public static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T...elements)</code>。<code>?</code>是数据的类型，<code>? super T</code>表示T是?的子类，<code>elements</code>必须是T类型</li><li>打乱List集合中的元素顺序<code>public static void shuffle(List&lt;?&gt; list)</code></li><li>对List集合中的元素进行升序排序<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code></li><li>对List集合中的元素，按照比较器对象指定的规则进行排序<code>public static &lt;T&gt; void sort(List&lt;T&gt; list, Cpmparator&lt;? super T&gt; c)</code></li></ul><p>Student.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class3;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<span class="hljs-comment">//升序排序</span><br>        <span class="hljs-comment">//this   o</span><br>        <span class="hljs-comment">// 前面大于后面返回正整数</span><br>        <span class="hljs-comment">// 前面小于后面返回负整数</span><br>        <span class="hljs-comment">// 前面等于后面返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CollectionsTest.java:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.ithema.class3;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> CollectionsTest &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//批量往集合中添加数据</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Collections.addAll(list, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>);<br>        System.out.<span class="hljs-keyword">println</span>(list);<br><br>        <span class="hljs-comment">//打乱集合的元素顺序</span><br>        Collections.shuffle(list);<br>        System.out.<span class="hljs-keyword">println</span>(list);<br><br><br>        <span class="hljs-comment">//对集合中的数据进行升序排序</span><br>        List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list1.add(<span class="hljs-number">9</span>);<br>        list1.add(<span class="hljs-number">4</span>);<br>        list1.add(<span class="hljs-number">2</span>);<br>        list1.add(<span class="hljs-number">1</span>);<br>        Collections.<span class="hljs-keyword">sort</span>(list1);<br>        System.out.<span class="hljs-keyword">println</span>(list1);<br><br>        List&lt;Student&gt; list2 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list2.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">190.8</span>));<br>        list2.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">189.9</span>));<br>        <span class="hljs-comment">//按照学生类中的年龄升序排序</span><br>        Collections.<span class="hljs-keyword">sort</span>(list2);<br>        System.out.<span class="hljs-keyword">println</span>(list2);<br><br><br>        <span class="hljs-comment">//按照分数排序</span><br>        Collections.<span class="hljs-keyword">sort</span>(list2, <span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>            @Override<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> compare(Student o1, Student o2) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">Double</span>.compare(o1.getScore(), o2.getScore());<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//对以上代码进行简化</span><br>        Collections.<span class="hljs-keyword">sort</span>(list2,(o1, o2) -&gt; <span class="hljs-keyword">Double</span>.compare(o1.getScore(), o2.getScore()));<br>        System.out.<span class="hljs-keyword">println</span>(list2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a69.png"><br><strong>注意：score是double型，而compare方法的返回值是int型，所以这里使用的是<code>Double.compare</code>方法，传入两个double型数据，进行排序。</strong></p><h2 id="综合案例：斗地主游戏"><a href="#综合案例：斗地主游戏" class="headerlink" title="综合案例：斗地主游戏"></a>综合案例：斗地主游戏</h2><p>业务需求</p><ul><li>总共54张牌</li><li>点数：3、4、5、6、7、8、9、10、J、Q、K、A、2</li><li>花色：❤、♣、⭐、❀</li><li>大小王：🐱、🐅</li><li>点数分别组合四种花色，大小王各一张</li><li>斗地主：发出51张牌，剩下3张作为底牌<br>Card.java:</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">class3</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> <span class="hljs-built_in">number</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> color;<br>    <span class="hljs-keyword">private</span> int size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Card</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Card</span>(<span class="hljs-title class_">String</span> <span class="hljs-built_in">number</span>, <span class="hljs-title class_">String</span> color, int size) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> = <span class="hljs-built_in">number</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getNumber</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setNumber</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">number</span> = <span class="hljs-built_in">number</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getColor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setColor</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> color</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getSize</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSize</span>(<span class="hljs-params">int size</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> color + <span class="hljs-built_in">number</span> ;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Romm.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class3;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span> &#123;<br>    <span class="hljs-comment">//以恶个房间有一副牌</span><br>    <span class="hljs-keyword">private</span> List&lt;Card&gt; allCard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Card&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Room</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//做出54张牌，存入到集合中</span><br>        <span class="hljs-comment">//a、点数：个数确定，类型确定</span><br>        String[] number = &#123; <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;;<br>        <span class="hljs-comment">//b、花色，个数确定，类型确定</span><br>        String[] color = &#123;<span class="hljs-string">&quot;❤&quot;</span>, <span class="hljs-string">&quot;♣&quot;</span>, <span class="hljs-string">&quot;⭐&quot;</span>, <span class="hljs-string">&quot;❀&quot;</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//c、遍历点数、再遍历花色</span><br>        <span class="hljs-keyword">for</span> (String s : number) &#123;<br>            size ++;<br>            <span class="hljs-keyword">for</span> (String c : color) &#123;<br>                <span class="hljs-comment">//得到一张牌</span><br>                <span class="hljs-type">Card</span> <span class="hljs-variable">card</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(s, c, size);<br>                allCard.add(card);<span class="hljs-comment">//存入牌</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//存入大小王</span><br>        <span class="hljs-comment">//小王</span><br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;🐅&quot;</span>, ++size);<br>        <span class="hljs-type">Card</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Card</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;🐱&quot;</span>,++size);<br>        Collections.addAll(allCard, c1, c2);<span class="hljs-comment">//批量加入数据</span><br>        System.out.println(<span class="hljs-string">&quot;新牌&quot;</span>+ allCard);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 游戏启动方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1、洗牌：打乱</span><br>        Collections.shuffle(allCard);<br>        System.out.println(<span class="hljs-string">&quot;洗牌后&quot;</span>+allCard);<br><br>        <span class="hljs-comment">//2.发牌，首先肯定要定义三个玩家，List(ArrayList),因为玩家手中的牌可以重复，必须要有索引</span><br>        List&lt;Card&gt; cards1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Card&gt; cards2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Card&gt; cards3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//正式发牌给三个玩家，依次发出51张牌，，剩余3张牌</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; allCard.size() - <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">Card</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> allCard.get(i);<br>            <span class="hljs-comment">//判断把牌发给谁</span><br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>                cards1.add(c);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>)&#123;<br>                cards2.add(c);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>)&#123;<br>                cards3.add(c);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//3、对3个玩家的牌进行排序</span><br>        sortCards(cards1);<br>        sortCards(cards2);<br>        sortCards(cards3);<br><br>        <span class="hljs-comment">//4、看牌</span><br>        System.out.println(<span class="hljs-string">&quot;1&quot;</span>+cards1);<br>        System.out.println(<span class="hljs-string">&quot;2&quot;</span>+cards2);<br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>+cards3);<br>        List&lt;Card&gt; lastCards = allCard.subList(allCard.size() - <span class="hljs-number">3</span>, allCard.size());<span class="hljs-comment">//从51截取到54，包前不包后</span><br>        System.out.println(<span class="hljs-string">&quot;底牌&quot;</span>+lastCards);<br>        cards1.addAll(lastCards);<span class="hljs-comment">//cards1抢到地主，将底牌分配给他</span><br>        sortCards(cards1);<br>        System.out.println(<span class="hljs-string">&quot;1抢到地主&quot;</span>+cards1);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortCards</span><span class="hljs-params">(List&lt;Card&gt; cards)</span> &#123;<br>        Collections.sort(cards, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Card&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Card o1, Card o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.getSize()-o2.getSize();<span class="hljs-comment">//升序排序</span><br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：List有一个方法<code>subList(int startindex, int lastindex)</code>可截取集合起始索引到结束索引的元素（包前不包后）</strong></p><p>GameDemo.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GameDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        - 总共54张牌</span><br><span class="hljs-comment">//                - 点数：3、4、5、6、7、8、9、10、J、Q、K、A、2</span><br><span class="hljs-comment">//                - 花色：❤、♣、⭐、🌼</span><br><span class="hljs-comment">//        - 大小王：🐱、🐅</span><br><span class="hljs-comment">//        - 点数分别组合四种花色，大小王各一张</span><br><span class="hljs-comment">//                - 斗地主：发出51张牌，剩下3张作为底牌</span><br><br>        <span class="hljs-comment">//1.牌类</span><br>        <span class="hljs-comment">//2.房间</span><br>        <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>();<br>        <span class="hljs-comment">//3.启动游戏</span><br>        room.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a70.png"></p><h1 id="Map双列集合"><a href="#Map双列集合" class="headerlink" title="Map双列集合"></a>Map双列集合</h1><ul><li>Map集合称为双列集合，格式：{key1&#x3D;value1,key2&#x3D;value2,key3&#x3D;value3,…},一次需要存一对数据作为一个元素</li><li>每个元素称为键值对（对象），Map集合也称为“键值对集合”</li><li>Map所有的key是不能重复的，但值可以重复，键和值是一一对应的</li><li><strong>Map系列集合的特点都是由键决定的，值只是一个附属品，值不做要求</strong><ul><li>HashMap（由键决定特点）：无序、不重复无索引（用得最多）</li><li>LinkedHashMap（由键决定特点）：有序、不重复、无索引</li><li>TreeMap（由键决定特点）：按照键大小默认升序排序、不重复、无索引</li></ul></li></ul><p><img src="/image/a71.png" alt="HashMap"><br><img src="/image/a72.png" alt="LinkedHashMap"><br><img src="/image/a73.png" alt="TreeMap"><br><strong>注意：TreeMap集合中的键值对不能为空，否则无法排序</strong></p><h3 id="Map集合常用方法"><a href="#Map集合常用方法" class="headerlink" title="Map集合常用方法"></a>Map集合常用方法</h3><p>Map的所有子类集合的方法都继承自它，所以我们直接了解它的方法即可。</p><ul><li><code>public int size()</code>获得集合长度</li><li><code>public boolean isEmpty()</code>判断集合是否为空</li><li><code>public V get(Object key)</code>获得键位key的值，并返回值</li><li><code>public V put(K key, V value)</code>往集合中添加键和值，并返回值</li><li><code>public void clear()</code>清空集合</li><li><code>public V remove(Object key)</code>删除键为key的元素，返回改键对应的值</li><li><code>public void clear()</code>清空集合</li><li><code>public boolean containsKey(Object key)</code>判断是否存在键key</li><li><code>public boolean containsValue(Object value)</code>判断是否包含值value</li><li><code>public Set&lt;K&gt; keySet()</code>获取集合全部键,返回Set集合</li><li><code>public Collection&lt;V&gt; values()</code>获取集合全部值,返回Collection集合</li><li><code>public void putAll(Map&lt;? extends K,? extends V&gt; m)</code>将一个map中的元素全部复制到另一个map集合中</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MapTest &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Map&lt;<span class="hljs-type">Integer</span>,String&gt; map = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();//按照键升序、不重复、无索引<br>        map.put(<span class="hljs-number">1</span>, &quot;A&quot;);<br>        map.put(<span class="hljs-number">2</span>, &quot;B&quot;);<br>        map.put(<span class="hljs-number">3</span>, &quot;C&quot;);<br>        map.put(<span class="hljs-number">3</span>, &quot;D&quot;);<br>        map.put(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.size());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.isEmpty());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.<span class="hljs-keyword">get</span>(<span class="hljs-number">4</span>));<br><br>        map.remove(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.containsKey(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.containsValue(&quot;0&quot;));<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.keySet());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map.<span class="hljs-keyword">values</span>());<br><br>        Map&lt;<span class="hljs-type">Integer</span>,String&gt; map2 = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>        map2.put(<span class="hljs-number">1</span>, &quot;A&quot;);<br>        map2.put(<span class="hljs-number">2</span>, &quot;B&quot;);<br>        map2.put(<span class="hljs-number">4</span>, &quot;C&quot;);<br>        map.putAll(map2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map2);<br>        <br>        map.clear();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a74.png"></p><h2 id="Map的遍历方式"><a href="#Map的遍历方式" class="headerlink" title="Map的遍历方式"></a>Map的遍历方式</h2><ul><li>键找值：先获取键，依据键找值</li><li>键值对：将键和值看成整体，采用的方法<code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>,将每一组键值对封装成一个对象，再得到每组的键和值</li><li>Lambda表达式：<code>default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</code></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">Set</span>;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">function</span>.BiConsumer;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MapTest1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Map&lt;String,<span class="hljs-type">Double</span>&gt; map = <span class="hljs-built_in">new</span> HashMap&lt;&gt;();<br>        map.put(&quot;key1&quot;, <span class="hljs-number">23.9</span>);<br>        map.put(&quot;key2&quot;, <span class="hljs-number">27.9</span>);<br>        map.put(&quot;key3&quot;, <span class="hljs-number">30.9</span>);<br>        map.put(&quot;key4&quot;, <span class="hljs-number">40.9</span>);<br>        map.put(&quot;key5&quot;, <span class="hljs-number">50.9</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(map);<br><br>        //键找值遍历<br>        <span class="hljs-keyword">Set</span>&lt;String&gt; keys = map.keySet();<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-keyword">value</span> = map.<span class="hljs-keyword">get</span>(key);<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(key+&quot;---&gt;&quot;+<span class="hljs-keyword">value</span>);<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;=========================&quot;);<br><br>        //键值对遍历<br>        <span class="hljs-keyword">Set</span>&lt;Map.Entry&lt;String, <span class="hljs-type">Double</span>&gt;&gt; entries = map.entrySet();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, <span class="hljs-type">Double</span>&gt; entry : entries) &#123;<br>            String key = entry.getKey();<br>            <span class="hljs-type">double</span> <span class="hljs-keyword">value</span> = entry.getValue();<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(key+&quot;---&gt;&quot;+<span class="hljs-keyword">value</span>);<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;==========================&quot;);<br><br>        <br>        <br>        //Lambda<br>        map.<span class="hljs-keyword">forEach</span>(<span class="hljs-built_in">new</span> BiConsumer&lt;String, <span class="hljs-type">Double</span>&gt;() &#123;<br>            @Override<br>            <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> accept(String k, <span class="hljs-type">Double</span> v) &#123;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(k+&quot;---&gt;&quot;+v);<br>            &#125;<br>        &#125;);<br>        //以上代码简化<br>        map.<span class="hljs-keyword">forEach</span>((k, v) -&gt; <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(k+&quot;---&gt;&quot;+v));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：快捷键Ctrl+Alt+v可以自动补全变量名称</strong></p><p>Map的forEach方法的源码如下，其实就是利用第二种遍历方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span>(<span class="hljs-params">BiConsumer&lt;? <span class="hljs-variable language_">super</span> K, ? <span class="hljs-variable language_">super</span> V&gt; action</span>) &#123;<br>    <span class="hljs-title class_">Objects</span>.<span class="hljs-title function_">requireNonNull</span>(action);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Map</span>.<span class="hljs-property">Entry</span>&lt;K, V&gt; entry : <span class="hljs-title function_">entrySet</span>()) &#123;<br>        K k;<br>        V v;<br>        <span class="hljs-keyword">try</span> &#123;<br>            k = entry.<span class="hljs-title function_">getKey</span>();<br>            v = entry.<span class="hljs-title function_">getValue</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">IllegalStateException</span> ise) &#123;<br>            <span class="hljs-comment">// this usually means the entry is no longer in the map.</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>(ise);<br>        &#125;<br>        action.<span class="hljs-title function_">accept</span>(k, v);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map集合的案例-统计投票人数"><a href="#Map集合的案例-统计投票人数" class="headerlink" title="Map集合的案例-统计投票人数"></a>Map集合的案例-统计投票人数</h2><p>需求：某班级有80名学生，决定取秋游，班长确定了{A、B、C、D}四个经典，现在要统计班上学生对各个经典的投票人数。</p><ul><li>把80个学生选择的景点数据放到集合中</li><li>利用Map统计每个景点的投票人数，（key景点  value次数）</li><li>遍历80个景点数据</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest3</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1、把80个学生选择的景点数据放到集合中</span><br>        List&lt;<span class="hljs-type">String</span>&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-type">String</span>[] selects = &#123;<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>&#125;;<br>        Random r = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80</span>; i++) &#123;<br>            <span class="hljs-type">int</span> index = r.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">4</span>);<span class="hljs-comment">//随机获取索引：0 1 2 3</span><br>            list.<span class="hljs-built_in">add</span>(selects[index]);<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(list);<br><br>        <span class="hljs-comment">//2、统计每个景点的投票人数，（景点  次数）</span><br>        Map&lt;<span class="hljs-type">String</span>, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        <span class="hljs-comment">//3、遍历80个景点数据</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">String</span> s : list) &#123;<br>            <span class="hljs-keyword">if</span>(map.<span class="hljs-built_in">containsKey</span>(s)) &#123;<br>                <span class="hljs-comment">//说明景点之前统计过，次数+1，存到map集合中</span><br>                map.<span class="hljs-built_in">put</span>(s, map.<span class="hljs-built_in">get</span>(s)<span class="hljs-number">+1</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//说明景点第一次统计，次数为1，存到map集合中</span><br>                map.<span class="hljs-built_in">put</span>(s, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a75.png"></p><h2 id="HashMap的底层原理"><a href="#HashMap的底层原理" class="headerlink" title="HashMap的底层原理"></a>HashMap的底层原理</h2><ul><li>与HashSet原理一样，基于哈希表实现，Set集合中的元素只要键不要值，HashSet的源码如下：<br><img src="/image/a76.png"><br>其所有原理查看上面HashSet集合的原理，对于集合中相同的自定义的对象（如类对象），HashMap没法实现不重复，也和HashSet一样在类中重写equels和hashCode方法，如下图所示：<br><img src="/image/a77.png"></li></ul><h2 id="LinkedHashMap的底层原理"><a href="#LinkedHashMap的底层原理" class="headerlink" title="LinkedHashMap的底层原理"></a>LinkedHashMap的底层原理</h2><ul><li>与LinkedHashSet原理一样，基于哈希表实现，Set集合中的元素只要键不要值，LinkedHashSet的源码如下：<br><img src="/image/a78.png"></li><li>LinkedHashMap将键和值封装成Entry对象，其余原理查看上面LinkedHashSet集合的原理。</li></ul><h2 id="TreeMap的底层原理"><a href="#TreeMap的底层原理" class="headerlink" title="TreeMap的底层原理"></a>TreeMap的底层原理</h2><ul><li>与TreeMap的原理一样，Set集合中的元素只要键不要值，TreeSet的源码如下：<br><img src="/image/a79.png"></li><li>对自定义对象的排序，也与TreeMap集合相同，有两种方法，一种使类实现Comparable接口重写CompareTo方法，另一种在测试类中使用有参构造器如下图所示,创建Comparator比较器对象，指定比较规则<br><img src="/image/a80.png"></li></ul><h1 id="集合的嵌套"><a href="#集合的嵌套" class="headerlink" title="集合的嵌套"></a>集合的嵌套</h1><p>需求：键：省；值：省包括的所有市</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">MapList</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">//装所有省和对应的市</span><br>        Map&lt;<span class="hljs-keyword">String</span>, List&lt;<span class="hljs-keyword">String</span>&gt;&gt; cities = <span class="hljs-keyword">new</span><span class="hljs-type"></span> HashMap&lt;&gt;();<br><br>        List&lt;<span class="hljs-keyword">String</span>&gt; cities1 = <span class="hljs-keyword">new</span><span class="hljs-type"></span> ArrayList&lt;&gt;();<br>        Collections.addAll(cities1, <span class="hljs-string">&quot;忻州市&quot;</span>,<span class="hljs-string">&quot;太原市&quot;</span>,<span class="hljs-string">&quot;大同市&quot;</span>);<span class="hljs-comment">//批量添加市</span><br>        cities.put(<span class="hljs-string">&quot;山西省&quot;</span>,cities1);<br><br>        List&lt;<span class="hljs-keyword">String</span>&gt; cities2 = <span class="hljs-keyword">new</span><span class="hljs-type"></span> ArrayList&lt;&gt;();<br>        Collections.addAll(cities2, <span class="hljs-string">&quot;安国市&quot;</span>,<span class="hljs-string">&quot;保定市&quot;</span>,<span class="hljs-string">&quot;张家口市&quot;</span>);<br>        cities.put(<span class="hljs-string">&quot;河北省&quot;</span>,cities2);<br><br>        List&lt;<span class="hljs-keyword">String</span>&gt; cities3 = <span class="hljs-keyword">new</span><span class="hljs-type"></span> ArrayList&lt;&gt;();<br>        Collections.addAll(cities3, <span class="hljs-string">&quot;朝阳区&quot;</span>,<span class="hljs-string">&quot;丰台区&quot;</span>,<span class="hljs-string">&quot;海淀区&quot;</span>);<br>        cities.put(<span class="hljs-string">&quot;北京&quot;</span>,cities3);<br><br>        System.out.println(cities);<br><br>        <span class="hljs-comment">//根据省遍历市</span><br>        System.out.println(cities.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;山西省&quot;</span>));<br><br>        List&lt;<span class="hljs-keyword">String</span>&gt; hebei = cities.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;河北省&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">String</span> s : <span class="hljs-type">hebei</span>)&#123;<br>            System.out.println(s);<br>        &#125;<br>        <br>        <span class="hljs-comment">//遍历所有省和市</span><br>        cities.forEach((k,v)-&gt; System.out.println(k+<span class="hljs-string">&quot;--&gt;&quot;</span>+v));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a81.png"></p><h1 id="JDK8新特性：Stream"><a href="#JDK8新特性：Stream" class="headerlink" title="JDK8新特性：Stream"></a>JDK8新特性：Stream</h1><ul><li>Stream也叫Stream流，是JDK8新增的一套API（java.util.stream.*），可以用于操作集合或者数组的数据</li><li>Stream流大量地结合了Lambda的语法风格来编程，提供更加强大、简单的方式操作集合或者数组中的数据，代码更简洁，可读性更好</li></ul><p>需求：把一个集合中所有以“张”开头，且是3个字的元素存储到一个新的集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张思&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;张亮亮&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br><br>        <span class="hljs-comment">//原始方法</span><br>        List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String s : list)&#123;<br>            <span class="hljs-keyword">if</span>(s.startsWith(<span class="hljs-string">&quot;张&quot;</span>) &amp;&amp; s.length() == <span class="hljs-number">3</span>)&#123;<br>                list1.add(s);<br>            &#125;<br>        &#125;<br>        System.out.println(list1);<br><br>        <span class="hljs-comment">//正则表达式</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * - ^张：固定以“张”开头。</span><br><span class="hljs-comment">         * - [\\u4e00-\\u9fa5]&#123;2&#125;：匹配2个汉字（\\u4e00-\\u9fa5是Unicode汉字范围，Java中需双反斜杠转义）。</span><br><span class="hljs-comment">         * - $：确保字符串结束，避免多余字符。</span><br><span class="hljs-comment">         */</span><br>        List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String s : list)&#123;<br>            <span class="hljs-keyword">if</span>(s.matches(<span class="hljs-string">&quot;^张[\\u4e00-\\u9fa5]&#123;2&#125;$&quot;</span>))&#123;<br>                list2.add(s);<br>            &#125;<br>        &#125;<br>        System.out.println(list2);<br><br>        <span class="hljs-comment">//stream流</span><br>        List&lt;String&gt; list3 = list.stream().filter(s -&gt; s.startsWith(<span class="hljs-string">&quot;张&quot;</span>))<br>                .filter(a -&gt; a.length() == <span class="hljs-number">3</span>).toList();<br>        System.out.println(list3);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a82.png"></p><h2 id="Stream流的使用步骤"><a href="#Stream流的使用步骤" class="headerlink" title="Stream流的使用步骤"></a>Stream流的使用步骤</h2><ul><li>首先先有一个数据源（集合或数组），获取Stream流（代表一条流水线）</li><li>调用流水线的各种方法（过滤、排序、去重…）对数据进行处理</li><li>获得处理的结果，遍历、统计、收集到一个新集合中返回</li></ul><h3 id="获取Stream流"><a href="#获取Stream流" class="headerlink" title="获取Stream流"></a>获取Stream流</h3><ul><li>获取集合的Stream流<code>default Steam&lt;E&gt; stream()</code></li><li>获取数组的Stream流<code>public static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)</code>或者<code>public static&lt;T&gt; Stream&lt;T&gt; of(T...values)</code></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.<span class="hljs-built_in">Stream</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest2</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        List&lt;<span class="hljs-type">String</span>&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Collections.<span class="hljs-built_in">addAll</span>(list,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张思&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;张亮亮&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-built_in">Stream</span>&lt;<span class="hljs-type">String</span>&gt; stream = list.<span class="hljs-built_in">stream</span>();<br><br>        Set&lt;<span class="hljs-type">String</span>&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>        Collections.<span class="hljs-built_in">addAll</span>(set,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张思&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;张亮亮&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-built_in">Stream</span>&lt;<span class="hljs-type">String</span>&gt; stream1 = set.<span class="hljs-built_in">stream</span>();<br>        stream<span class="hljs-number">1.f</span>ilter(s -&gt; s.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;张&quot;</span>)).forEach(System.out::println);<br><br><br>        Map&lt;<span class="hljs-type">String</span>, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-number">1</span>);<br>        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">2</span>);<br>        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-number">3</span>);<br>        map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-number">4</span>);<br>        Set&lt;<span class="hljs-type">String</span>&gt; strings = map.<span class="hljs-built_in">keySet</span>();<br>        <span class="hljs-built_in">Stream</span>&lt;<span class="hljs-type">String</span>&gt; stream2 = strings.<span class="hljs-built_in">stream</span>();<br><br>        Collection&lt;Integer&gt; v = map.<span class="hljs-built_in">values</span>();<br>        <span class="hljs-built_in">Stream</span>&lt;Integer&gt; stream3 = v.<span class="hljs-built_in">stream</span>();<br><br>        Set&lt;Map.Entry&lt;<span class="hljs-type">String</span>,Integer&gt;&gt; set2 = map.<span class="hljs-built_in">entrySet</span>();<br>        <span class="hljs-built_in">Stream</span>&lt;Map.Entry&lt;<span class="hljs-type">String</span>,Integer&gt;&gt; kv2 = set<span class="hljs-number">2.</span><span class="hljs-built_in">stream</span>();<br>        kv<span class="hljs-number">2.f</span>ilter(s -&gt; s.<span class="hljs-built_in">getKey</span>().<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;1&quot;</span>)).forEach(s -&gt; System.out.<span class="hljs-built_in">println</span>(s.<span class="hljs-built_in">getKey</span>()+<span class="hljs-string">&quot;---&gt;&quot;</span>+s.<span class="hljs-built_in">getValue</span>()));<br><br><br>        <span class="hljs-type">String</span>[] arr = &#123;<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;张思&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;张亮亮&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>&#125;;<br>        <span class="hljs-built_in">Stream</span>&lt;<span class="hljs-type">String</span>&gt; stream4 = Arrays.<span class="hljs-built_in">stream</span>(arr);<br>        <span class="hljs-built_in">Stream</span>&lt;<span class="hljs-type">String</span>&gt; arr1 = <span class="hljs-built_in">Stream</span>.<span class="hljs-built_in">of</span>(arr);<br>        <br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a83.png"></p><h3 id="Stream流常见的中间方法"><a href="#Stream流常见的中间方法" class="headerlink" title="Stream流常见的中间方法"></a>Stream流常见的中间方法</h3><ul><li><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>过滤符合条件的数据</li><li><code>Stream&lt;T&gt; sorted()</code>默认升序排序</li><li><code>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator)</code>存在自定义对象的情况下，按照有参构造器中定义的排序规则排序</li><li><code>Stream&lt;T&gt; limit(long maxSize)</code>取前面maxSize个数据</li><li><code>Stream&lt;T&gt; skip(long n)</code>跳过前面n个数据，取剩余的数据</li><li><code>Stream(T) distinct()</code>去除重复的数据</li><li><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</code>映射成其他数据输出</li><li><code>static &lt;T&gt; Stream&lt;T&gt; concat(Stream a, Stream b)</code>将两个Stream流合并成一个Stream流</li></ul><p>Student.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Student&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Student o)</span> &#123;<span class="hljs-comment">//升序排序</span><br>        <span class="hljs-comment">//this   o</span><br>        <span class="hljs-comment">// 前面大于后面返回正整数</span><br>        <span class="hljs-comment">// 前面小于后面返回负整数</span><br>        <span class="hljs-comment">// 前面等于后面返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Double.compare(score, student.score) == <span class="hljs-number">0</span> &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age, score);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>StreamTest3.java：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs livescript">package com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest3</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>        List&lt;Double&gt; <span class="hljs-keyword">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Collections.addAll(<span class="hljs-keyword">list</span>, <span class="hljs-number">19.0</span>, <span class="hljs-number">222.0</span>, <span class="hljs-number">323.0</span>, <span class="hljs-number">42.4</span>, <span class="hljs-number">511.3</span>, <span class="hljs-number">622.2</span>);<br>        System.out.println(<span class="hljs-string">&quot;==========找出大于等于60的分数并升序排序========&quot;</span>);<br>        <span class="hljs-regexp">//找出大于等于60的分数并升序排序</span><br><span class="hljs-regexp">        list.stream().filter(s -&gt; s &gt;= 60).sorted().forEach(System.out::println);</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        List&lt;Student&gt; students = new ArrayList&lt;&gt;();</span><br><span class="hljs-regexp">        Student s1 = new Student(&quot;张三&quot;,12,19.9);</span><br><span class="hljs-regexp">        Student s6 = new Student(&quot;张三&quot;,12,19.9);</span><br><span class="hljs-regexp">        Student s2 = new Student(&quot;李四&quot;,22,19.5);</span><br><span class="hljs-regexp">        Student s3 = new Student(&quot;王五&quot;,72,16.6);</span><br><span class="hljs-regexp">        Student s4 = new Student(&quot;孙七&quot;,32,15.9);</span><br><span class="hljs-regexp">        Student s5 = new Student(&quot;赵六&quot;,52,19.44);</span><br><span class="hljs-regexp">        Collections.addAll(students, s1, s2, s3, s4, s5, s6);</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        System.out.println(&quot;===========找出年龄大于等于23，小于等于70，并降序输出=========&quot;);</span><br><span class="hljs-regexp">        //</span>找出年龄大于等于<span class="hljs-number">23</span>，小于等于<span class="hljs-number">70</span>，并降序输出<br>        students.stream().filter(s -&gt; s.getAge() &gt;= <span class="hljs-number">23</span>).filter(s -&gt; s.getAge() &lt;= <span class="hljs-number">70</span>)<br>                .sorted<span class="hljs-function"><span class="hljs-params">((o1,o2) -&gt; o2.getAge()-o1.getAge())</span>.<span class="hljs-title">forEach</span><span class="hljs-params">(System.out::println)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;============取出分数最高的前三名学生，并输出==========&quot;</span>)</span>;</span><br><span class="hljs-function">        //取出分数最高的前三名学生，并输出</span><br><span class="hljs-function">        <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">sorted</span><span class="hljs-params">((o1,o2) -&gt; Double.compare(o2.getScore(),o1.getScore()))</span></span><br><span class="hljs-function">                .<span class="hljs-title">limit</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span>.<span class="hljs-title">forEach</span><span class="hljs-params">(System.out::println)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;============取出分数倒数的2名学生，并输出==========&quot;</span>)</span>;</span><br><span class="hljs-function">        //取出分数倒数的2名学生，并输出</span><br><span class="hljs-function">        <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">sorted</span><span class="hljs-params">((o1,o2) -&gt; Double.compare(o2.getScore(),o1.getScore()))</span></span><br><span class="hljs-function">                .<span class="hljs-title">skip</span><span class="hljs-params">(students.size()-<span class="hljs-number">2</span>)</span>.<span class="hljs-title">forEach</span><span class="hljs-params">(System.out::println)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;=========请找出分数超过19的的学生的名字，去除重复名字并输出=========&quot;</span>)</span>;</span><br><span class="hljs-function">        //请找出分数超过19的的学生的名字，去除重复名字并输出</span><br><span class="hljs-function">        <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19.0</span>)</span>.<span class="hljs-title">map</span><span class="hljs-params">(s -&gt; s.getName())</span></span><br><span class="hljs-function">                .<span class="hljs-title">distinct</span><span class="hljs-params">()</span>.<span class="hljs-title">forEach</span><span class="hljs-params">(System.out::println)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;==========请找出分数超过19的的学生，去除重复对象并输出==========&quot;</span>)</span>;</span><br><span class="hljs-function">        //请找出分数超过19的的学生，去除重复对象并输出</span><br><span class="hljs-function">        <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19.0</span>)</span></span><br><span class="hljs-function">                .<span class="hljs-title">distinct</span><span class="hljs-params">()</span>.<span class="hljs-title">forEach</span><span class="hljs-params">(System.out::println)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-string">&quot;============合并两个stream流==========&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">Stream</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-title">tre1</span> = <span class="hljs-title">Stream</span>.<span class="hljs-title">of</span><span class="hljs-params">(<span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;1111&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">Stream</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-title">tre2</span> = <span class="hljs-title">Stream</span>.<span class="hljs-title">of</span><span class="hljs-params">(<span class="hljs-string">&quot;444&quot;</span>, <span class="hljs-string">&quot;33333&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">Stream</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-title">concat</span> = <span class="hljs-title">Stream</span>.<span class="hljs-title">concat</span><span class="hljs-params">(tre1, tre2)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">concat</span>.<span class="hljs-title">forEach</span><span class="hljs-params">(System.out::println)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/image/a84.png"><img src="/image/a85.png"><br><strong>注意：要去掉重复的整个对象，要重写Equels方法和hashCode方法，确保内容相同的情况下哈希值也相同这样才能够删除。</strong></p><h3 id="Stream流常用的终结方法"><a href="#Stream流常用的终结方法" class="headerlink" title="Stream流常用的终结方法"></a>Stream流常用的终结方法</h3><p>终结方法指调用完成后，不会返回新Stream了，无法再使用流</p><ul><li><code>void forEach(Customer action)</code>遍历对象</li><li><code>long count()</code>统计数量</li><li><code>Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator)</code>找出最大的对象</li><li><code>Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator)</code>找出最小的对象</li><li><strong>收集Stream流</strong>：把Stream流操作后的结果转回到集合或数组中返回。<ul><li><code>R collect(Collector collector)</code></li><li><code>Object[] toArray()</code></li></ul></li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs livescript">package com.ithema.class4;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.<span class="hljs-keyword">function</span>.IntFunction;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamTest4</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-literal">void</span> main(<span class="hljs-built_in">String</span>[] args) &#123;<br>        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">19.9</span>);<br>        Student s6 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">12</span>,<span class="hljs-number">19.9</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-number">19.5</span>);<br>        Student s3 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">72</span>,<span class="hljs-number">16.6</span>);<br>        Student s4 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;孙七&quot;</span>,<span class="hljs-number">32</span>,<span class="hljs-number">15.9</span>);<br>        Collections.addAll(students, s1, s2, s3, s4, s6);<br><br>        <br>        <span class="hljs-regexp">//请计算出分数超过19的学生人数</span><br><span class="hljs-regexp">        long size = students.stream().filter(s -&gt; s.getScore() &gt; 19).count();</span><br><span class="hljs-regexp">        System.out.println(size);</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">        </span><br><span class="hljs-regexp">        //</span>找出分数最高的学生<br>        Student s12 = students.stream<span class="hljs-function"><span class="hljs-params">()</span>.<span class="hljs-title">max</span><span class="hljs-params">((o1,o2)-&gt;Double.compare(o1.getScore(),o2.getScore()))</span>.<span class="hljs-title">get</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(s12)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        </span><br><span class="hljs-function">        //找出分数最低的学生</span><br><span class="hljs-function">        <span class="hljs-title">Student</span> <span class="hljs-title">s11</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">min</span><span class="hljs-params">((o1,o2)-&gt;Double.compare(o1.getScore(),o2.getScore()))</span>.<span class="hljs-title">get</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(s11)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        </span><br><span class="hljs-function">        //找出分数超过19的学生，并放到<span class="hljs-title">List</span>集合中</span><br><span class="hljs-function">        <span class="hljs-title">List</span>&lt;<span class="hljs-title">Student</span>&gt; <span class="hljs-title">collect</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span>.<span class="hljs-title">collect</span><span class="hljs-params">(Collectors.toList())</span>;</span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(collect)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        </span><br><span class="hljs-function">        //找出分数超过19的学生，并放到<span class="hljs-title">Set</span>集合中</span><br><span class="hljs-function">        <span class="hljs-title">Set</span>&lt;<span class="hljs-title">Student</span>&gt; <span class="hljs-title">Set</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span>.<span class="hljs-title">collect</span><span class="hljs-params">(Collectors.toSet())</span>;</span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-built_in">Set</span>)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        </span><br><span class="hljs-function">        //找出分数大于19的学生，并把学生对象的名字和身高存到一个<span class="hljs-title">Map</span>集合中返回</span><br><span class="hljs-function">//        <span class="hljs-title">Map</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Double</span>&gt; <span class="hljs-title">Map</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span></span><br><span class="hljs-function">//                .<span class="hljs-title">distinct</span><span class="hljs-params">()</span>.<span class="hljs-title">collect</span><span class="hljs-params">(Collectors.toMap(a -&gt; a.getName(), a -&gt; a.getScore()))</span>;</span><br><span class="hljs-function">        //简化</span><br><span class="hljs-function">        <span class="hljs-title">Map</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Double</span>&gt; <span class="hljs-title">Map</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span></span><br><span class="hljs-function">                .<span class="hljs-title">distinct</span><span class="hljs-params">()</span>.<span class="hljs-title">collect</span><span class="hljs-params">(Collectors.toMap(Student::getName, Student::getScore))</span>;</span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(<span class="hljs-built_in">Map</span>)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        </span><br><span class="hljs-function">        </span><br><span class="hljs-function">        //找出分数大于19的学生，并把学生对象的名字和身高存到一个数组中返回</span><br><span class="hljs-function">        //<span class="hljs-title">Object</span>[] <span class="hljs-title">array</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span>.<span class="hljs-title">toArray</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        //<span class="hljs-title">Student</span>[] <span class="hljs-title">array</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span>.<span class="hljs-title">toArray</span><span class="hljs-params">(len -&gt; <span class="hljs-keyword">new</span> Student[len])</span>;</span><br><span class="hljs-function">        简化</span><br><span class="hljs-function">        <span class="hljs-title">Student</span>[] <span class="hljs-title">array</span> = <span class="hljs-title">students</span>.<span class="hljs-title">stream</span><span class="hljs-params">()</span>.<span class="hljs-title">filter</span><span class="hljs-params">(s -&gt; s.getScore() &gt; <span class="hljs-number">19</span>)</span>.<span class="hljs-title">toArray</span><span class="hljs-params">(Student[]::<span class="hljs-keyword">new</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">System</span>.<span class="hljs-title">out</span>.<span class="hljs-title">println</span><span class="hljs-params">(Arrays.toString(array))</span>;</span><br><span class="hljs-function">        <span class="hljs-title">Student</span>[] <span class="hljs-title">students1</span> = <span class="hljs-title">new</span> <span class="hljs-title">Student</span>[3];</span><br><span class="hljs-function"></span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/image/a86.png"><br><strong>注意：max()和min()方法返回的是一个对应类型的Optional容器，应该使用get()方法将它转化成对应类型</strong>  </p><p><strong>转化数组的方法最终类型为Object，若想要转换成对应类型，需要使用有参构造器IntFunction&lt;Student[]&gt;()，简化后为以上代码所示</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">Student[]<span class="hljs-built_in"> array </span>= students.stream().filter(s -&gt; s.getScore() &gt; 19).toArray(new IntFunction&lt;Student[]&gt;() &#123;<br>            @Override<br>           <span class="hljs-keyword"> public</span> Student[] apply(int value) &#123;<br>               <span class="hljs-built_in"> return </span>new Student[value];<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java异常</title>
    <link href="/2025/05/19/java27/"/>
    <url>/2025/05/19/java27/</url>
    
    <content type="html"><![CDATA[<h1 id="认识异常"><a href="#认识异常" class="headerlink" title="认识异常"></a>认识异常</h1><p>异常就是代表程序可能出现的问题，例如0不能作为除数等</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">class1</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Integer</span>.<span class="hljs-title function_">valueOf</span>(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">//包装类</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码运行会出现错误：<br><img src="/image/a28.png"><br>这是因为Integer.valueOf只接收整数型，传入字符串后该方法就会将产生的问题信息封装成<strong>异常对象</strong>通过main方法<strong>抛给Java虚拟机JVM</strong>，终止程序，并将异常信息打印在控制台。</p><h1 id="异常的体系"><a href="#异常的体系" class="headerlink" title="异常的体系"></a>异常的体系</h1><p>Java.lang.Throwable</p><ul><li>Error：代表系统级别的错误（严重问题），不需要程序员使用</li><li>Exception：异常，代表程序可能出现的问题，程序员通常会使用Exception以及它的孩子来封装程序出现的问题<ul><li>RuntimeException：及其子类都是指运行时出现的异常，编译阶段不会出现错误提醒，如数组索引越界异常<ul><li>RuntimeException的子类</li></ul></li><li>其他异常：如编译时异常：编译阶段会出现的错误提醒，如日期解析异常</li></ul></li></ul><p>运行时异常：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionTest1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-built_in">int</span>[] a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>        System.<span class="hljs-keyword">out</span>.println(a[<span class="hljs-number">11</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a29.png"></p><p>编译时异常：无需运行<br><img src="/image/a30.png"><br>不让该程序报错的解决方法有两种：</p><ul><li>捕获异常：采用try-catch语句监视捕获异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class1;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//监视程序</span><br>            <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>            <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2009-10-19&quot;</span>);<br>            System.out.println(date);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<span class="hljs-comment">//catch捕获异常，ParseException解析异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<span class="hljs-comment">//打印异常</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>抛出异常：采用throws将该异常抛给上层程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class1;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<span class="hljs-comment">//这里将异常抛给了main方法的上层程序JVM</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyt-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2009-10-19&quot;</span>);<br>        System.out.println(date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><h2 id="自定义运行时异常"><a href="#自定义运行时异常" class="headerlink" title="自定义运行时异常"></a>自定义运行时异常</h2><ul><li>定义一个异常类继承RuntimeException</li><li>重写构造器</li><li>通过throw new 异常类()来创建异常对象并抛出</li></ul><p>保存一个合法的年龄</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class1;<br><br>import java.text.ParseException;<br><br><span class="hljs-comment">//保存一个合法的年龄</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionTest1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span>&#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            saveAge(<span class="hljs-number">1110</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;底层执行成功&quot;</span>);<br>         &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">//捕获异常</span><br>            e.printStackTrace();<span class="hljs-comment">//打印异常信息</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;底层出现bug&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveAge</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">0</span>  &amp;&amp; age &lt; <span class="hljs-number">150</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;年龄正确&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//用一个异常对象封装这个问题</span><br>            <span class="hljs-comment">//throw 抛出这个异常对象，抛到方法入口</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AgeIllegalRuntimeException(<span class="hljs-string">&quot;age is illegal, your age is &quot;</span> + age);<span class="hljs-comment">//自定义异常信息</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a31.png"><br>年龄非法运行时异常类：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.ithema.class1;<br><span class="hljs-comment">//必须继承RuntimeException</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeIllegalRuntimeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    public <span class="hljs-type">AgeIllegalRuntimeException</span>() &#123;<br>    &#125;<br><br>    public <span class="hljs-type">AgeIllegalRuntimeException</span>(<span class="hljs-type">String</span> message) &#123;<br>        <span class="hljs-keyword">super</span>(message);<span class="hljs-comment">//父类的message</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="自定义编译时异常"><a href="#自定义编译时异常" class="headerlink" title="自定义编译时异常"></a>自定义编译时异常</h2><ul><li>定义一个异常类继承Exception</li><li>重写构造器</li><li>通过throw new 异常类()来创建异常对象并抛出</li></ul><p>年龄非法编译时异常类：只需修改继承的类为Exception即可</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.ithema.class1;<br><span class="hljs-comment">//必须继承RuntimeException</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AgeIllegalException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    public <span class="hljs-type">AgeIllegalException</span>() &#123;<br>    &#125;<br><br>    public <span class="hljs-type">AgeIllegalException</span>(<span class="hljs-type">String</span> message) &#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时需要在方法后加上<code>throws AgeIllegalException</code>抛出方法内部的异常，这样在编译时就会提醒该方法可能会发生错误，程序员不得不修改，如下图所示<br><img src="/image/a32.png"><br>正确代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class1;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><br><span class="hljs-comment">//保存一个合法的年龄</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            saveAge(<span class="hljs-number">1001</span>);<br>            System.out.println(<span class="hljs-string">&quot;成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (AgeIllegalException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> <span class="hljs-keyword">throws</span> AgeIllegalException &#123;<span class="hljs-comment">//throws用在方法上，抛出方法内部的异常</span><br>        <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">0</span>  &amp;&amp; age &lt; <span class="hljs-number">150</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄正确&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//用一个异常对象封装这个问题</span><br>            <span class="hljs-comment">//throw 抛出这个异常对象，抛到方法入口</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeIllegalException</span>(<span class="hljs-string">&quot;age is illegal, your age is &quot;</span> + age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h1><ul><li>异常是用来查寻Bug的关键参考信息</li><li>异常可以作为方法内部的一种特殊返回值，以便通知上层调用者底层的执行情况</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>常见处理方式：将异常抛给调用者，接着有两种方法</p><ul><li>调用者捕获异常，记录异常并响应合适的信息给用户，用户体验较好</li><li>调用者捕获异常，尝试重新修复</li></ul><h2 id="记录异常并响应合适的信息给用户"><a href="#记录异常并响应合适的信息给用户" class="headerlink" title="记录异常并响应合适的信息给用户"></a>记录异常并响应合适的信息给用户</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class1;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test1();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您要找的文件不存在&quot;</span>);<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您要解析的时间有问题&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException, ParseException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2009-10-19 12:12:12&quot;</span>);<br>        System.out.println(date);<br><br>        test2();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-comment">//读取文件</span><br>        InputStream is= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/meinv.png&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a33.jpg"><br>若时间2009-10-19 12:12解析有问题：（在main方法中一级一级地捕捉异常，捕捉到异常就终止程序）<br><img src="/image/a34.png"><br>若时间解析2009-10-19 12:12:12无问题，文件找不到：（在main方法中一级一级地捕捉异常，捕捉到异常就终止程序）<br><img src="/image/a35.png"></p><p><strong>优化程序</strong>（在文件读取方法中我们肯不知道是否是文件找不到的异常）</p><p>直接抛出Exception</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.class1;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            test1();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;当前操作有问题&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.parse(<span class="hljs-string">&quot;2009-10-19 12:12:12&quot;</span>);<br>        System.out.println(date);<br><br>        test2();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//读取文件</span><br>        InputStream is= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:/meinv.png&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a36.png"></p><h2 id="尝试重新修复异常"><a href="#尝试重新修复异常" class="headerlink" title="尝试重新修复异常"></a>尝试重新修复异常</h2><p>调用一个方法，让用户输入一个合适的价格返回</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class1;<br><br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExceptionTest3</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//调用一个方法，让用户输入一个合适的价格返回</span><br>        System.<span class="hljs-keyword">out</span>.println(getMoney());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getMoney</span>()</span> &#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入价格：&quot;</span>);<br>            <span class="hljs-built_in">double</span> money = sc.nextDouble();<br><br>            <span class="hljs-keyword">if</span>(money &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> money;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的价格有误&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a37.png"><br>这样看结果貌似没有什么问题，但是当用户输入的不是数字时，就会发生异常<br><img src="/image/a38.png"></p><p>所以在main方法中捕捉调用的方法可能出现的异常，直接修复程序，如下所示</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>    <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.<span class="hljs-keyword">out</span>.println(getMoney());<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入合法的数字！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a39.png"><br><strong>这样我们的程序就非常健壮了，不需要程序员去写代码判断用户输入的是否是数字了</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java正则表达式</title>
    <link href="/2025/05/15/java26/"/>
    <url>/2025/05/15/java26/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>由一些特定字符组成，代表一个原则</li><li>作用：<ul><li>用来校验数据格式是否合法，例如电话号：13489093387</li><li>在一段文本中查找满足要求的内容</li></ul></li></ul><h2 id="检验例子"><a href="#检验例子" class="headerlink" title="检验例子"></a>检验例子</h2><p>校验QQ号是否正确：要求全部是数字，长度在6-20之间，不能以0开头</p><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.ithema.class1;<br>//要求全部是数字，长度在<span class="hljs-number">6</span><span class="hljs-number">-20</span>之间，不能以<span class="hljs-number">0</span>开头<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> RegexTest1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(checkQQ(&quot;1111kk1&quot;));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(checkQQ(&quot;1111200&quot;));<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">boolean</span> checkQQ(String s) &#123;<br>        //判断是否为空,是否以<span class="hljs-number">0</span>开头，长度是否合适<br>        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.startsWith(&quot;0&quot;) || s.length()&lt;<span class="hljs-number">6</span> || s.length() &gt; <span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        //不为<span class="hljs-keyword">null</span>，且不是以<span class="hljs-number">0</span>开头，长度合适<br>        //判断是否都为数字<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-type">char</span> c = s.charAt(i);<br><br>            //在 ASCII 码表中，字符 <span class="hljs-string">&#x27;0&#x27;</span> 到 <span class="hljs-string">&#x27;9&#x27;</span> 是连续的，<span class="hljs-string">&#x27;0&#x27;</span> 的 ASCII 码值是 <span class="hljs-number">48</span>，<span class="hljs-string">&#x27;9&#x27;</span> 的 ASCII 码值是 <span class="hljs-number">57</span><br>            //因此，如果一个字符的 ASCII 码值小于 <span class="hljs-string">&#x27;0&#x27;</span>（即小于 <span class="hljs-number">48</span>）或者大于 <span class="hljs-string">&#x27;9&#x27;</span>（即大于 <span class="hljs-number">57</span>），那么这个字符就不是数字字符。<br>            <span class="hljs-keyword">if</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>        //说明QQ号肯定合法<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a19.png"><br>补充：ASCII 码表<br><img src="/image/a16.jpeg" alt="ASCII 码表"></p><p>采用正则表达式:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">class1</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title function_">checkQQ1</span>(<span class="hljs-string">&quot;1111kk1&quot;</span>));<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title function_">checkQQ1</span>(<span class="hljs-string">&quot;1111200&quot;</span>));<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">checkQQ1</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> qq</span>)&#123;<br>        <span class="hljs-comment">//第一位是1-9的数字，后面剩下5-19位是0-9的整数</span><br>        <span class="hljs-keyword">return</span> qq != <span class="hljs-literal">null</span> &amp;&amp; qq.<span class="hljs-title function_">matches</span>(<span class="hljs-string">&quot;[0-9]\\d&#123;5,19&#125;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a19.png"></p><h2 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h2><p>String提供了一个匹配正则表达式的方法：<code> public boolean matches(String regex)</code></p><p>常用的格式如下三张图：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;ab&quot;.matches(&quot;[a-zA-Z0-9]&quot;));  //<span class="hljs-keyword">false</span>,只能匹配单个字符<br></code></pre></td></tr></table></figure><p><img src="/image/a20.png" alt="字符类"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;杜加&quot;.matches(&quot;.&quot;));  //<span class="hljs-keyword">false</span>,只能匹配单个字符。&quot;.&quot;指所有字符都可以<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;1&quot;.matches(&quot;\\d&quot;));  //<span class="hljs-keyword">true</span>，这里是两个&quot;\&quot;，这是因为在Java中&quot;\&quot;是有特殊用途的（\n），所以需要用到转义字符&quot;\&quot;<br></code></pre></td></tr></table></figure><p><img src="/image/a21.png" alt="预定义字符"><br><strong>以上两张图中的格式只能匹配单个字符，以下图中的格式可以匹配多个字符</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">System.out.println(<span class="hljs-string">&quot;abcd&quot;</span>.matches(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w+&quot;</span>));  <span class="hljs-operator">//</span><span class="hljs-literal">true</span>，<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w+&quot;</span>指一个或多个a-zA-Z0-<span class="hljs-number">9</span>的字符<br>System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.matches(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w&#123;3&#125;&quot;</span>));  <span class="hljs-operator">//</span><span class="hljs-literal">true</span>,<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w&#123;3&#125;&quot;</span>指正好<span class="hljs-number">3</span>位<br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>.matches(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w&#123;3,&#125;&quot;</span>));  <span class="hljs-operator">//</span><span class="hljs-literal">false</span>,<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w&#123;3,&#125;&quot;</span>指至少三位<br>System.out.println(<span class="hljs-string">&quot;abc11&quot;</span>.matches(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w&#123;3,9&#125;&quot;</span>));  <span class="hljs-operator">//</span><span class="hljs-literal">true</span>,<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w&#123;3,9&#125;&quot;</span>指<span class="hljs-number">3</span><span class="hljs-operator">-</span><span class="hljs-number">9</span>位<br></code></pre></td></tr></table></figure><p><img src="/image/a22.png"></p><p>其他常用的格式：</p><ul><li>“?i”忽略大小写<ul><li><code>System.out.println(&quot;ABC&quot;.matches(&quot;(?i)abc&quot;)); //true</code></li><li><code>System.out.println(&quot;aBc&quot;.matches(&quot;a((?i)b)c&quot;));  //true</code></li></ul></li><li>“|”或者 ——<strong>|不会像||一样进行短路运算</strong><ul><li>要么是三个小写字母，要么是三个数字<br><code>System.out.println(&quot;123&quot;.matches(&quot;\\d&#123;3&#125;|[a-z]&#123;3&#125;&quot;));//true</code><br><code>System.out.println(&quot;Abc&quot;.matches(&quot;\\d&#123;3&#125;|[a-z]&#123;3&#125;&quot;));//false</code></li></ul></li><li>“()”分组<ul><li>必须是以“我爱”开头，中间至少一个“编程”，最后至少一个”666”<br><code>System.out.println(&quot;我爱编程编程666666&quot;.matches(&quot;我爱(编程)+(666)+&quot;)); //true</code></li></ul></li></ul><p>其他格式在以下网址中：<br><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/regex/Pattern.html</a></p><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><p>检验用户输入的电话、邮箱、时间是否合法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.ithema.class1;<br><br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RegexTest2</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//checkPhone();</span><br>        <span class="hljs-comment">//checkEmail();</span><br>        checkTime();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkPhone</span>()</span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入手机号或座机号：&quot;</span>);<br>            String phone = sc.next();<br><br>            <span class="hljs-comment">//18728901980 010-1234567 0101234567</span><br>            <span class="hljs-keyword">if</span>(phone.matches(<span class="hljs-string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,7&#125;-?[1,9]&#123;5,20&#125;)&quot;</span>))&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;格式正确&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;格式不正确&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkEmail</span>()</span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入邮箱号：&quot;</span>);<br>            String email = sc.next();<br><br>            <span class="hljs-comment">//3109005427@qq.com  182789099ww@163.com   itheima@buu.com.cn</span><br>            <span class="hljs-keyword">if</span>(email.matches(<span class="hljs-string">&quot;\\w&#123;2,&#125;@\\w&#123;2,20&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;&quot;</span>))&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;格式正确&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;格式不正确&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkTime</span>()</span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入日期时间：&quot;</span>);<br>            String time = sc.next();<br><br>            <span class="hljs-comment">//12:12:12</span><br>            <span class="hljs-keyword">if</span>(time.matches(<span class="hljs-string">&quot;([0-1][1-9]|2[0-4]:[0-5][0-9]:[0-5][0-9])&quot;</span>))&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;格式正确&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;格式不正确&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a25.png"><br><img src="/image/a24.png"><br><img src="/image/a23.png"></p><h2 id="查找信息（爬取信息）"><a href="#查找信息（爬取信息）" class="headerlink" title="查找信息（爬取信息）"></a>查找信息（爬取信息）</h2><p>爬取一个字符串中的电话、邮箱和热线电话</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">package</span> <span class="hljs-variable">com</span>.<span class="hljs-property">ithema</span>.<span class="hljs-property">class1</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">regex</span>.<span class="hljs-property">Matcher</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">regex</span>.<span class="hljs-property">Pattern</span>;<br><br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest3</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-title function_">method</span>();<br>    &#125;<br><br>    <span class="hljs-variable">private</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">method</span>() &#123;<br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;来北京联合大学学习软件工程<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;电话：18435035678、16790673457<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;或者座机电话：010-1234567、0101234567<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;邮箱：itheima@buu.com.cn、3109005678@qq.com<span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;热线电话：400-168-9090、4001678909&quot;</span>;<br><br>        <span class="hljs-comment">//定义爬取规则</span><br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;(1[3-9]<span class="hljs-char escape_">\\</span>d&#123;9&#125;)|(0<span class="hljs-char escape_">\\</span>d&#123;2,7&#125;-?[1-9]&#123;5,20&#125;)|(<span class="hljs-char escape_">\\</span>w&#123;2,&#125;@<span class="hljs-char escape_">\\</span>w&#123;2,20&#125;(<span class="hljs-char escape_">\\</span>.<span class="hljs-char escape_">\\</span>w&#123;2,10&#125;)&#123;1,2&#125;)|&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;(400-?<span class="hljs-char escape_">\\</span>d&#123;3,7&#125;-?<span class="hljs-char escape_">\\</span>d&#123;3,7&#125;)&quot;</span>;<br>        <span class="hljs-comment">//将正则表达式封装成Pattern对象</span><br>        <span class="hljs-title class_">Pattern</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-title class_">Pattern</span>.<span class="hljs-property">compile</span>(<span class="hljs-variable">regex</span>);<br>        <span class="hljs-comment">//通过Pattern对象去获取查找内容的匹配器对象</span><br>        <span class="hljs-title class_">Matcher</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-variable">p</span>.<span class="hljs-property">matcher</span>(<span class="hljs-variable">data</span>);<br>        <span class="hljs-comment">//定义一个循环开始爬取信息</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable">m</span>.<span class="hljs-property">find</span>()) &#123;<span class="hljs-comment">//find返回的是一个布尔值，找到一个信息返回true</span><br>            <span class="hljs-title class_">String</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-variable">m</span>.<span class="hljs-property">group</span>();<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">group</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a26.png"></p><h2 id="搜索替换、分割信息"><a href="#搜索替换、分割信息" class="headerlink" title="搜索替换、分割信息"></a>搜索替换、分割信息</h2><ul><li>替换<code>public String replaceAll(String regex,String newStr)</code></li><li>分割<code>public String[] split(String regex)</code></li></ul><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">package</span> <span class="hljs-variable">com</span>.<span class="hljs-property">ithema</span>.<span class="hljs-property">class1</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-variable">java</span>.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<br><br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexTest4</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-comment">//1.替换</span><br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">s</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;迪丽热巴22hujjj古力娜扎8ujnjik易烊千玺&quot;</span>;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">s</span>.<span class="hljs-property">replaceAll</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w+&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>));<br><br><br>        <span class="hljs-comment">//2.优化“我我我喜喜欢欢编编编编编程程程程程程程”为“我喜欢编程”</span><br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">s1</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;我我我喜喜欢欢编编编编编程程程程程程程&quot;</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * (.)；找到一个任意字符</span><br><span class="hljs-comment">         * \\1：给该字符声明组号</span><br><span class="hljs-comment">         * +：确定该字符重复两个及以上</span><br><span class="hljs-comment">         * $1:取到第一组代表的那个重复的字</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-variable">s1</span>.<span class="hljs-property">replaceAll</span>(<span class="hljs-string">&quot;(.)<span class="hljs-char escape_">\\</span>1+&quot;</span>, <span class="hljs-string">&quot;$1&quot;</span>));<br><br><br>        <span class="hljs-comment">//3.分割取人名</span><br>        <span class="hljs-title class_">String</span> <span class="hljs-variable">s2</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;迪丽热巴22hujjj古力娜扎8ujnjik易烊千玺&quot;</span>;<br>        <span class="hljs-title class_">String</span>[] <span class="hljs-variable">names</span><span class="hljs-operator">=</span><span class="hljs-variable">s2</span>.<span class="hljs-property">split</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>w+&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-title class_">Arrays</span>.<span class="hljs-property">toString</span>(<span class="hljs-variable">names</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a27.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java算法</title>
    <link href="/2025/04/27/java25/"/>
    <url>/2025/04/27/java25/</url>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>算法指解决某个实际问题的过程和方法；学习算法主要是为了训练编程思维</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><img src="/image/s99.png"></p><p>两个两个地进行比较，如果发现后面的值比前面的值小，则交换位置，否则保持现状。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//先确定控制轮数，数组长度为4，那么轮数未4-1=3</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; a.length-<span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-comment">//j=0;第一轮   比较三次</span><br>            <span class="hljs-comment">//j=1;第二轮   比较二次</span><br>            <span class="hljs-comment">//j=2;第三轮   比较一次</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length-j-<span class="hljs-number">1</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span>(a[i]&gt;a[i+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> a[i];<br>                    a[i] = a[i+<span class="hljs-number">1</span>];<br>                    a[i+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(a));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s100.png"></p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><img src="/image/a13.png"></p><p>每轮确定当前位置，找出后面的较小值与该位置交换。&#x2F;&#x2F;第一次从待排序的数据元素中选出最小的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小元素，然后放到已排序的序列的末尾；以此类推，直到全部待排序的数据元素的个数为零</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">oop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-comment">//确定轮数</span><br>        <span class="hljs-comment">//i=0,第一轮，&#123;1，22，4，10&#125;</span><br>        <span class="hljs-comment">//i=1，第二轮，&#123;1，4，22，10&#125;</span><br>        <span class="hljs-comment">//i=2、第三轮，&#123;1，4，10，22&#125;</span><br>        <span class="hljs-comment">//说明4个数字需要3轮,注意：i指当前位置索引</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">//确定每轮比较几次</span><br>            <span class="hljs-comment">//第一轮是3次，往后依次减1</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span> ; j&lt;a.length; j++)&#123;<br>                <span class="hljs-keyword">if</span>(a[i]&gt;a[j])&#123;<span class="hljs-comment">//注意要确定当前位置不变也就是a[i],依次与后面的数a[j]比较</span><br>                    <span class="hljs-type">int</span> temp=a[i];<br>                    a[i]=a[j];<br>                    a[j]=temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(a));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a14.png"></p><h3 id="选择排序优化"><a href="#选择排序优化" class="headerlink" title="选择排序优化"></a>选择排序优化</h3><p>优化排序即是缩短程序运行时间，多次交换数值会使得程序性能降低。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.ithema;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">oop</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>&#125;;<br><br>        <span class="hljs-comment">//确定轮数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length<span class="hljs-number">-1</span>; i++) &#123;<span class="hljs-comment">//i指当前位置</span><br>            <br>            <span class="hljs-type">int</span> min = i;<br>            <span class="hljs-comment">//判断当前位置是否大于后面位置处的元素值，若大于则交换</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span> ; j&lt;a.length; j++)&#123;<br>                <span class="hljs-keyword">if</span>(a[min]&gt;a[j])&#123;<br>                    min=j;<span class="hljs-comment">//min记录的是较小值的索引</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">//决定是否交换：如果min的索引没有变，说明后面没有找到较小值，若变了，记录的就是较小值的索引，直接交换即可</span><br>            <span class="hljs-keyword">if</span>(i != min)&#123;<br>                <span class="hljs-type">int</span> temp = a[i];<br>                a[i] = a[min];<br>                a[min] = temp;<br>            &#125;<br>        &#125;<br>        System.out.<span class="hljs-built_in">println</span>(Arrays.<span class="hljs-built_in">toString</span>(a));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="顺序查找（基本查找）"><a href="#顺序查找（基本查找）" class="headerlink" title="顺序查找（基本查找）"></a>顺序查找（基本查找）</h3><p>在数据量特别大的时候，<strong>基本查找这种从前往后挨个找的形式</strong>，性能很差</p><h3 id="二分查找（折半查找）"><a href="#二分查找（折半查找）" class="headerlink" title="二分查找（折半查找）"></a>二分查找（折半查找）</h3><ul><li>前提条件：数组中的数据必须是有序的</li><li>核心思想：每次排除一半的数据，查询数据的性能明显提高很多</li><li>二分查找整除的折半条件是<strong>开始位置left&lt;&#x3D;结束位置right</strong>，如果相等还未找到，则无该值</li></ul><p>代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.ithema;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">oop1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//定义一个数组</span><br>        <span class="hljs-keyword">int</span>[] a=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">19</span>,<span class="hljs-number">23</span>,<span class="hljs-number">67</span>,<span class="hljs-number">89</span>&#125;;<br>        System.out.println(binarySearch(a,<span class="hljs-number">199</span>));<br>        System.out.println(Arrays.binarySearch(a, <span class="hljs-number">89</span>));<span class="hljs-comment">//采用Arrays自带的binarySearch方法</span><br>    &#125;<br><br>    <span class="hljs-comment">//接收一个数组和一个要查找的值，返回查找的值的的索引</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> <span class="hljs-keyword">target</span>)</span> </span>&#123;<br>        <span class="hljs-comment">//定义初始的左值索引和右值索引</span><br>        <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> high = a.length<span class="hljs-number">-1</span>;<br><br>        <span class="hljs-comment">//查找的循环条件为low &lt;= high</span><br>        <span class="hljs-keyword">while</span> (low &lt;= high) &#123;<br>            <span class="hljs-comment">//中间值索引mid</span><br>            <span class="hljs-keyword">int</span> mid = (low + high)/<span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//目标值小于中间值</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">target</span> &lt; a[mid]) &#123;<br>                <span class="hljs-comment">//右值索引移到中间值索引前一位</span><br>                high = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">//目标值大于中间值</span><br>            <span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span> <span class="hljs-params">(<span class="hljs-keyword">target</span> &gt; a[mid])</span> </span>&#123;<br>                <span class="hljs-comment">//左值索引移到中间值索引后一位</span><br>                low = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">//目标值等于中间值</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//返回中间值索引</span><br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//循环结束后，仍没有返回值，说明无该值，返回-1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/a15.png"></p><p><strong>采用Arrays自带的binarySearch方法也可以实现二分查找。</strong><br>对应源码为：<br><img src="/image/a17.png"><br><img src="/image/a18.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>医院挂号系统</title>
    <link href="/2025/04/22/java24/"/>
    <url>/2025/04/22/java24/</url>
    
    <content type="html"><![CDATA[<h1 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h1><p>利用面向对象的编程思想完成简易的医院挂号系统，具体功能如下：</p><ul><li>1、科室管理：添加科室</li><li>2、科室管理：删除科室</li><li>3、科室管理：修改科室</li><li>4、医生管理：添加医生</li><li>5、医生管理：医生坐诊设置（可设置当天和未来6天的坐诊情况）</li><li>6、医生管理：展示全部医生的坐诊详情（当天和未来6天的坐诊情况）</li><li>7、医生管理：挂号预约</li><li>8、搜索某个医生当前和未来6天内的患者预约详情（展示每天预约患者的具体信息）</li><li>9、退出系统</li></ul><h1 id="类及代码"><a href="#类及代码" class="headerlink" title="类及代码"></a>类及代码</h1><p>首先确定四个对象，医生Doctor类、科室Department类、每日坐诊安排Schedule类、预约信息Appointment类</p><p>Doctor.java:   </p><p>其中包括医生个人的一系列信息，所属科室，入职时间以及7天的坐诊安排集合。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">bean</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">time</span>.<span class="hljs-property">LocalDate</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><span class="hljs-comment">//医生</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Doctor</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> doctorId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> departmentName;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> gender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> speciality;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalDate</span> joinDate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Schedule</span>&gt; schedules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDoctorId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> doctorId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDoctorId</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> doctorId</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">doctorId</span> = doctorId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDepartmentName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> departmentName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDepartmentName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> departmentName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">departmentName</span> = departmentName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getGender</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setGender</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> gender</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getSpeciality</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> speciality;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSpeciality</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> speciality</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">speciality</span> = speciality;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalDate</span> <span class="hljs-title function_">getJoinDate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> joinDate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setJoinDate</span>(<span class="hljs-params"><span class="hljs-title class_">LocalDate</span> joinDate</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">joinDate</span> = joinDate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Schedule</span>&gt; <span class="hljs-title function_">getSchedules</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> schedules;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSchedules</span>(<span class="hljs-params"><span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Schedule</span>&gt; schedules</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">schedules</span> = schedules;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Department.java:</p><p>包括科室名称以及包括的医生集合</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">bean</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><br><span class="hljs-comment">//科室</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Doctor</span>&gt; doctors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Doctor</span>&gt; <span class="hljs-title function_">getDoctors</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> doctors;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDoctors</span>(<span class="hljs-params"><span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Doctor</span>&gt; doctors</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">doctors</span> = doctors;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getNumber</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> doctors.<span class="hljs-title function_">size</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Appointment.java:</p><p>包括预约时间、患者信息、所选医生、症状、预约看诊时间</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">bean</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">time</span>.<span class="hljs-property">LocalDateTime</span>;<br><br><span class="hljs-comment">//预约</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Appointment</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> userName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> sex;<br>    <span class="hljs-keyword">private</span> int age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> desc;<span class="hljs-comment">//症状</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> departName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> doctorId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalDateTime</span> appointDateTime;<span class="hljs-comment">//预约看诊时间</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getUserName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUserName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> userName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">userName</span> = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getSex</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSex</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> sex</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDesc</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDesc</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> desc</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">desc</span> = desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDepartName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> departName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDepartName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> departName</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">departName</span> = departName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDoctorId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> doctorId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDoctorId</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> doctorId</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">doctorId</span> = doctorId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalDateTime</span> <span class="hljs-title function_">getAppointDateTime</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> appointDateTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAppointDateTime</span>(<span class="hljs-params"><span class="hljs-title class_">LocalDateTime</span> appointDateTime</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">appointDateTime</span> = appointDateTime;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;患者姓名：&quot;</span> + userName +<br>                <span class="hljs-string">&quot;, 症状：&quot;</span> + desc +<br>                <span class="hljs-string">&quot;, 年龄：&quot;</span> + age +<br>                <span class="hljs-string">&quot;, 性别：&quot;</span> + sex +<br>                <span class="hljs-string">&quot;, 预约看诊时间：&quot;</span>+ appointDateTime;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Schedule.java:</p><p>每日医生的坐诊安排包括今日日期、这天是否坐诊、上午是否排班、下午是否排班、上午看诊时间、下午看诊时间、可预约人数、上午预约信息集合、下午预约信息集合。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">ithema</span>.<span class="hljs-property">bean</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">time</span>.<span class="hljs-property">LocalDate</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">time</span>.<span class="hljs-property">LocalTime</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><br><span class="hljs-comment">//坐诊情况安排</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Schedule</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalDate</span> today;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> update;<span class="hljs-comment">//默认这天未排班</span><br><br>    <span class="hljs-comment">//上午</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> morning;<span class="hljs-comment">//上午是否上班</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalTime</span> mstart;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalTime</span> mend;<br>    <span class="hljs-keyword">private</span> int mTotalNumber;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Appointment</span>&gt; mAppointArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//上午预约集合</span><br>    <span class="hljs-comment">// 注意：一定要加上=后面的new ArrayList&lt;&gt;()，否则该集合没有被初始化，当添加对象时会出现空指针错误</span><br><br><br>    <span class="hljs-comment">//下午</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> afernoon;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalTime</span> astart;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">LocalTime</span> aend;<br>    <span class="hljs-keyword">private</span> int aTotalNumber;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Appointment</span>&gt; aAppointArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//下午预约集合</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalDate</span> <span class="hljs-title function_">getToday</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> today;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setToday</span>(<span class="hljs-params"><span class="hljs-title class_">LocalDate</span> today</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">today</span> = today;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isMorning</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> morning;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMorning</span>(<span class="hljs-params"><span class="hljs-built_in">boolean</span> morning</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">morning</span> = morning;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalTime</span> <span class="hljs-title function_">getMstart</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> mstart;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMstart</span>(<span class="hljs-params"><span class="hljs-title class_">LocalTime</span> mstart</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mstart</span> = mstart;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalTime</span> <span class="hljs-title function_">getMend</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> mend;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMend</span>(<span class="hljs-params"><span class="hljs-title class_">LocalTime</span> mend</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mend</span> = mend;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getmTotalNumber</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> mTotalNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setmTotalNumber</span>(<span class="hljs-params">int mTotalNumber</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mTotalNumber</span> = mTotalNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isAfernoon</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> afernoon;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAfernoon</span>(<span class="hljs-params"><span class="hljs-built_in">boolean</span> afernoon</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">afernoon</span> = afernoon;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalTime</span> <span class="hljs-title function_">getAstart</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> astart;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAstart</span>(<span class="hljs-params"><span class="hljs-title class_">LocalTime</span> astart</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">astart</span> = astart;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">LocalTime</span> <span class="hljs-title function_">getAend</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> aend;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAend</span>(<span class="hljs-params"><span class="hljs-title class_">LocalTime</span> aend</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">aend</span> = aend;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getaTotalNumber</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> aTotalNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setaTotalNumber</span>(<span class="hljs-params">int aTotalNumber</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">aTotalNumber</span> = aTotalNumber;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">isUpdate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//判断当天是否排班</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">morning</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">afernoon</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setUpdate</span>(<span class="hljs-params"><span class="hljs-built_in">boolean</span> update</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">update</span> = update;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Appointment</span>&gt; <span class="hljs-title function_">getmAppointArray</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> mAppointArray;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setmAppointArray</span>(<span class="hljs-params"><span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Appointment</span>&gt; mAppointArray</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">mAppointArray</span> = mAppointArray;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Appointment</span>&gt; <span class="hljs-title function_">getaAppointArray</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> aAppointArray;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setaAppointArray</span>(<span class="hljs-params"><span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-title class_">Appointment</span>&gt; aAppointArray</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">aAppointArray</span> = aAppointArray;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6.2输出上午排班情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上午坐诊安排如下：&quot;</span> +<span class="hljs-string">&quot;\n&quot;</span>+<br>                 (!morning?<span class="hljs-string">&quot;未排班&quot;</span>:(<br>                <span class="hljs-string">&quot;坐诊时间：&quot;</span> + mstart +<br>                <span class="hljs-string">&quot;-&quot;</span> + mend +<br>                <span class="hljs-string">&quot;, 可预约人数：&quot;</span> + mTotalNumber ));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6.3输出下午排班情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString1</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;下午坐诊安排如下：&quot;</span> +<span class="hljs-string">&quot;\n&quot;</span>+<br>                (!afernoon?<span class="hljs-string">&quot;未排班&quot;</span>:(<br>                <span class="hljs-string">&quot;坐诊时间：&quot;</span> + astart +<br>                <span class="hljs-string">&quot;-&quot;</span> + aend +<br>                <span class="hljs-string">&quot;, 可预约人数：&quot;</span> + aTotalNumber ));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着是一个承载所有功能的类：HospitalManager.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ithema.frame;<br><br><span class="hljs-keyword">import</span> com.ithema.bean.Appointment;<br><span class="hljs-keyword">import</span> com.ithema.bean.Department;<br><span class="hljs-keyword">import</span> com.ithema.bean.Doctor;<br><span class="hljs-keyword">import</span> com.ithema.bean.Schedule;<br><br><span class="hljs-keyword">import</span> javax.print.Doc;<br><span class="hljs-keyword">import</span> java.security.spec.RSAOtherPrimeInfo;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeParseException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HospitalManager</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>    ArrayList&lt;Department&gt; departments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//所有医生集合</span><br>    ArrayList&lt;Doctor&gt; doctors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 主菜单</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;====欢迎进入医院系统====&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;1:科室管理：添加科室&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;2:科室管理：删除科室&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;3:科室管理：修改科室&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;4:医生管理：添加医生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;5:医生管理：医生坐诊设置（可设置当天和未来6天的坐诊情况）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;6:医生管理：展示全部医生的坐诊详情（当天和未来6天的坐诊情况）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;7:医生管理：挂号预约&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;8:搜索某个医生当前和未来6天内的患者预约详情（展示每天预约患者的具体信息）&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;9.退出系统&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入操作命令：&quot;</span>);<br><br>            <span class="hljs-keyword">switch</span> (sc.next()) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    addDepartment();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    deleteDepartment();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    modifyDepartment();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                    addDoctor();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span>:<br>                    setDoctorJob();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;6&quot;</span>:<br>                    showAllDoctorInfos();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;7&quot;</span>:<br>                    appointDoctor();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;8&quot;</span>:<br>                    showAllAppointsBydoctor();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;9&quot;</span>:<br>                    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//直接将该方法杀死</span><br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;请输入的命令有误，请重新输入：&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 1.添加科室</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDepartment</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;====添加科室====&quot;</span>);<br><br>        OUT:<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//外层循环</span><br>            System.out.println(<span class="hljs-string">&quot;请输入科室名称：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-comment">//判断科室名称是否存在</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; departments.size(); i++) &#123;<span class="hljs-comment">//内层循环</span><br>                <span class="hljs-keyword">if</span> (departments.get(i).getName().equals(name)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;此科室已经存在，请重新输入：&quot;</span>);<br>                    <span class="hljs-comment">//break;</span><br>                    <span class="hljs-keyword">continue</span> OUT;<span class="hljs-comment">//执行剩下语句，当外层循环条件仍成立时，继续循环外层循环</span><br>                    <span class="hljs-comment">//break OUT;//不执行剩下语句，无论外层循环条件是否成立，都不再循环外层循环。这里会直接跳到start()方法的while循环</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>();<br>            department.setName(name);<br>            departments.add(department);<br>            System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>            showAllDepartmentInfos();<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2.删除科室</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteDepartment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (departments.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您还未添加科室，请添加之后再删除~&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;====删除科室====&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; departments.size(); i++) &#123;<br>                System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;:&quot;</span>+departments.get(i).getName());<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;请选择要删除的科室的序号：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-keyword">if</span>(id &lt; <span class="hljs-number">1</span> || id &gt; departments.size()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的序号没有对应科室哦，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//删除序号对应的科室</span><br>            departments.remove(id-<span class="hljs-number">1</span>);<br>            System.out.println(<span class="hljs-string">&quot;成功删除&quot;</span>+id+<span class="hljs-string">&quot;号科室&quot;</span>);<br>            showAllDepartmentInfos();<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//注意成功删除后就要跳出while(true)循环</span><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 3.修改科室</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifyDepartment</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (departments.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您还未添加科室，请添加之后再修改~&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;====修改科室====&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; departments.size(); i++) &#123;<br>                System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;:&quot;</span>+departments.get(i).getName());<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;请选择要修改的科室：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-keyword">if</span> (id &lt; <span class="hljs-number">1</span> || id &gt; departments.size()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;您输入的序号没有对应科室哦，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//对应科室</span><br>            System.out.println(<span class="hljs-string">&quot;请输入修改后的科室名称：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>            departments.get(id-<span class="hljs-number">1</span>).setName(name);<br><br>            showAllDepartmentInfos();<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//注意成功删除后就要跳出while(true)循环</span><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 4.添加医生</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDoctor</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span>(departments.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您当前无科室，不能录入医生&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;====添加医生====&quot;</span>);<br>        <span class="hljs-type">Doctor</span> <span class="hljs-variable">doctor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Doctor</span>();<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请选择科室&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; departments.size(); i++) &#123;<br>                System.out.println((i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;:&quot;</span> + departments.get(i).getName());<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;请输入科室序号:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">de</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">if</span> (de &lt; <span class="hljs-number">1</span> || de &gt; departments.size()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;没有您要输入的科室，请重新输入&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//记录要将该医生加入的科室对象</span><br>            <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments.get(de-<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//将doctor对象中的DepartmentName设置为科室名字department</span><br>            doctor.setDepartmentName(department.getName());<br>            <span class="hljs-comment">//使用UUID类随机生成id</span><br>            doctor.setDoctorId(UUID.randomUUID().toString());<br><br>            System.out.println(<span class="hljs-string">&quot;请输入医生名字：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>            doctor.setName(name);<br>            System.out.println(<span class="hljs-string">&quot;请输入医生的年龄：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入医生的性别：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> sc.next();<br>                <span class="hljs-keyword">if</span> (!Objects.equals(gender, <span class="hljs-string">&quot;女&quot;</span>) &amp;&amp; !Objects.equals(gender, <span class="hljs-string">&quot;男&quot;</span>)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;性别只能为男或女，请重新输入性别：&quot;</span>);<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                doctor.setGender(gender);<br>                System.out.println(<span class="hljs-string">&quot;请输入专业名称：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">speciality</span> <span class="hljs-operator">=</span> sc.next();<br>                doctor.setSpeciality(speciality);<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请输入入职日期：（格式：yyyy-MM-dd）&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">joinDate</span> <span class="hljs-operator">=</span> sc.next();<br>                    <span class="hljs-comment">//采用try...catch语句捕捉日期格式异常的情况，以此来减少程序的bug</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.parse(joinDate, DateTimeFormatter.ISO_LOCAL_DATE);<br>                        doctor.setJoinDate(date);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (DateTimeParseException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;日期格式错误，请输入正确的日期格式（yyyy-MM-dd）：&quot;</span>);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">//获得对应科室的医生集合，将该医生对象添加到该医生集合中</span><br>                department.getDoctors().add(doctor);<br>                System.out.println(<span class="hljs-string">&quot;录入成功&quot;</span>);<br><br>                <span class="hljs-comment">//将医生对象添加到总的医生集合中</span><br>                doctors.add(doctor);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 5.设置医生坐诊</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDoctorJob</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;===医生坐诊设置（可设置当天和未来6天的坐诊情况）===&quot;</span>);<br>        <span class="hljs-keyword">if</span>(departments.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您当前无科室，不能设置医生坐诊&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//选择科室</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请选择科室&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; departments.size(); i++) &#123;<br>                System.out.println((i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;:&quot;</span> + departments.get(i).getName());<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;请输入科室序号:&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">de</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">if</span> (de &lt; <span class="hljs-number">1</span> || de &gt; departments.size()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;没有您要输入的科室，请重新输入&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">//记录要将该医生加入的科室对象</span><br>            <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments.get(de-<span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">//选择医生</span><br>            showAllDoctorByDepartment(department);<br>            System.out.println(<span class="hljs-string">&quot;请选择医生&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>            <span class="hljs-comment">//记录选择的医生</span><br>            <span class="hljs-type">Doctor</span> <span class="hljs-variable">doctor</span> <span class="hljs-operator">=</span> department.getDoctors().get(ch - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">//为这个医生设置坐诊情况，这里是先得到这个医生的空的坐诊情况，将其赋给一个空集合，随后直接对其进行修改</span><br>            ArrayList&lt;Schedule&gt; schedules = doctor.getSchedules();<br><br>            <span class="hljs-comment">//对坐诊情况进行修改</span><br>            updateSchedules(schedules);<br><br>            <span class="hljs-comment">//修改该医生的每天的坐诊情况</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; schedules.size(); i++) &#123;<br>                <span class="hljs-comment">//先得到该医生每天的schedule对象，将其赋给一个空schedule对象</span><br>                <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> schedules.get(i);<br>                <span class="hljs-comment">//再对其进行修改</span><br>                updateSchedule(schedule);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 5.1更新当前及未来六天的坐诊对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateSchedules</span><span class="hljs-params">(ArrayList&lt;Schedule&gt; schedules)</span> &#123;<br>        <span class="hljs-comment">//该医生第一次坐诊()，先将每天的日期填进去，</span><br>        <span class="hljs-keyword">if</span>(schedules.isEmpty()) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br>                <span class="hljs-comment">//每循环一次创建一次schedule对象</span><br>                <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schedule</span>();<br>                <span class="hljs-comment">//获取当天（或入职）日期</span><br>                <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now();<br><br>                <span class="hljs-comment">//以下是我写错的部分，这是因为schedules集合是空的，它内部的元素状态是不存在任何元素的。</span><br>                <span class="hljs-comment">//所以无法通过get来获取元素，应该在上面创建元素</span><br><span class="hljs-comment">//                //依次获得schedules集合中的schedule对象</span><br><span class="hljs-comment">//                Schedule schedule = schedules.get(i);</span><br><br>                <span class="hljs-comment">//依次给schedule对象中的Today赋值，当天为当天日期，第二天日期加1，以此类推</span><br>                schedule.setToday(date.plusDays(i));<br>                <span class="hljs-comment">//将schedule添加到schedules集合中</span><br>                schedules.add(schedule);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//集合中有元素，去除过期（今天以前的）的时间</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; schedules.size(); i++) &#123;<br>            <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> schedules.get(i);<br>            <span class="hljs-comment">//获取当天日期</span><br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> LocalDate.now();<br>            <span class="hljs-comment">//依次获取该医生的坐诊情况中的日期</span><br>            <span class="hljs-type">LocalDate</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> schedule.getToday();<br>            <span class="hljs-comment">//依次判断该医生的坐诊情况中的日期是否与当天日期相同，若相同</span><br>            <span class="hljs-keyword">if</span>(current.equals(date)) &#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//跳出for循环</span><br>            &#125;<br>            <span class="hljs-comment">//若该日期在date之前，删除过期的schedule对象</span><br>            <span class="hljs-keyword">if</span>(current.isBefore(date)) &#123;<br>                schedules.remove(schedule);<br>                <span class="hljs-comment">//例如删除[1,2,3]中的索引为0的元素1，剩下[2,3]，如果不进行i--，接下来则会判断索引1处的元素3，这就意味着2被跳过了</span><br>                i--;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//集合中有元素，但是不够7天，补全当前和未来6天的时间[1,2,3,]</span><br>        <span class="hljs-comment">//获取schedules集合中最后一天的日期</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> schedules.get(schedules.size() - <span class="hljs-number">1</span>).getToday();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span> - schedules.size() ; i++) &#123;<br>            <span class="hljs-comment">//创建schedule对象</span><br>            <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Schedule</span>();<br>            <span class="hljs-comment">//依次给该schedule对象设置时间，+1</span><br>            schedule.setToday(date.plusDays(i+<span class="hljs-number">1</span>));<br>            schedules.add(schedule);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 5.2对每天的坐诊对象进行修改</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateSchedule</span><span class="hljs-params">(Schedule schedule)</span> &#123;<br>        <span class="hljs-comment">//判断schedule对象是否被修改，修改了则要选择是否在上午或下午排班</span><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> schedule.getToday();<br>        System.out.println(date+<span class="hljs-string">&quot;的排班如下：&quot;</span>);<br>        <span class="hljs-keyword">if</span>(!schedule.isUpdate())&#123;<br>            System.out.println(<span class="hljs-string">&quot;未排班&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//输出上午排班信息</span><br>            System.out.println(<span class="hljs-string">&quot;上午：&quot;</span>);<br>            <span class="hljs-keyword">if</span>(schedule.isMorning())&#123;<br>                System.out.println(<span class="hljs-string">&quot;坐诊时间：&quot;</span>+schedule.getMstart()+<span class="hljs-string">&quot;-&quot;</span>+schedule.getMend());<br>                System.out.println(<span class="hljs-string">&quot;可预约人数&quot;</span>+schedule.getmTotalNumber());<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;休息&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//输出下午排班信息</span><br>            System.out.println(<span class="hljs-string">&quot;下午：&quot;</span>);<br>            <span class="hljs-keyword">if</span>(schedule.isAfernoon())&#123;<br>                System.out.println(<span class="hljs-string">&quot;坐诊时间：&quot;</span>+schedule.getAstart()+<span class="hljs-string">&quot;-&quot;</span>+schedule.getAend());<br>                System.out.println(<span class="hljs-string">&quot;可预约人数&quot;</span>+schedule.getaTotalNumber());<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;休息&quot;</span>);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//上午上班时间</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">deadstime</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//上午截止时间</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">deadtime</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//下午截止时间</span><br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">deadatime</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">18</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;是否修改（y/n）&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-keyword">if</span>(rs.equals(<span class="hljs-string">&quot;y&quot;</span>)) &#123;<br><br>            schedule.setUpdate(<span class="hljs-literal">true</span>);<br><br>            System.out.println(<span class="hljs-string">&quot;是否在上午排班（y/n）&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">if</span>(answer.equals(<span class="hljs-string">&quot;y&quot;</span>)) &#123;<br><br>                schedule.setMorning(<span class="hljs-literal">true</span>);<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请输入开始坐诊时间(HH:mm:ss)；&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sdate</span> <span class="hljs-operator">=</span> sc.next();<br>                    <span class="hljs-comment">//采用try...catch语句捕捉日期格式异常的情况，以此来减少程序的bug</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">stime</span> <span class="hljs-operator">=</span> LocalTime.parse(sdate, DateTimeFormatter.ISO_LOCAL_TIME);<br>                        <span class="hljs-keyword">if</span>(stime.isBefore(deadstime)  || stime.isAfter(deadtime)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;上午开始坐诊时间只能设置在06:00:00到12:00:00之间，请重新输入：&quot;</span>);<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        schedule.setMstart(stime);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (DateTimeParseException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;时间格式错误，请输入正确的格式（HH:mm:ss）：&quot;</span>);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请输入结束坐诊时间(HH:mm:ss)；&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">edate</span> <span class="hljs-operator">=</span> sc.next();<br>                    <span class="hljs-comment">//采用try...catch语句捕捉日期格式异常的情况，以此来减少程序的bug</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">etime</span> <span class="hljs-operator">=</span> LocalTime.parse(edate, DateTimeFormatter.ISO_LOCAL_TIME);<br>                        <span class="hljs-keyword">if</span>(etime.isBefore(schedule.getMstart()) || etime.isAfter(deadtime)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;结束坐诊时间必须在开始坐诊时间之后，且不能晚于12:00:00,请重新输入：&quot;</span>);<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        schedule.setMend(etime);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (DateTimeParseException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;时间格式错误，请输入正确的格式（HH:mm:ss）：&quot;</span>);<br>                    &#125;<br>                &#125;<br><br>                System.out.println(<span class="hljs-string">&quot;请输入可预约人数：&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pnum</span> <span class="hljs-operator">=</span> sc.nextInt();<br>                schedule.setmTotalNumber(pnum);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                schedule.setMorning(<span class="hljs-literal">false</span>);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;是否在下午排班（y/n）&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">if</span>(rs1.equals(<span class="hljs-string">&quot;y&quot;</span>)) &#123;<br><br>                schedule.setAfernoon(<span class="hljs-literal">true</span>);<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请输入开始坐诊时间(HH:mm:ss)；&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">sdate</span> <span class="hljs-operator">=</span> sc.next();<br>                    <span class="hljs-comment">//采用try...catch语句捕捉日期格式异常的情况，以此来减少程序的bug</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">stime</span> <span class="hljs-operator">=</span> LocalTime.parse(sdate, DateTimeFormatter.ISO_LOCAL_TIME);<br>                        <span class="hljs-keyword">if</span>(stime.isBefore(deadtime) || stime.isAfter(deadatime)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;上午开始坐诊时间只能设置在12:00:00到18:00:00之间，请重新输入：&quot;</span>);<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        schedule.setAstart(stime);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (DateTimeParseException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;时间格式错误，请输入正确的格式（HH:mm:ss）：&quot;</span>);<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;请输入结束坐诊时间(HH:mm:ss)；&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">edate</span> <span class="hljs-operator">=</span> sc.next();<br>                    <span class="hljs-comment">//采用try...catch语句捕捉日期格式异常的情况，以此来减少程序的bug</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">etime</span> <span class="hljs-operator">=</span> LocalTime.parse(edate, DateTimeFormatter.ISO_LOCAL_TIME);<br>                        <span class="hljs-keyword">if</span>(etime.isBefore(schedule.getAstart()) || etime.isAfter(deadatime)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;结束坐诊时间必须在开始坐诊时间之后，且不能晚于18:00:00,请重新输入：&quot;</span>);<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        schedule.setAend(etime);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (DateTimeParseException e) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;时间格式错误，请输入正确的格式（HH:mm:ss）：&quot;</span>);<br>                    &#125;<br>                &#125;<br><br>                System.out.println(<span class="hljs-string">&quot;请输入可预约人数：&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pnum</span> <span class="hljs-operator">=</span> sc.nextInt();<br>                schedule.setaTotalNumber(pnum);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6.展示全部医生的坐诊详情（当天和未来6天的坐诊情况）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllDoctorInfos</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;====展示全部医生的坐诊情况====&quot;</span>);<br>        <span class="hljs-keyword">if</span>(doctors.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您还未添加医生，无坐诊信息&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//展示医生姓名，科室，上午下午坐诊情况</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; doctors.size(); i++) &#123;<br>            <span class="hljs-type">Doctor</span> <span class="hljs-variable">doctor</span> <span class="hljs-operator">=</span> doctors.get(i);<br>            System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;:&quot;</span>+doctor.getName()+<span class="hljs-string">&quot;医生&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;  所属科室：&quot;</span>+doctor.getDepartmentName());<br><br>            <span class="hljs-comment">//直接调用showAllSchedules方法</span><br>            showAllSchedules(doctor.getSchedules());<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 6.1展示该医生的每天坐诊的日期和坐诊情况</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllSchedules</span><span class="hljs-params">(ArrayList&lt;Schedule&gt; schedules)</span> &#123;<br>        <span class="hljs-keyword">if</span>(schedules.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;7天内未排班&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Schedule schedule : schedules) &#123;<br>            System.out.println(schedule.getToday()+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">if</span>(!schedule.isUpdate())&#123;<br>                System.out.println(<span class="hljs-string">&quot;未排班&quot;</span>);<br>            &#125;<br>            System.out.println(schedule.toString());<br>            System.out.println(schedule.toString1());<br>        &#125;<br>        System.out.println();<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 7.挂号预约</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appointDoctor</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;====挂号预约====&quot;</span>);<br><br>        <span class="hljs-comment">//创建新的Appointment对象</span><br>        <span class="hljs-type">Appointment</span> <span class="hljs-variable">appointment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Appointment</span>();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入要预约患者的姓名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> sc.next();<br>        appointment.setUserName(username);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入患者的性别：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> sc.next();<br>            <span class="hljs-keyword">if</span> (!Objects.equals(gender, <span class="hljs-string">&quot;女&quot;</span>) &amp;&amp; !Objects.equals(gender, <span class="hljs-string">&quot;男&quot;</span>)) &#123;<br>                System.out.println(<span class="hljs-string">&quot;性别只能为男或女，请重新输入性别：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            appointment.setSex(gender);<br><br>            System.out.println(<span class="hljs-string">&quot;请输入患者的年龄：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            appointment.setAge(age);<br><br>            System.out.println(<span class="hljs-string">&quot;请输入患者的症状：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">desc</span> <span class="hljs-operator">=</span> sc.next();<br>            appointment.setDesc(desc);<br><br>            <span class="hljs-comment">//选择科室</span><br>            showAllDepartmentInfos();<br>            System.out.println(<span class="hljs-string">&quot;请选择科室：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">de</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departments.get(de-<span class="hljs-number">1</span>);<br>            appointment.setDepartName(department.getName());<br><br>            <span class="hljs-comment">//选择医生</span><br>            showAllDoctorByDepartment(department);<br>            System.out.println(<span class="hljs-string">&quot;请选择医生：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">did</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">Doctor</span> <span class="hljs-variable">doctor</span> <span class="hljs-operator">=</span> department.getDoctors().get(did-<span class="hljs-number">1</span>);<br>            appointment.setDoctorId(doctor.getDoctorId());<br><br>            <span class="hljs-comment">//展示该医生的坐诊时间</span><br>            showAllSchedules(doctor.getSchedules());<br><br>            <span class="hljs-comment">//预约看诊时间</span><br>            System.out.println(<span class="hljs-string">&quot;请输入预约看诊时间：(yyyy-MM-dd/HH:mm:ss)&quot;</span>);<br>            OUTER:<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">adatetime</span> <span class="hljs-operator">=</span> sc.next();<br><br>                <span class="hljs-comment">//采用try...catch语句捕捉日期格式异常的情况，以此来减少程序的bug</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd/HH:mm:ss&quot;</span>);<br>                    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">adatetime1</span> <span class="hljs-operator">=</span> LocalDateTime.parse(adatetime, formatter);<br><br>                    <span class="hljs-comment">//转化日期</span><br>                    <span class="hljs-type">LocalDate</span> <span class="hljs-variable">appointDate</span> <span class="hljs-operator">=</span> adatetime1.toLocalDate();<br>                    <span class="hljs-comment">//转化时间</span><br>                    <span class="hljs-type">LocalTime</span> <span class="hljs-variable">appointTime</span> <span class="hljs-operator">=</span> adatetime1.toLocalTime();<br><br>                    <span class="hljs-comment">// 用于标记是否找到匹配的坐诊日期</span><br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>                    <span class="hljs-comment">//判断该时间该医生是否坐诊</span><br>                    INNER:<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; doctor.getSchedules().size(); i++) &#123;<br>                        <span class="hljs-comment">//记录该医生坐诊日期</span><br>                        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).getToday();<br>                        <span class="hljs-comment">//依次判断患者预约时间是否是该医生的坐诊时间</span><br>                        <span class="hljs-keyword">if</span>(appointDate.equals(date)) &#123;<br>                            found = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 找到匹配的坐诊日期，如果不使用该标记的话，则容易造成for循环中只判断第一个日期是否相同</span><br>                            <span class="hljs-comment">//判断该医生今日是否坐诊</span><br>                            <span class="hljs-type">boolean</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).isUpdate();<br>                            <span class="hljs-keyword">if</span>(!update)&#123;<br>                                System.out.println(<span class="hljs-string">&quot;该医生今日不坐诊，请重新输入：&quot;</span>);<br>                                <span class="hljs-keyword">break</span> INNER;<span class="hljs-comment">//跳出INNER，运行while(true)循环</span><br>                            &#125;<br>                            <span class="hljs-comment">//判断看诊时间在上午还是在下午(12:00:00之前还是之后)</span><br>                            <span class="hljs-type">LocalTime</span> <span class="hljs-variable">deadtime</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>                            <span class="hljs-comment">//若看诊时间在上午</span><br>                            <span class="hljs-keyword">if</span>(appointTime.isBefore(deadtime)) &#123;<br>                                <span class="hljs-comment">//判断上午是否排班</span><br>                                <span class="hljs-type">boolean</span> <span class="hljs-variable">morning</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).isMorning();<br>                                <span class="hljs-keyword">if</span>(!morning) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;该医生今日上午不坐诊，请重新输入：&quot;</span>);<br>                                    <span class="hljs-keyword">break</span> INNER;<br>                                &#125;<br>                                <span class="hljs-comment">//获得医生上午开始坐诊时间</span><br>                                <span class="hljs-type">LocalTime</span> <span class="hljs-variable">stime</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).getMstart();<br>                                <span class="hljs-comment">//获得医生上午结束坐诊时间</span><br>                                <span class="hljs-type">LocalTime</span> <span class="hljs-variable">etime</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).getMend();<br>                                <span class="hljs-keyword">if</span>(!(appointTime.isAfter(stime) &amp;&amp; appointTime.isBefore(etime))) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;请输入&quot;</span>+stime+<span class="hljs-string">&quot;-&quot;</span>+etime+<span class="hljs-string">&quot;之间的时间：&quot;</span>);<br>                                    <span class="hljs-keyword">break</span> INNER;<br>                                &#125;<br>                                appointment.setAppointDateTime(adatetime1);<br>                                System.out.println(<span class="hljs-string">&quot;恭喜预约成功！&quot;</span>);<br><br>                                <span class="hljs-comment">//将预约对象添加到集合中</span><br>                                doctor.getSchedules().get(i).getmAppointArray().add(appointment);<br>                                <span class="hljs-keyword">break</span> OUTER;<span class="hljs-comment">//预约成功后一定要跳出外层循环</span><br>                            &#125;<br><br>                            <span class="hljs-comment">//若看诊时间在下午</span><br>                            <span class="hljs-keyword">if</span>(appointTime.isAfter(deadtime)) &#123;<br>                                <span class="hljs-comment">//判断下午是否排班</span><br>                                <span class="hljs-type">boolean</span> <span class="hljs-variable">afternoon</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).isAfernoon();<br>                                <span class="hljs-keyword">if</span>(!afternoon) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;该医生今日下午不坐诊，请重新输入：&quot;</span>);<br>                                    <span class="hljs-keyword">break</span> INNER;<br>                                &#125;<br>                                <span class="hljs-comment">//获得医生下午开始坐诊时间</span><br>                                <span class="hljs-type">LocalTime</span> <span class="hljs-variable">astime</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).getAstart();<br>                                <span class="hljs-comment">//获得医生下午结束坐诊时间</span><br>                                <span class="hljs-type">LocalTime</span> <span class="hljs-variable">aetime</span> <span class="hljs-operator">=</span> doctor.getSchedules().get(i).getAend();<br>                                <span class="hljs-keyword">if</span>(!(appointTime.isAfter(astime) &amp;&amp; appointTime.isBefore(aetime))) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;请输入&quot;</span>+astime+<span class="hljs-string">&quot;-&quot;</span>+aetime+<span class="hljs-string">&quot;之间的时间：&quot;</span>);<br>                                    <span class="hljs-keyword">break</span> INNER;<br>                                &#125;<br>                                appointment.setAppointDateTime(adatetime1);<br>                                System.out.println(<span class="hljs-string">&quot;恭喜预约成功！&quot;</span>);<br><br>                                <span class="hljs-comment">//将预约对象添加到集合中</span><br>                                doctor.getSchedules().get(i).getaAppointArray().add(appointment);<br>                                <span class="hljs-keyword">break</span> OUTER;<span class="hljs-comment">//预约成功后一定要跳出外层循环</span><br>                            &#125;<br>                        &#125;System.out.println(<span class="hljs-string">&quot;没有该坐诊日期，请重新输入：&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-comment">// 如果遍历完所有坐诊日期都没有找到匹配的日期</span><br>                    <span class="hljs-keyword">if</span> (!found) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;没有该坐诊日期，请重新输入：&quot;</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (DateTimeParseException e) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;日期时间格式错误，请输入正确的格式（yyyy-MM-dd/HH:mm:ss）：&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 8.搜索某个医生当前和未来6天内的患者预约详情（展示每天预约患者的具体信息）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllAppointsBydoctor</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;====搜索某个医生当前和未来6天内的患者预约详情（展示每天预约患者的具体信息）====&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;所有医生列表如下：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; doctors.size(); i++) &#123;<br>            <span class="hljs-type">Doctor</span> <span class="hljs-variable">doctor</span> <span class="hljs-operator">=</span> doctors.get(i);<br>            System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;: &quot;</span>+doctor.getDepartmentName()+<span class="hljs-string">&quot;-&quot;</span>+doctor.getName());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;请选择你要查询的患者预约详情的医生序号：&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">doctorId</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">if</span>(doctorId &lt; <span class="hljs-number">1</span> || doctorId &gt; doctors.size()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;没有该序号，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">Doctor</span> <span class="hljs-variable">doctor</span> <span class="hljs-operator">=</span> doctors.get(doctorId-<span class="hljs-number">1</span>);<br>            ArrayList&lt;Schedule&gt; schedules = doctor.getSchedules();<br>            showAllAppointments(schedules);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 8.1展示某个医生每天的患者预约详情</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllAppointments</span><span class="hljs-params">(ArrayList&lt;Schedule&gt; schedules)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; schedules.size(); i++) &#123;<br>            <span class="hljs-type">Schedule</span> <span class="hljs-variable">schedule</span> <span class="hljs-operator">=</span> schedules.get(i);<br>            System.out.println(schedule.getToday()+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-comment">//判断该天是否排班</span><br>            <span class="hljs-keyword">if</span>(schedule.isUpdate()) &#123;<br><br>                <span class="hljs-comment">//判断该天上午是否排班</span><br>                <span class="hljs-keyword">if</span>(schedule.isMorning())&#123;<br>                    ArrayList&lt;Appointment&gt; mappointments = schedule.getmAppointArray();<br>                    <span class="hljs-keyword">if</span>(mappointments.isEmpty()) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;上午无预约详情&quot;</span>);<br>                    &#125;<br><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; mappointments.size(); j++) &#123;<br>                        System.out.println(mappointments.get(j).toString());<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">//判断该天下午是否排班</span><br>                <span class="hljs-keyword">if</span>(schedule.isAfernoon()) &#123;<br>                    ArrayList&lt;Appointment&gt; aappointments = schedule.getaAppointArray();<br>                    <span class="hljs-keyword">if</span>(aappointments.isEmpty()) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;下午无预约详情&quot;</span>);<br>                    &#125;<br><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; aappointments.size(); j++) &#123;<br>                        System.out.println(aappointments.get(j).toString());<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//注意是else,不加else就相当于即使满足if条件的情况这句话也会接着运行</span><br>                System.out.println(<span class="hljs-string">&quot;这天未排班，无患者预约详情&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 附加；展示科室列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllDepartmentInfos</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;当前科室列表如下：&quot;</span>);<br>        <span class="hljs-keyword">if</span> (departments.isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;无&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; departments.size(); i++) &#123;<br>            System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;:&quot;</span>+departments.get(i).getName());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 附加：根据科室展示对应医生列表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAllDoctorByDepartment</span><span class="hljs-params">(Department department)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;该科室的医生列表如下；&quot;</span>);<br>        <span class="hljs-keyword">if</span> (department.getDoctors().isEmpty()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;该科室暂未添加医生&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; department.getDoctors().size(); i++) &#123;<br>            System.out.println((i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;:&quot;</span>+department.getDoctors().get(i).getName());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="遇到的困难及收获："><a href="#遇到的困难及收获：" class="headerlink" title="遇到的困难及收获："></a><font size="5">遇到的困难及收获：</font></h1><ul><li><p>1、添加科室功能中出现了双层循环，此时内层循环判断科室是否存在，若存在则需要<font color="red">结束内层循环并且不执行外层循环剩余的语句</font>，重新执行外层循环。</p><ul><li><p>本来我想着只写一个break来结束内层循环就可以了，但是这样就会导致程序执行到内层循环的结束处，如下图所示：<br><img src="/image/a1.png"><br><img src="/image/a2.png"></p><p>但是这样仍会继续执行while(true)循环剩余的部分，不符合我们的需求。因此要使用<code>continue OUT</code>,这样就会执行外层循环剩下语句，当外层循环条件仍成立时，继续执行外层循环。</p></li><li><p>而如果使用<code>break OUT</code>,则会导致不执行外层循环剩下语句，无论外层循环条件是否成立，都不再循环外层循环。这里会直接跳到start()方法的while循环</p></li><li><p>注意：外层循环中符合条件的代码都运行结束之后，要使用<code>break</code>结束循环，否则它会一直循环下去。</p></li></ul></li><li><p>4、添加医生功能</p><ul><li>使用UUID类随机生成医生的id</li></ul><p><img src="/image/a3.png"></p><ul><li>输入入职日期时使用try…catch语句捕捉日期格式异常的情况，以此来减少程序的bug</li></ul></li><li><p>5、设置医生当天和未来6天的坐诊时间</p><ul><li><p>理解该功能的需求，设置可以分为创建和修改，因此可以得到的信息：①该医生第一天入职，没有任何坐诊信息，因此需要创建7天坐诊对象，添加到对应集合中；②该医生不是第一天坐诊，已有不够7天的坐诊信息，可能还存在今天之前的日期，需要删除今天之前的日期，并且补全7天的日期。因此每个医生的坐诊安排一定时今天加上之后6天的坐诊安排。</p></li><li><p>对于该系统来说，现在新创建的所有医生都是新入职，因此他们的schedule集合现在是空的。这里做出了巧妙地一点：<font color="red">先将每天的日期即变量<code>today</code>存入集合中，将其他布尔类型先初始化为false，表示这7天都未排班，之后再定义方法进行修改。</font></p></li><li><p><strong>注意：在Doctor类中，集合schedules必须要进行初始化：<code>private ArrayList&lt;Schedule&gt; schedules = new ArrayList&lt;&gt;();</code>,加上后面的new ArrayList&lt;&gt;()，否则添加对象时会出现<em>空指针错误</em>。schedule类中的Appiontment集合同理。</strong></p></li></ul></li><li><p>7、挂号预约</p><ul><li>当输入预约看诊的日期后，要通过for循环来判断所选医生坐诊这7天的日期有没有与其相同的，若if判断出相同则进行下面对应的代码，如果7个都循环结束都没有相同的，这时不相同对应的代码<code>System.out.println(&quot;没有该坐诊日期，请重新输入：&quot;);</code>既不能在if判断{}结束后直接加，也不能添加在else-if判断不相同的分支中，因为它在循环内，会输出好几次不相同时运行的代码。如下图所示：</li></ul><p><img src="/image/a5.png"></p><ul><li>但是当<code>System.out.println(&quot;没有该坐诊日期，请重新输入：&quot;);</code>这段代码直接放到for循环之外，就会出现以下情况：</li></ul><p>   <img src="/image/a4.png"></p><p>   反正就是怎么样都不省心😂</p><ul><li><font color="red">最后寻求的方法：在if判断之后前后添加上一个判断是否找到相同日期的布尔值<code>found</code>,在for循环之后，判断该布尔值是否为<code>false</code>，若为<code>false</code>则输出<code>System.out.println(&quot;没有该坐诊日期，请重新输入：&quot;);</code>。</font></li><li>而且在该方法中，我自己写出了如何通过标签和break、continue来控制双重循环🤭</li></ul></li></ul><p>主要功能实现如下：</p><p>添加医生：<br><img src="/image/a6.png" alt="**添加科室**"><br>添加医生：<br><img src="/image/a7.png" alt="**添加医生**"><br>医生坐诊设置（可设置当天和未来6天的坐诊情况）:<br><img src="/image/a8.png"><img src="/image/a9.png" alt="**医生坐诊设置**"><br>医生管理：挂号预约<br><img src="/image/a10.png"><img src="/image/a11.png"><img src="/image/a12.png" alt="**挂号预约**"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaAPI(二)——Math、System、BigDecimal、日期时间类、Arrays、Lambda、方法引用</title>
    <link href="/2025/04/21/java23/"/>
    <url>/2025/04/21/java23/</url>
    
    <content type="html"><![CDATA[<h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><p>代表数学，是一个工具类，里面提供对数据进行操作的静态方法。</p><ul><li>取绝对值：<code>int/double abs()</code></li><li>向上取整<code>double ceil()</code></li><li>向下取整<code>double floor()</code></li><li>四舍五入<code>long round()</code></li><li>取较大值,最小值<code>int max(int a,int b)，int min(int a,int b)</code></li><li>取次方<code>double pow(double a,double b)</code>:a的b次方</li><li>取0.0~1.0之间（包前不包后）的随机数<code>double random()</code></li></ul><p>代码如下：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sas">package com.itheima.d1_inner_class11;<br><br>public class Test3 &#123;<br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;-----绝对值-----&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">abs</span>(-12));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;------向上取值----&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">ceil</span>(4.001));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">ceil</span>(4.0));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;-----向下取值-----&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">floor</span>(4.999));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">floor</span>(4.0));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;-----四舍五入-----&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">round</span>(4.999));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">round</span>(4.0));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;-----取最大值、最小值-----&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">max</span>(12,13));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.<span class="hljs-meta">min</span>(12,13));<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;-----0.0~1.0随机数-----&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(Math.random());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/image/s78.png"></p><h1 id="System"><a href="#System" class="headerlink" title="System"></a>System</h1><p>System代表程序所在的系统，也是一个工具类</p><ul><li>终止当前运行的Java虚拟机<code>void exit(int status)</code>,源代码中使用的是Runtime的exit方法；status表示状态代码，非零状态码表示异常终止，一般不轻易使用。</li><li>获取当前系统的时间<code>long currentTimeMillis()</code>，指从1970年1月1日00:00:00走到此刻的总毫秒数，可以用来判断一段程序运行的时间（性能）。</li></ul><p>代码如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class11;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test3 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        long <span class="hljs-type">time</span> = <span class="hljs-keyword">System</span>.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i);<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;这段程序花费了&quot;+(<span class="hljs-keyword">System</span>.currentTimeMillis() - <span class="hljs-type">time</span>)/<span class="hljs-number">1000</span>+&quot;s&quot;);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s79.png"></p><h1 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h1><p>Runtime表示程序所在的运行环境，是一个单例类(私有)，我们自己创建的对象不能直接创建Runtime，而要通过getRuntime来创建。</p><ul><li>返回与当前Java应用程序关联的运行时对象<code>Runtime getRuntime()</code></li><li>终止当前运行的虚拟机，status表示状态代码，非零状态码表示异常终止，一般不轻易使用<code>void exit(int status)</code></li><li>获取虚拟机能够使用的处理器数<code>int availableProcessors()</code></li><li>返回Java虚拟机的内存总数<code>long totalMemory()</code>,1024 &#x3D; 1K,1024 * 1024 &#x3D; 1MB</li><li>返回Java虚拟机中的可用内存容量<code>long freeMemory()</code></li><li>启动某个程序，并返回代表程序的对象<code>Process exec(String command)</code></li><li>销毁程序<code>destroy()</code></li></ul><p>代码如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Test4 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>        <span class="hljs-keyword">Runtime</span> r = <span class="hljs-keyword">Runtime</span>.getRuntime();<br><br>        System.out.<span class="hljs-keyword">println</span>(r.availableProcessors());<br><br>        System.out.<span class="hljs-keyword">println</span>(r.totalMemory() <span class="hljs-regexp">/ 1024 /</span> <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br><br>        System.out.<span class="hljs-keyword">println</span>(r.freeMemory() <span class="hljs-regexp">/ 1024 /</span> <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br><br>        Process p = r.exec(<span class="hljs-string">&quot;E:\\JUDE-Community_v5.5.2_CN_Green\\jude.bat&quot;</span>);<span class="hljs-comment">//这里的command是绝对路径，如果在电脑环境变量中配置了程序，那么直接填入该程序的名字也可以启动</span><br>        Thread.sleep(<span class="hljs-number">5000</span>);<span class="hljs-comment">//让程序在这里暂停5秒后继续往下走</span><br>        p.destroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/image/s80.png"></p><h1 id="BigDecimal（重点）"><a href="#BigDecimal（重点）" class="headerlink" title="BigDecimal（重点）"></a>BigDecimal（重点）</h1><p><strong>用于解决浮点数运算时出现失真的问题</strong>，如下代码所示的情况：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">double</span> d1=<span class="hljs-number">0</span>.<span class="hljs-number">1</span>;<br><span class="hljs-attribute">double</span> d2=<span class="hljs-number">0</span>.<span class="hljs-number">2</span>;<br><br><span class="hljs-attribute">System</span>.out.println(d1 + d2);<br></code></pre></td></tr></table></figure><p><img src="/image/s81.png"></p><ul><li>构造器<code>BigDecimal(String val)</code>,把字符串封装成BigDecimal对象来运算</li><li><strong>将double类型数据转换成BigDecimal对象，<code>BigDecimal valueOf(double val)</code></strong></li><li>加法<code>BigDecimal add(BigDecimal b)</code></li><li>减法<code>BigDecimal subtract(BigDecimal b)</code></li><li>乘法<code>BigDecimal multiply(BigDecimal b)</code></li><li>除法<code>BigDecimal divide(BigDecimal b)</code></li><li>除法，确定精度和舍入模式<code>BigDecimal divide(BigDecimal b,精确几位,舍入模式)</code></li><li>将BigDecimal类型转换为double类型<code>double doubleValue()</code></li></ul><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test5 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-type">double</span> d1=<span class="hljs-number">0.1</span>;<br>        <span class="hljs-type">double</span> d2=<span class="hljs-number">0.2</span>;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d1 + d2);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;------BigDecimal---------&quot;);<br>        BigDecimal b1 = BigDecimal.valueOf(d1);<br>        BigDecimal b2 = BigDecimal.valueOf(d2);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1.<span class="hljs-keyword">add</span>(b2));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1.subtract(b2));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1.multiply(b2));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1.divide(b2));<br><br>        <span class="hljs-type">double</span> d3=<span class="hljs-number">0.3</span>;<br>        BigDecimal b3 = BigDecimal.valueOf(d3);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b1.divide(b3,<span class="hljs-number">2</span>,RoundingMode.HALF_UP));<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(b3.doubleValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s82.png"></p><h1 id="日期时间类"><a href="#日期时间类" class="headerlink" title="日期时间类"></a>日期时间类</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><ul><li>构造器创建新的Date对象<code>Bate()</code></li><li>拿到时间毫秒值<code>long getTime()</code></li><li>将时间毫秒值转换成日期对象<code>Date(long time)</code></li><li>直接把日期对象的时间通过setTime方法进行修改<code>void setTime(long time)</code></li></ul><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test6 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        //创建新的<span class="hljs-type">Date</span>对象<br>        <span class="hljs-type">Date</span> d = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d);<br><br>        //拿到时间毫秒值，也就是将<span class="hljs-type">Date</span>对象转换为时间毫秒值<br>        long <span class="hljs-type">time</span>=d.getTime();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">time</span>);<br><br>        //把时间毫秒值转化为日期对象，<span class="hljs-number">2</span>s之后的时间是多少,相当于修改日期对象<br>        <span class="hljs-type">time</span> += <span class="hljs-number">2</span> * <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">Date</span> dt = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>(<span class="hljs-type">time</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(dt);<br><br>        //setTime修改日期对象<br>        <span class="hljs-type">Date</span> d2 = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>        d2.setTime(<span class="hljs-type">time</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d2);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s83.png"></p><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><p>代表简单的日期格式化，可以用来把日期对象、时间毫秒值格式化成我们想要的形式。</p><ul><li>创建简单日期格式化对象，并封装时间格式<code>SimpleDateFormat(String pattern)</code></li><li>将日期格式化成日期&#x2F;时间字符串<code>String format(Date date)</code></li><li>将时间毫秒值转化为日期&#x2F;时间字符串<code>String format(Object time)</code></li></ul><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test7 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        <span class="hljs-type">Date</span> d1 = <span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d1);<br><br>        //将<span class="hljs-type">Date</span>对象转换成时间毫秒值<br>        long <span class="hljs-type">time</span> = d1.getTime();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">time</span>);<br><br>        //创建简单日期格式化对象，并封装时间格式<br>        SimpleDateFormat sdf = <span class="hljs-built_in">new</span> SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;);<br>        SimpleDateFormat sdf2 = <span class="hljs-built_in">new</span> SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sdf.format(d1));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sdf2.format(<span class="hljs-type">time</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s84.png"></p><ul><li><strong>解析日期&#x2F;时间字符串时间为Date对象<code>Date parse(String source)</code>,一般是将前端传过来的日期字符串进行解析</strong></li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">String str<span class="hljs-operator">=</span><span class="hljs-string">&quot;2004-10-18 12:00:00&quot;</span><span class="hljs-comment">;</span><br>//注意SimpleDateFormat的格式必须和被解析的日期格式相同<br>SimpleDateFormat sdf3 <span class="hljs-operator">=</span> new SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)<span class="hljs-comment">;</span><br>Date date<span class="hljs-operator">=</span>sdf3.parse(str)<span class="hljs-comment">;</span><br>System.out.println(date)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/image/s85.png"></p><h3 id="练习题：秒杀活动"><a href="#练习题：秒杀活动" class="headerlink" title="练习题：秒杀活动"></a>练习题：秒杀活动</h3><p>题目：肯德基最新上线了一个一元秒杀蛋挞的活动</p><ul><li>活动开始时间：2025年4月18日 12:00:00</li><li>活动结束时间：2025年4月18日 12:10:00</li><li>张三付款时间：2025年4月18日 12:08:56</li><li>李四付款时间：2025年4月18日 12:10:56</li></ul><p>用代码说明这两位同学有没有成功参加上秒杀活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.text.ParseException;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">beg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2025年4月18日 12:00:00&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2025年4月18日 12:10:00&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">zs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2025年4月18日 12:08:56&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ls</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2025年4月18日 12:10:56&quot;</span>;<br><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//将String对象解析成Date对象</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">datebeg</span> <span class="hljs-operator">=</span> sdf.parse(beg);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">dateend</span> <span class="hljs-operator">=</span> sdf.parse(end);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">datezs</span> <span class="hljs-operator">=</span> sdf.parse(zs);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">datels</span> <span class="hljs-operator">=</span> sdf.parse(ls);<br><br>        <span class="hljs-comment">//取到时间毫秒值更容易后续的比较</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">timebeg</span> <span class="hljs-operator">=</span> datebeg.getTime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeend</span> <span class="hljs-operator">=</span> dateend.getTime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timezs</span> <span class="hljs-operator">=</span> datezs.getTime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timels</span> <span class="hljs-operator">=</span> datels.getTime();<br><br>        System.out.println(<span class="hljs-string">&quot;张三秒杀&quot;</span>+(compare(timezs,timebeg,timeend) ? <span class="hljs-string">&quot;成功&quot;</span> : <span class="hljs-string">&quot;失败&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;李四秒杀&quot;</span>+(compare(timels,timebeg,timeend) ? <span class="hljs-string">&quot;成功&quot;</span> : <span class="hljs-string">&quot;失败&quot;</span>));<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">long</span> time,<span class="hljs-type">long</span> timebeg,<span class="hljs-type">long</span> timeend)</span>  &#123;<br>        <span class="hljs-keyword">if</span> (time &gt;= timebeg &amp;&amp; time &lt;= timeend)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s86.png"></p><h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>Calendar相当于一个日历，</p><ul><li>获取当前日历对象<code>Calendar getInstance()</code></li><li>获取当前日历中的某个信息<code>int get(int field)</code></li><li>获取日期对象<code>final Date getTime()</code></li><li>获取时间毫秒值<code>long getTimeInMillis()</code></li><li>修改日历的某个信息<code>void set(int field,int value)</code></li><li>为某个信息增加&#x2F;减少指定的值<code>void add(int field,int amount)</code></li></ul><p>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class12;<br><br>import java.util.Calendar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//得到该系统现在时间对应的日历对象</span><br>        Calendar calendar = Calendar.getInstance();<br>        System.<span class="hljs-keyword">out</span>.println(calendar);<br><br>        <span class="hljs-comment">//获取日历中的信息</span><br>        System.<span class="hljs-keyword">out</span>.println(calendar.<span class="hljs-keyword">get</span>(Calendar.YEAR));<br><br>        <span class="hljs-comment">//获取日期对象</span><br>        System.<span class="hljs-keyword">out</span>.println(calendar.getTime());<br><br>        <span class="hljs-comment">//获取时间毫秒值</span><br>        System.<span class="hljs-keyword">out</span>.println(calendar.getTimeInMillis());<br><br>        <span class="hljs-comment">//修改日历的某个信息</span><br>        calendar.<span class="hljs-keyword">set</span>(Calendar.YEAR, <span class="hljs-number">2024</span>);<br>        calendar.<span class="hljs-keyword">set</span>(Calendar.MONTH, <span class="hljs-number">9</span>);<span class="hljs-comment">//注意这里是将月份改成了10，因为日历中的月份是从0开始计数的</span><br>        System.<span class="hljs-keyword">out</span>.println(calendar);<br><br>        <span class="hljs-comment">//为某个信息增加/减少指定的值</span><br>        calendar.<span class="hljs-keyword">add</span>(Calendar.MONTH, <span class="hljs-number">2</span>);<br>        System.<span class="hljs-keyword">out</span>.println(calendar);<br>        calendar.<span class="hljs-keyword">add</span>(Calendar.MONTH, <span class="hljs-number">-2</span>);<br>        System.<span class="hljs-keyword">out</span>.println(calendar);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为；<br><img src="/image/s87.png"><br><img src="/image/s88.png"></p><h2 id="JDK8之后新增时间API"><a href="#JDK8之后新增时间API" class="headerlink" title="JDK8之后新增时间API"></a>JDK8之后新增时间API</h2><p>以上所学的起讫时间API只精确到毫秒，而JDK8之后新增时间API可以精确到纳秒。 </p><ul><li>1秒&#x3D;1000毫秒</li><li>1毫秒&#x3D;1000微秒</li><li>1微秒&#x3D;1000纳秒</li><li>1秒&#x3D;1000 000 000纳秒</li></ul><h3 id="代替Calendar"><a href="#代替Calendar" class="headerlink" title="代替Calendar"></a>代替Calendar</h3><h4 id="LocalDate-LocalTime-LocalDateTime"><a href="#LocalDate-LocalTime-LocalDateTime" class="headerlink" title="LocalDate&#x2F;LocalTime&#x2F;LocalDateTime"></a>LocalDate&#x2F;LocalTime&#x2F;LocalDateTime</h4><p>它们获取本地时间对象的方法：<code>Xxxx now()</code></p><ul><li>LocalDate：本地日期，年、月、日、星期</li><li>LocalTime：本地时间，时、分、秒、纳秒，方法与相似</li><li><strong>LocalDateTime：本地日期和时间LocalDate和LocalTime的组合，年、月、日、星期、时、分、秒、纳秒</strong></li></ul><p>以下是LocalDateTime的方法用法，LocalDate与LocalTime的用法也包含在其中。</p><table><thead><tr><th>说明</th><th>方法</th></tr></thead><tbody><tr><td>获取日期对象中的信息：年、月、日、一年中的第几天、星期几、时、分、秒、纳秒</td><td>getYear()、getMonthValue()、getDayOfMonth()、getDayOfYear()、getDayOfWeek().getValue()、getHour()、getMinute()、getSecond()、getNano()</td></tr><tr><td>修改日期对象中某个信息</td><td>withYear()、withMonth()…</td></tr><tr><td>把某个信息加多少</td><td>plusYears()、plusMonths…</td></tr><tr><td>把某个信息减多少</td><td>minusYears()</td></tr><tr><td>获取指定日期的LocalDate对象</td><td>LocalDate.of(int year,int month,int day)</td></tr><tr><td>判断2个日期对象是否相等，在前还是在后</td><td>equals()、isBefore()、isAfter()</td></tr><tr><td>将LocalDateTime转换成LocalDate和LocalTime类型</td><td>toLocalDate()、toLocalTime()</td></tr><tr><td>将LocalDate和LocalTime类型合并成LocalDateTime对象</td><td>LocalDateTime.of()</td></tr><tr><td>解析用户输入的日期</td><td>LocalDate.parse()</td></tr></tbody></table><p><font size="4"><strong>注意：这三个对象都是不可变对象，当对其某个信息进行修改时需要重新创建一个对象</strong></font></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.<span class="hljs-built_in">LocalTime</span>;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test2 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        //获取日期对象<br>        LocalDateTime ld=LocalDateTime.now();//不可变对象<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld);<br><br>        //获取日期对象中的信息<br>        <span class="hljs-type">int</span> year=ld.getYear();<br>        <span class="hljs-type">int</span> month=ld.getMonthValue();<br>        <span class="hljs-type">int</span> day=ld.getDayOfMonth();<br>        <span class="hljs-type">int</span> dayOfYear=ld.getDayOfYear();<br>        <span class="hljs-type">int</span> dayOfweek=ld.getDayOfWeek().getValue();<br><br>        <span class="hljs-type">int</span> Hour=ld.getHour();<br>        <span class="hljs-type">int</span> Minute=ld.getMinute();<br>        <span class="hljs-type">int</span> Second=ld.getSecond();<br>        <span class="hljs-type">int</span> Nanosecond=ld.getNano();<br><br><br>        //修改某个信息<br>        LocalDateTime ld2=ld.withYear(<span class="hljs-number">2004</span>);<br>        LocalDateTime ld3=ld.withMonth(<span class="hljs-number">3</span>);<br><br>        LocalDateTime ld4=ld.withHour(<span class="hljs-number">4</span>);<br>        LocalDateTime ld5=ld.withMinute(<span class="hljs-number">5</span>);<br><br>        //把某个信息加多少<br>        LocalDateTime ld6=ld.plusYears(<span class="hljs-number">4</span>);<br><br>        //把某个信息减多少<br>        LocalDateTime ld7=ld.minusMinutes(<span class="hljs-number">5</span>);<br><br>        //获取指定日期的LocalDate对象<br>        LocalDateTime ld8=LocalDateTime.<span class="hljs-keyword">of</span>(<span class="hljs-number">2004</span>,<span class="hljs-number">10</span>,<span class="hljs-number">18</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1111</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld8);<br><br>        //判断<span class="hljs-number">2</span>个日期对象是否相等，在前还是在后<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld.equals(ld2));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld.isBefore(ld3));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld.isAfter(ld4));<br><br>        //将LocalDateTime转换成LocalDate和<span class="hljs-built_in">LocalTime</span>类型<br>        LocalDate ld0 = ld.toLocalDate();<br>        <span class="hljs-built_in">LocalTime</span> lt0 = ld.toLocalTime();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld0);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(lt0);<br><br>        //将LocalDate和<span class="hljs-built_in">LocalTime</span>类型合并成LocalDateTime对象<br>        LocalDateTime LDT=LocalDateTime.<span class="hljs-keyword">of</span>(ld0,lt0);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(LDT);<br><br>        //解析日期<br>        String <span class="hljs-type">date</span> = &quot;2022-12-23&quot;;<br>        LocalDate ld1 = LocalDate.parse(<span class="hljs-type">date</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld1);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld1.getClass());<br><br>        //解析时间<br>        String <span class="hljs-type">time</span> = &quot;12:12:12&quot;;<br>        <span class="hljs-built_in">LocalTime</span> lt1 = <span class="hljs-built_in">LocalTime</span>.parse(<span class="hljs-type">time</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(lt1);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ld1.getClass());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s89.png"></p><h4 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h4><p>ZoneId代表时区Id，由于世界各个国家与地区的经度不同，各个地区的时间也有所不同，因此会划分为不同的地区。</p><ul><li>获取系统默认时区<code>systemDefault()</code></li><li>获取Java支持的全部时区Id<code>getAvailableZoneIds()</code></li><li>把某个时区id封装成ZoneId对象<code>ZoneId.of(&quot;时区&quot;)</code></li><li>获取某个时区的ZoneDateTime对象<code>ZonedDateTime.now(ZoneId zoneId)</code></li><li>获取世界标准时间<code>ZonedDateTime.now(Clock.systemUTC())</code></li><li>获取系统默认时区的ZoneDateTime对象<code>ZonedDateTime.now()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.time.Clock;<br><span class="hljs-keyword">import</span> java.time.ZoneId;<br><span class="hljs-keyword">import</span> java.time.ZonedDateTime;<br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.TimeZone;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//获取系统默认时区</span><br>        <span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId</span> <span class="hljs-operator">=</span> ZoneId.systemDefault();<br>        System.out.println(zoneId);<br><br>        <span class="hljs-comment">//获取Java支持的全部时区Id</span><br>        System.out.println(ZoneId.getAvailableZoneIds());<br><br>        <span class="hljs-comment">//把某个时区id封装成ZoneId对象</span><br>        <span class="hljs-type">ZoneId</span> <span class="hljs-variable">zoneId2</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Europe/Berlin&quot;</span>);<br><br>        <span class="hljs-comment">//ZonedDateTime指带时区的时间</span><br>        <span class="hljs-comment">//获取某个时区的ZoneDateTime对象</span><br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> ZonedDateTime.now(zoneId2);<br>        System.out.println(now);<br><br>        <span class="hljs-comment">//获取世界标准时间，上海时区和世界标准时间相差8小时</span><br>        System.out.println(ZonedDateTime.now(Clock.systemUTC()));<br><br>        <span class="hljs-comment">//获取系统默认时区的ZoneDateTime对象</span><br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<br>        System.out.println(now2);<br><br>        <span class="hljs-comment">//获取ZonedDateTime对象的某个信息，和LocalDateTime用法相同</span><br>        System.out.println(now2.getMonth());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s90.png"></p><h3 id="代替Date"><a href="#代替Date" class="headerlink" title="代替Date"></a>代替Date</h3><p>Date是可变对象，而Instant是不可变对象。</p><h4 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h4><p>Instant是时间上的某个时刻&#x2F;时间戳，包括两部分：从1970-01-01 00:00:00开始走到此刻的<strong>总秒数+不够1秒的纳秒数</strong></p><ul><li>创建Instant对象，获取此刻时间信息<code>Instant.now()</code></li><li>获取总秒数<code>long getEpochSecond()</code></li><li>获取不够1秒纳秒数<code>int getNano()</code></li><li>给某个信息加多少<code>plusSeconds(int amount)/plusNanos(int amount)</code>等</li><li>给某个信息减多少<code>minusNanos(int amount)/minusSeconds(int amount)</code>等</li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.time.Instant;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Instant对象，获取此刻时间信息</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<br>        System.out.println(now);<br><br>        <span class="hljs-comment">//获取总秒数</span><br>        System.out.println(now.getEpochSecond());<br><br>        <span class="hljs-comment">//获取不够1秒纳秒数</span><br>        System.out.println(now.getNano());<br><br>        <span class="hljs-comment">//给某个信息加多少</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> now.plusSeconds(<span class="hljs-number">1</span>);<br>        System.out.println(now2);<br><br>        <span class="hljs-comment">//给某个信息减多少</span><br>        <span class="hljs-type">Instant</span> <span class="hljs-variable">now3</span> <span class="hljs-operator">=</span> now2.minusNanos(<span class="hljs-number">1</span>);<br>        System.out.println(now3);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s91.png"><br><strong>Instant对象的作用：做代码的性能分析，或者记录用户的操作时间点</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Instant now4 <span class="hljs-operator">=</span> Instant.now()<span class="hljs-comment">;</span><br>//代码执行<br>Instant now5 <span class="hljs-operator">=</span> Instant.now()<span class="hljs-comment">;</span><br>//时间相减得到代码运行时间，也在用户某个操作下记录时间点，相当于日志<br></code></pre></td></tr></table></figure><h3 id="代替SimpleDateFormat"><a href="#代替SimpleDateFormat" class="headerlink" title="代替SimpleDateFormat"></a>代替SimpleDateFormat</h3><p>SimpleDateFormat线程不安全，若多个用户同时使用SimpleDateFormat对象，则会出现Bug；而DateTimeFormatter是线程安全的。</p><h4 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h4><ul><li>获取格式化对象<code>DateTimeFormatter ofPattern(时间格式)</code></li><li>对时间进行格式化<code>String format(时间对象)</code></li><li>LocalDateTime提供的格式化时间方法<code>String format(DateTimeFormatter formatter)</code></li><li>LocalDateTime提供的解析时间方法<code>LocalDateTime parse(CharSequence text,DateTimeFormatter formatter)</code></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个日期时间格式化器对象</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        System.out.println(now);<br><br>        <span class="hljs-comment">//对时间进行格式化</span><br>        System.out.println(formatter.format(now));<span class="hljs-comment">//正向格式化</span><br>        <span class="hljs-comment">//或者</span><br>        System.out.println(now.format(formatter));<span class="hljs-comment">//反向格式化</span><br><br>        <span class="hljs-comment">//解析时间，用LocalTime提供的的解析方法来解析</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nowStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2009-12-12 12:12:12&quot;</span>;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> LocalDateTime.parse(nowStr, formatter);<br>        System.out.println(now2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s92.png"></p><h3 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h3><h4 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h4><p>Period（一段时期）只能用来计算两个LocalDate对象相差的年数、月数、天数。</p><ul><li>创建Period对象<code>Period between(LocalDate ld1, LocalDate ld2)</code></li><li>计算相差多少年<code>int getYears()</code></li><li>计算相差多少月<code>int getMonths()</code></li><li>计算相差多少天<code>int getDays()</code></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.Period;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2004</span>,<span class="hljs-number">10</span>,<span class="hljs-number">18</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now2</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2005</span>,<span class="hljs-number">10</span>,<span class="hljs-number">19</span>);<br><br>        <span class="hljs-comment">//创建Period对象</span><br>        <span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(now, now2);<br><br>        <span class="hljs-comment">//通过period对象获取两个日期对象相差的信息</span><br>        System.out.println(period.getYears());<br>        System.out.println(period.getMonths());<br>        System.out.println(period.getDays());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s93.png"></p><h4 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h4><p>Duration（持续时间）用来计算两个事件对象相差的天数、小时数、分数、秒数、纳秒数，支持LocalTime、LocalDateTime、Instant等时间。</p><ul><li>创建Duration对象<code>Duration between(开始时间对象，截止时间对象)</code></li><li>计算相隔多少天<code>long toDays()</code></li><li>计算相隔多少小时<code>long toHours</code></li><li>计算相隔多少分钟<code>long toMinutes()</code></li><li>计算相隔多少秒<code>long toSeconds()</code></li><li>计算相隔多少毫秒<code>long toMillis()</code></li><li>计算相隔多少纳秒<code>long toNanos()</code></li></ul><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class12;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test7 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br>        LocalDateTime end = LocalDateTime.<span class="hljs-keyword">of</span>(<span class="hljs-number">2004</span>,<span class="hljs-number">10</span>,<span class="hljs-number">18</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">13</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">end</span>);<br>        LocalDateTime start = LocalDateTime.<span class="hljs-keyword">of</span>(<span class="hljs-number">2004</span>,<span class="hljs-number">10</span>,<span class="hljs-number">18</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>,<span class="hljs-number">12</span>);<br><br>        //创建Duration对象<br>        Duration duration = Duration.<span class="hljs-keyword">between</span>(<span class="hljs-keyword">start</span>, <span class="hljs-keyword">end</span>);<br><br>        //获取两个事件对象间隔的信息<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(duration.toDays());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(duration.toHours());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(duration.toMinutes());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(duration.toSeconds());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(duration.toMillis());//间隔多少毫秒<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(duration.toNanos());//间隔多少纳秒<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s94.png"></p><h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>Arrays是用来操作数组的一个工具类</p><h2 id="double型数组"><a href="#double型数组" class="headerlink" title="double型数组"></a>double型数组</h2><ul><li>返回数组内容<code>String toString(类型[] arr)</code></li><li>拷贝数组<code>类型[] copyOfRange(类型[],起始索引,结束索引)</code>，包前不包后</li><li>拷贝数组，可以指定新数组的长度<code>copyOf(类型[] arr,int newlength)</code></li><li>把数组中的元数据改为新数据又存回去<code>setAll(double[] array, IntToDoubleFuction generator)</code>,IntToDoubleFuction generator是一个匿名内部类。</li><li>对数组进行升序排序<code>void sort(类型[] arr)</code></li></ul><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.function.IntToDoubleFunction;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//返回数组内容</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">89</span>,<span class="hljs-number">77</span>,<span class="hljs-number">9</span>&#125;;<br>        System.out.println(Arrays.toString(arr));<br><br>        <span class="hljs-comment">//拷贝数组（指定范围，包钱不包后）</span><br>        <span class="hljs-type">int</span>[] arr2 = Arrays.copyOfRange(arr,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        System.out.println(Arrays.toString(arr2));<br><br>        <span class="hljs-comment">//拷贝数组，可以指定新数组的长度</span><br>        <span class="hljs-type">int</span>[] arr3 = Arrays.copyOf(arr,<span class="hljs-number">11</span>);<br>        System.out.println(Arrays.toString(arr3));<br><br>        <span class="hljs-comment">//把数组中的元数据改为新数据又存回去</span><br>        <span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">10.1</span>,<span class="hljs-number">12.1</span>,<span class="hljs-number">99</span>&#125;;<br>        Arrays.setAll(prices, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">MU</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.8</span>);<br>                <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(prices[value]);<br>                <span class="hljs-keyword">return</span> price.multiply(MU).doubleValue();<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(prices));<br><br>        <span class="hljs-comment">//对数组进行排序</span><br>        Arrays.sort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s95.png"></p><p>利用Lambda简化Arrays.setAll()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.setAll(prices, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntToDoubleFunction</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">applyAsDouble</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">MU</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.8</span>);<br>        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(prices[value]);<br>        <span class="hljs-keyword">return</span> price.multiply(MU).doubleValue();<br>    &#125;<br>&#125;);<br>                       <br>                       || Lambda转化<br>                       \/<br><br>Arrays.setAll(prices, (<span class="hljs-type">int</span> value) -&gt; &#123;<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">MU</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(<span class="hljs-number">0.8</span>);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> BigDecimal.valueOf(prices[value]);<br>    <span class="hljs-keyword">return</span> price.multiply(MU).doubleValue();<br><br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>注意：第四个方法的使用，setAll()的源码如下：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_ invoke__">setAll</span>(<span class="hljs-keyword">double</span>[] <span class="hljs-keyword">array</span>, IntToDoubleFunction generator) &#123;<br>    Objects.<span class="hljs-title function_ invoke__">requireNonNull</span>(generator);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">array</span>.length; i++)<br>        <span class="hljs-keyword">array</span>[i] = generator.<span class="hljs-title function_ invoke__">applyAsDouble</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">requireNonNull</span>(<span class="hljs-params">T obj</span>) &#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类其实就是一个对象，传到setAll()方法中首先用requireNonNull()判断该对象是否为空，不为空则循环数组，调用匿名内部类generator的方法applyAsDouble()来依次修改数组中的值。</p><h2 id="对象类型数组排序"><a href="#对象类型数组排序" class="headerlink" title="对象类型数组排序"></a>对象类型数组排序</h2><h3 id="方法一：Comparable"><a href="#方法一：Comparable" class="headerlink" title="方法一：Comparable"></a>方法一：Comparable</h3><p>首先定义一个Student对象，想要按照年龄的大小进行升序或降序排列:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class13</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;<span class="hljs-title class_">Student</span>&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> int age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">compareTo</span>(<span class="hljs-params"><span class="hljs-title class_">Student</span> o</span>) &#123;<br><br><span class="hljs-comment">//        if (this.age &gt; o.age) &#123;</span><br><span class="hljs-comment">//            return 1;</span><br><span class="hljs-comment">//        &#125;else if (this.age &lt; o.age) &#123;</span><br><span class="hljs-comment">//            return -1;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        return 0;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>-o.<span class="hljs-property">age</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>() &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Student</span>(<span class="hljs-title class_">String</span> name, int age) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> int <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">int age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：需要实现泛型接口<code>Comparable&lt;T&gt;</code>，因为要用到它的方法int compareTo(T o)，该方法可以传入任意类型的对象，它的用法是两个数两个数得进行比较，这两个数为调用方法的对象this和传入的对象o。</strong></p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//定义学生类型数组</span><br>        Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">4</span>];<br>        students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">20</span>);<br>        students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Johnee&quot;</span>, <span class="hljs-number">29</span>);<br>        students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">22</span>);<br>        students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John Smith&quot;</span>, <span class="hljs-number">23</span>);<br><br>        Arrays.sort(students);<br>        System.out.println(Arrays.toString(students));<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s96.png"><br>这里直接使用Arrays.sort()方法，是因为它的底层逻辑为通过判断compareTo()方法返回的值为-1、1还是0来对对象进行升序排序。要想实现降序排序：只需要在compareTo()方法中把this和o的位置互换即可。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><code>&lt;T&gt; void Arrays.sort(T[] arr, new Comparator&lt;? super T&gt; c)</code></p><ul><li><code>T[] arr</code>是需要排序的数组</li><li><code>new Comparator&lt;? super T&gt; c</code>是Comparator比较器对象，用来指定比较的规则（Comparator是一个接口）</li></ul><p>学生类添加一个double类型的salary：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span> salary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.salary = salary;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getSalary</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.salary = salary;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, salary=&quot;</span> + salary +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//定义学生类型数组</span><br>        Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">4</span>];<br>        students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Smith&quot;</span>, <span class="hljs-number">20</span>,<span class="hljs-number">1899.9</span>);<br>        students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Johnee&quot;</span>, <span class="hljs-number">29</span>,<span class="hljs-number">1880.8</span>);<br>        students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-number">22</span>,<span class="hljs-number">1990.0</span>);<br>        students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John Smith&quot;</span>, <span class="hljs-number">23</span>,<span class="hljs-number">1695.9</span>);<br><br>        <br>        <span class="hljs-comment">//new Comparator&lt;Student&gt;() &#123;&#125;是Comparator接口的匿名内部类</span><br>        Arrays.sort(students,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student o1, Student o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> Double.compare(o1.getSalary(),o2.getSalary());<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(students));<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：sort方法中不可以直接使用<code>return o1.salary-o2.salary;</code>，这是因为salary是double类型的，而函数返回值类型为int型，例如178.9-178.8&#x3D;0.1，此时返回值是0，则会将两个salary判断成相等；可以直接写if循环，也可以直接使用上方Double的方法compare()方法实现升序排序,它的源码如下：<br><img src="/image/s97.png"></p><p><strong>要想实现降序排序，将<code>return Double.compare(o1.getSalary(),o2.getSalary());</code>改为<code>return Double.compare(o2.getSalary(),o1.getSalary());</code>即可</strong></p><p>利用Lambda简化Arrays.sort()方法：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Arrays.sort(students,<span class="hljs-keyword">new</span> Comparator&lt;Student&gt;() &#123;<br>    @Override<br>    public int compare(Student o1, Student o2) &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getSalary(),o2.getSalary());<br>    &#125;<br>&#125;);<br>                       <br>                       || Lambda转化<br>                       <span class="hljs-string">\/</span><br><br>Arrays.sort<span class="hljs-function"><span class="hljs-params">(students,(Student o1, Student o2) -&gt; &#123;</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-keyword">return</span> Double.compare(o1.getSalary(),o2.getSalary());</span></span><br><span class="hljs-params"><span class="hljs-function">&#125;)</span>;</span><br></code></pre></td></tr></table></figure><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>Lambda是JDK8开始新增的语法形式，<strong>它的作用是只能简化函数式接口的匿名内部类的代码写法</strong></p><p><strong>注：函数式接口指的是只包括一个抽象方法的接口，也可能包含其他非抽象方法。函数式接口一般使用<code>@FunctionalInterface</code>来注解，来检查它是否为函数式接口</strong></p><p>格式：<code>(被重写方法的形参列表) -&gt; &#123;重写的代码&#125;</code></p><p>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test3</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><span class="hljs-comment">//        Animal dog = new Animal() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void run() &#123;</span><br><span class="hljs-comment">//                System.out.println(&quot;狗爬的贼快&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;;</span><br>        <br><span class="hljs-comment">//        dog.run();</span><br>        Swim s = () -&gt;&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;快乐游泳&quot;</span>);<br>        &#125;;<br>        s.swim();<br><br>        <br>    &#125;<br>&#125;<br><br>@FunctionalInterface<br><span class="hljs-keyword">interface</span> <span class="hljs-title">Swim</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swim</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上代码所示：Animal是抽象类，并非接口类，所以不可以使用Lambda表达式来简化匿名抽象类。</p><h2 id="Lambda省略规则"><a href="#Lambda省略规则" class="headerlink" title="Lambda省略规则"></a>Lambda省略规则</h2><ul><li>参数类型可以省略</li><li>如果只有一个参数，参数类型和括号()都可以省略</li><li>或只有一行代码，可以省略大括号不写，代码最后的<code>;</code>要去掉,如果又return语句<code>return</code>也要去掉</li></ul><p>Arrays.sort()方法简化路径如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scss">Arrays<span class="hljs-selector-class">.sort</span>(students,new Comparator&lt;Student&gt;() &#123;<br>    <span class="hljs-keyword">@Override</span><br>    public int compare(Student o1, Student o2) &#123;<br>        return Double<span class="hljs-selector-class">.compare</span>(o1.getSalary(),o2<span class="hljs-selector-class">.getSalary</span>());<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//简化一</span><br>Arrays<span class="hljs-selector-class">.sort</span>(students,(Student o1, Student o2) -&gt; &#123;<br>    return Double<span class="hljs-selector-class">.compare</span>(o1.getSalary(),o2<span class="hljs-selector-class">.getSalary</span>());<br>&#125;);<br><br><span class="hljs-comment">//简化二</span><br>Arrays<span class="hljs-selector-class">.sort</span>(students,(o1, o2) -&gt; &#123;<br>    return Double<span class="hljs-selector-class">.compare</span>(o1.getSalary(),o2<span class="hljs-selector-class">.getSalary</span>());<br>&#125;);<br><br><span class="hljs-comment">//简化三</span><br>Arrays<span class="hljs-selector-class">.sort</span>(students,( o1,  o2) -&gt; Double<span class="hljs-selector-class">.compare</span>(o1.getSalary(),o2<span class="hljs-selector-class">.getSalary</span>())<br>);<br><br></code></pre></td></tr></table></figure><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>简化Lambda,方法引用的标志符号“::”</p><h2 id="静态方法的引用"><a href="#静态方法的引用" class="headerlink" title="静态方法的引用"></a>静态方法的引用</h2><ul><li>格式:<code>类名::静态方法</code></li><li>使用场景：如果某个Lambda表达式只调用一个静态方法，且前后参数的形式一致</li></ul><p>新建一个Compare类，在其中定义一个静态方法,如下所示：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class13;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compare</span> </span>&#123;<br>    public static <span class="hljs-keyword">int</span> compareBySalary(Student o1, Student o2) &#123;<br>        <span class="hljs-keyword">return</span> Double.compare(o1.getSalary(),o2.getSalary());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对Arrays.sort()方法继续进行简化,调用Compare类中的静态方法compareBySalary：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Arrays.sort<span class="hljs-function"><span class="hljs-params">(students,( o1,  o2) -&gt; Compare.compareBySalary(o1,o2))</span>;</span><br><span class="hljs-function">                   ||最终结果&lt;连连看😂&gt;</span><br><span class="hljs-function">                   \/</span><br><span class="hljs-function"><span class="hljs-title">Arrays</span>.<span class="hljs-title">sort</span><span class="hljs-params">(students,Compare::compareBySalary)</span>;</span><br></code></pre></td></tr></table></figure><h2 id="实例方法的引用"><a href="#实例方法的引用" class="headerlink" title="实例方法的引用"></a>实例方法的引用</h2><ul><li>格式：<code>对象名::实例方法</code></li><li>使用场景：如果某个Lambda表达式里只调用一个实例方法，且前后参数的形式一致</li></ul><p>在Compare类中定义一个实例方法，如下所示：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">public int <span class="hljs-built_in">compareBySalary2</span>(Student o1, Student o2) &#123;<br>    return Double<span class="hljs-selector-class">.compare</span>(o1.getSalary(),o2<span class="hljs-selector-class">.getSalary</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>对Arrays.sort()方法进行简化,调用Compare类中的实例方法compareBySalary2：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Compare compare = <span class="hljs-keyword">new</span> Compare();<br>Arrays.sort<span class="hljs-function"><span class="hljs-params">(students,( o1,  o2) -&gt; compare.compareBySalary2(o1,o2))</span>;</span><br><span class="hljs-function">                   ||最终结果&lt;连连看😂&gt;</span><br><span class="hljs-function">                   \/</span><br><span class="hljs-function"><span class="hljs-title">Arrays</span>.<span class="hljs-title">sort</span><span class="hljs-params">(students,compare::compareBySalary2)</span>;</span><br></code></pre></td></tr></table></figure><h2 id="特定类型方法的引用"><a href="#特定类型方法的引用" class="headerlink" title="特定类型方法的引用"></a>特定类型方法的引用</h2><ul><li>格式：<code>类型::方法</code></li><li>使用场景：如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数是作为方法的主调，后面的所有参数都是作为该实例方法的入参</li></ul><p>定义一个字符串数组，对字符串排序：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class13</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br>        <span class="hljs-built_in">String</span>[] <span class="hljs-built_in">str</span>=&#123;<span class="hljs-string">&quot;Ac&quot;</span>,<span class="hljs-string">&quot;ad&quot;</span>,<span class="hljs-string">&quot;Bj&quot;</span>,<span class="hljs-string">&quot;bj&quot;</span>,<span class="hljs-string">&quot;ok&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>,<span class="hljs-string">&quot;dc&quot;</span>&#125;;<br><br>        <span class="hljs-comment">//按照ASCII表通过首字母进行排序</span><br>        Arrays.<span class="hljs-property">sort</span>(<span class="hljs-built_in">str</span>);<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(Arrays.<span class="hljs-property">toString</span>(<span class="hljs-built_in">str</span>));<span class="hljs-comment">//使用Arrays.toString()方法返回数组内容</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s98.png"></p><p>现在要将忽略字符串首字母大小写进行排序，Arrays.sort()方法代码如下：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//匿名内部类</span><br>Arrays.<span class="hljs-property">sort</span>(<span class="hljs-built_in">str</span>, <span class="hljs-keyword">new </span><span class="hljs-class title_">Comparator</span>&lt;<span class="hljs-built_in">String</span>&gt;() &#123;<br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span>(<span class="hljs-built_in">String</span> o1, <span class="hljs-built_in">String</span> o2) &#123;<br>        <span class="hljs-keyword">return</span> o1.<span class="hljs-property">compareToIgnoreCase</span>(o2);<br>    &#125;<br>&#125;);<br>                  ||Lambda表达式简化<br>                  \/<br>Arrays.<span class="hljs-property">sort</span>(<span class="hljs-built_in">str</span>, (o1,o2) -&gt; o1.<span class="hljs-property">compareToIgnoreCase</span>(o2));<br>                  ||特定类型方法的引用简化<br>                  \/<br>Arrays.<span class="hljs-property">sort</span>(<span class="hljs-built_in">str</span>, <span class="hljs-built_in">String</span>::compareToIgnoreCase);<br></code></pre></td></tr></table></figure><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><ul><li>格式：<code>类名::new</code></li><li>使用场景：如果某个Lambda表达式只是创建新对象，并且前后参数情况一致</li></ul><p>创建一个Car类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(<span class="hljs-type">String</span> name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.price = price;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Car&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, price=&quot;</span> + price +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类中定义一个接口，重写接口中的方法：创建一个新的Car对象<br>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义CreateCar接口的匿名内部类</span><br>        <span class="hljs-type">CreateCar</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCar</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> car.create(<span class="hljs-string">&quot;奔驰&quot;</span>,<span class="hljs-number">49</span>);<br>        System.out.println(c);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CreateCar</span>&#123;<br>    Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> price)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对匿名内部类进行简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CreateCar</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCar</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Car <span class="hljs-title function_">create</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price);<br>    &#125;<br>&#125;;<br>                  ||lambda简化<br>                  \/<br><span class="hljs-type">CreateCar</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> ((name, price) -&gt;  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>(name, price));<br>                  ||构造器引用简化<br>                  \/<br><span class="hljs-type">CreateCar</span> <span class="hljs-variable">car</span> <span class="hljs-operator">=</span> Car::<span class="hljs-keyword">new</span>;<br></code></pre></td></tr></table></figure><p><strong>一般不会刻意去写最终简化的语句，只有遇到了才会去简化</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaAPI(一)——Object(s)、包装类、StringBuilder/StringBuffer/StringJoiner</title>
    <link href="/2025/04/12/java22/"/>
    <url>/2025/04/12/java22/</url>
    
    <content type="html"><![CDATA[<p>Java API是java提供给我们的程序，方便我们完成功能，其构成也是多个类组成的包</p><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><p>Object类是所有类的祖宗类,所以Java中的所有类的对象都可以直接使用Object类中提供的一些方法</p><ul><li>equals()<ul><li>基本作用：判断两个对象的地址是否相同，与<code>==</code>相同。</li><li>所以一般情况下需要重写，用来判断两个对象内容是否相同</li></ul></li><li>toString()<ul><li>基本作用：返回对象的字符串形式</li><li>让子类重写，以便返回子类对象的内容</li></ul></li><li>clone()<ul><li>基本作用：克隆一个相同的对象</li></ul></li></ul><p>定义一个Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class10;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">double</span>[] grades;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, <span class="hljs-type">double</span>[] grades)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.grades = grades;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] getGrades() &#123;<br>        <span class="hljs-keyword">return</span> grades;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGrades</span><span class="hljs-params">(<span class="hljs-type">double</span>[] grades)</span> &#123;<br>        <span class="hljs-built_in">this</span>.grades = grades;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, grades=&quot;</span> + Arrays.toString(grades) +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp; Objects.equals(name, student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) <span class="hljs-built_in">super</span>.clone();<br>        stu.grades = stu.grades.clone();<br>        <span class="hljs-keyword">return</span> stu;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意：要想重写clone方法必须要实现Cloneable类：implements Cloneable</strong>  </p><p>测试类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class10;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Student s1=<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        System.<span class="hljs-keyword">out</span>.println(s1.toString());<br>        Student s2=<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br>        System.<span class="hljs-keyword">out</span>.println(s2.toString());<br><br>        System.<span class="hljs-keyword">out</span>.println(s1.<span class="hljs-keyword">equals</span>(s2));<br><br>        <span class="hljs-comment">//采用clone()克隆s1对象，将其类型强转为Student</span><br>        Student s3= (Student) s1.clone();<br>        System.<span class="hljs-keyword">out</span>.println(s3);<span class="hljs-comment">//调用了Student中的toString()方法</span><br><br>        System.<span class="hljs-keyword">out</span>.println(s1.getGrades());<br>        System.<span class="hljs-keyword">out</span>.println(s3.getGrades());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：采用clone克隆的对象可以调用被复制的对象的类中的方法</strong><br>运行结果：<br><img src="/image/s71.png"></p><p><font size="5">以上是一种浅克隆,所以数组的地址相同</font></p><h2 id="浅克隆与深克隆"><a href="#浅克隆与深克隆" class="headerlink" title="浅克隆与深克隆"></a>浅克隆与深克隆</h2><ul><li>浅克隆：基本类型对象直接拷贝内容，引用类型对象（如String）拷贝的只是地址</li><li>深克隆：基本类型对象直接拷贝内容，引用类型对象（如String）拷贝的只是地址，其他对象（如数组）不会拷贝地址，而是会创建新对象</li></ul><p><font size="5"><strong>实现深克隆</strong></font></p><p>修改重写的clone方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) <span class="hljs-built_in">super</span>.clone();<br>    stu.grades = stu.grades.clone();<br>    <span class="hljs-keyword">return</span> stu;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行：<br><img src="/image/s72.png"><br><strong>发现克隆的数组的地址不相同了，这是因为创建了新的数组</strong></p><h1 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h1><p>Objects是一个工具类，提供了很多操作对象的静态方法给我们使用</p><ul><li><strong>equals()</strong>:先做非空判断，再比较两个对象，相比于String自带的equals更加安全</li><li>isNull():判断对象是否为空，为空则为true</li><li>nonNull():判断对象是否不为空，不为空则为true</li></ul><p>代码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class11</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Objects</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">String</span> str1=<span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">String</span> str2=<span class="hljs-string">&quot;aaa&quot;</span>;<br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(str1.<span class="hljs-title function_">equals</span>(str2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果:<br><img src="/image/s73.png"><br><strong>如上图所示，采用String自带的equals产生了空指针异常</strong></p><p>若采用Objects自带的equals方法则不会出错：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">System.<span class="hljs-keyword">out</span>.println(Objects.<span class="hljs-keyword">equals</span>(str1, str2));<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/image/s74.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Objects.<span class="hljs-keyword">isNull</span>(str1));<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Objects.nonNull(str1));<br></code></pre></td></tr></table></figure><p>运行结果为： </p><p><img src="/image/s75.png"></p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>包装类是把基本数据类型的数据包装成对象</p><table><thead><tr><th>基本数据类型</th><th>对应的包装类（引用数据类型）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td><strong>int</strong></td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td><strong>char</strong></td><td><strong>Character</strong></td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><ul><li>将基本数据类型转换为包装类型<code>Integer a=Integer.valueOf(12)</code></li><li>自动装箱，基本数据类型自动转换为包装类型<code>Integer b=12</code></li><li>自动拆箱,可以自动把包装类型的对象转化为对应的基本类型数据<code>int a4=a</code>;<strong>自动拆箱主要使用在集合中</strong></li><li>把基本类型或包装类型数据转换为字符串<code>toString()</code></li><li>把字符串类型的数值转换成对应的基本类型<code>Integer.valueOf</code><ul><li>一般在网页中用户输入字符串类型，但在后期需要转换城基本类型。</li></ul></li></ul><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br><br>       //将基本数据类型转换为包装类型<br>       <span class="hljs-type">Integer</span> a=<span class="hljs-type">Integer</span>.valueOf(<span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br><br>        //自动装箱，基本数据类型自动转换为包装类型<br>        <span class="hljs-type">Integer</span> b=<span class="hljs-number">12</span>;<br><br>        //自动拆箱,可以自动把包装类型的对象转化为对应的基本类型数据<br>        <span class="hljs-type">int</span> a4=a;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a4);<br><br>        //集合中的自动拆箱的应用<br>        ArrayList&lt;<span class="hljs-type">Integer</span>&gt; list=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();//集合和泛型不能使用基本数据类型<br>        list.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">int</span> c=list.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);//自动拆箱<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(c);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;---------------------&quot;);<br><br>        //把基本类型或包装类型数据转换为字符串<br>        <span class="hljs-type">Integer</span> d=<span class="hljs-number">23</span>;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d.toString()+<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">Integer</span>.toString(d)+<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d + &quot;ssss&quot;);<br><br>        //把字符串类型的数值转换成对应的基本类型<br>        String str=&quot;23&quot;;<br>        <span class="hljs-type">int</span> i=<span class="hljs-type">Integer</span>.parseInt(str);<br>        <span class="hljs-type">int</span> i1=<span class="hljs-type">Integer</span>.valueOf(str);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1+<span class="hljs-number">1</span>);<br><br>        String doubl=&quot;77.2&quot;;<br>        <span class="hljs-type">double</span> dd1=<span class="hljs-type">Double</span>.parseDouble(doubl);<br>        <span class="hljs-type">double</span> dd=<span class="hljs-type">Double</span>.valueOf(doubl);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(dd+<span class="hljs-number">0.8</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：把字符串类型的数值转换成对应的基本类型直接使用valueOf即可，这样就不需要使用parseInt这种方法（需要考虑变为什么类型）</strong></p><h1 id="StringBuilder与StringBuffer"><a href="#StringBuilder与StringBuffer" class="headerlink" title="StringBuilder与StringBuffer"></a>StringBuilder与StringBuffer</h1><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder表示可变字符串对象，相当于是一个容器，它里面装的字符串是可以改变的，就是用来操作字符串的。</p><ul><li>（有参无参）构造器<code>StringBuilder()、StringBuilder(String str)</code></li><li>拼接字符串：<code>append()</code></li><li>支持链式编程：<code>append().append()...</code></li><li>反转操作：<code>reverse()</code></li><li>返回字符串长度：<code>length()</code></li><li>将StringBuilder对象转换成String对象：<code>toString()</code></li></ul><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class11;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        StringBuilder s=<span class="hljs-built_in">new</span> StringBuilder(&quot;abc&quot;);<br><br>        s.append(&quot;111&quot;).append(<span class="hljs-number">222</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s);<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.reverse());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;s长度为&quot;+s.length());<br><br>        String s1=s.toString();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s.getClass());<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s1.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s76.png"></p><p><font size="5"><strong>经典题：为什么操作字符串建议使用StringBuilder，而不是使用String</strong></font></p><p>实现拼接字符串”abc”1000000次：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//采用String</span><br><span class="hljs-comment">//        String s=&quot;&quot;;</span><br><span class="hljs-comment">//        for (int i = 1; i &lt;= 1000000; i++) &#123;</span><br><span class="hljs-comment">//            s=s+&quot;abc&quot;;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        System.out.println(s);</span><br><br><br>        <span class="hljs-comment">//采用StringBuilder</span><br>        StringBuilder s=<span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000000</span>; i++) &#123;<br>            s.append(<span class="hljs-string">&quot;abc&quot;</span>);<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行时发现采用String的结果输出所需时间大约需2分钟，而采用StringBuilder所需时间大约为1秒，效率极高</strong></p><p><strong>因此当需要频繁拼接，修改字符串时建议采用StringBuilder。</strong></p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer与StringBuilder用法是相同的，但是StringBuilder相比于StringBuilder线程更加安全；当我做一个系统需要多人访问StringBuilder对象，这是建议改成StringBuffer更加安全。</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>将数组的结果以[11,22,33]这样的格式输出</p><p>代码如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Test2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        System.out.<span class="hljs-keyword">println</span>(getArrayDate(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String getArrayDate(<span class="hljs-keyword">int</span>[] arr)&#123;<br>        StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();<br>        sb.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;<br>            sb.<span class="hljs-keyword">append</span>(arr[i]+<span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>        sb.<span class="hljs-keyword">append</span>(arr[arr.length-<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s77.png"></p><h2 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h2><p>StringJoiner与StringBuilder相同，也是一个容器，用来操作字符串</p><ul><li>构造器：<code>StringJoiner(间隔符号)</code>、<code>StringJoiner(间隔符号,开始符号，结束符号)</code></li><li>添加数据返回StringJoiner对象：<code>add()</code>；a（）内的内容为String类型</li><li>返回长度：<code>length()</code></li><li>返回字符串：<code>toString()</code></li></ul><p>改写上方练习题，运行结果相同：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.d1_inner_class11;<br><br><span class="hljs-keyword">import</span> java.util.StringJoiner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">getArrayDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>&#125;));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> <span class="hljs-title">getArrayDate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span></span>&#123;<br>        StringJoiner sb=<span class="hljs-keyword">new</span> <span class="hljs-built_in">StringJoiner</span>(<span class="hljs-string">&quot;, &quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            sb.<span class="hljs-built_in">add</span>(arr[i]+<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//在后面拼接上&quot;&quot;，这就变成了String类型</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.<span class="hljs-built_in">toString</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java泛型</title>
    <link href="/2025/04/11/java18/"/>
    <url>/2025/04/11/java18/</url>
    
    <content type="html"><![CDATA[<h1 id="利用ArrayList集合认识泛型"><a href="#利用ArrayList集合认识泛型" class="headerlink" title="利用ArrayList集合认识泛型"></a>利用ArrayList集合认识泛型</h1><ul><li>不限制元素类型（支持泛型）：<code>ArrayList list = new ArrayList();</code></li><li>支持一种非基本类型的类型：<code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</code></li><li>支持一种类类型：<code>ArrayList&lt;Student&gt; list = new ArrayList&lt;&gt;();</code></li></ul><h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><p>&lt;&gt;中的E可以指任何类型，相当于一个表示类型的形参</p><h2 id="一个形参的泛型类"><a href="#一个形参的泛型类" class="headerlink" title="一个形参的泛型类"></a>一个形参的泛型类</h2><p>Earray<E>:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class7;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Earray&lt;E&gt; &#123;<br><br>    private <span class="hljs-keyword">Object</span>[] <span class="hljs-keyword">array</span>=<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[<span class="hljs-number">10</span>];//用<span class="hljs-keyword">Object</span>类型数组存储元素，<span class="hljs-keyword">Object</span>则表示可以是任何类型<br>    private <span class="hljs-type">int</span> <span class="hljs-keyword">index</span>;<br><br>    //模拟添加元素<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> <span class="hljs-keyword">add</span>(E e)&#123;<br>        <span class="hljs-keyword">array</span>[<span class="hljs-keyword">index</span>++]=e;//++是为了添加元素时的索引递增，而不一直是同一个索引g<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    //模拟得到元素<br>    <span class="hljs-built_in">public</span> E <span class="hljs-keyword">get</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>)&#123;<br>        <span class="hljs-keyword">return</span> (E) <span class="hljs-keyword">array</span>[<span class="hljs-keyword">index</span>];//利用强转将<span class="hljs-keyword">Object</span>类转化为E类<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类Test：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class7;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Earray&lt;String&gt; array=<span class="hljs-keyword">new</span> Earray&lt;&gt;();<span class="hljs-comment">//创建Earray&lt;String&gt;类型的集合</span><br><br>        array.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>        array.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;python&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(array.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>));<span class="hljs-comment">//输出结果为“python”</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多个形参的泛型类"><a href="#多个形参的泛型类" class="headerlink" title="多个形参的泛型类"></a>多个形参的泛型类</h2><p>Earray2.java:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">package com.itheima.d1_inner_class7;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Earray2</span>&lt;<span class="hljs-symbol">E,<span class="hljs-symbol">T</span></span>&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> put(E e,T t)&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类中定义<code>Earray2&lt;String,Integer&gt; arr2=new Earray2&lt;&gt;();</code>，此后调用泛型类的方法的参数为String,Integer</p><h2 id="继承其他类的形参的泛型类"><a href="#继承其他类的形参的泛型类" class="headerlink" title="继承其他类的形参的泛型类"></a>继承其他类的形参的泛型类</h2><p>Cat类、Dog类继承Animal类<br>Earray3.java:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class7;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Earray3&lt;E</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal&gt;</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>此后在测试类中只能定义Animal类的子类类型<code>Earray2&lt;Cat&gt; arr2=new Earray2&lt;&gt;();</code>、<code>Earray2&lt;Dog&gt; arr2=new Earray2&lt;&gt;();</code></p><h1 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h1><p>目标：实现根据名称查询学生Student、老师Teacher的数据以及保存对象数据</p><p>定义泛型接口Data<E></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class8;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Data</span>&lt;E&gt; &#123;<span class="hljs-comment">//这里的E既可以是任意实现Data方法的类类型</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>;<br>    <span class="hljs-comment">//根据名字获取信息</span><br>    ArrayList&lt;E&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>当然接口泛型的形参也可以继承其他类，实参只可以是父类的子类类型</strong></p><p>Student.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class8;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span>&lt;Student&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Student student)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Student&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Teacher.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class8;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Data</span>&lt;Teacher&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Teacher teacher)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Teacher&gt; <span class="hljs-title function_">getByName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h1><p><code>修饰符 &lt;&gt; 返回值 方法名()&#123;&#125;</code></p><p>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class9;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(Test(<span class="hljs-string">&quot;aaa&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">Test</span>(<span class="hljs-params">T t</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果为aaa;    </p><p><strong><code>public static &lt;T&gt; T Test(T t)&#123;return t; &#125;</code>表示T泛型的方法，返回值类型为T，形参为T类型的t。前面的<code>&lt;T&gt;</code>是为了告诉程序使用了<code>&lt;T&gt;</code>这个泛型</strong></p><h2 id="泛型方法与继承"><a href="#泛型方法与继承" class="headerlink" title="泛型方法与继承"></a>泛型方法与继承</h2><p>实现多辆车进行比赛</p><p>定义一个Car类，Benz类，Aodi类，Dogs类；Benz类，Aodi类都继承Car类。在Test测试类中写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class9;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        ArrayList&lt;Car&gt; cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        cars.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Benz</span>());<br>        Test(cars);<br><br>        <span class="hljs-comment">//出错</span><br>        ArrayList&lt;Benz&gt; baenz=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        baenz.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Benz</span>());<br>        Test(baenz);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(ArrayList&lt;Car&gt; cars)</span> &#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中以下部分会出错</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ArrayList&lt;Benz&gt; baenz<span class="hljs-operator">=</span>new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br>baenz.add(new Benz())<span class="hljs-comment">;</span><br>Test(baenz)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>注意：虽然Benz是Car的子类，但<code>ArrayList&lt;Benz&gt;</code>与<code>ArrayList&lt;Car&gt;</code>本质上是不同的数据类型。所以将<code>ArrayList&lt;Benz&gt;</code>传到Test方法中是错误的</strong></p><p>将Test方法改成如下形式：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">(ArrayList&lt;T&gt; cars)</span> </span>&#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>表示可以接收一切类型的集合，这样ArrayList<Benz>也可以传到Test中</strong></p><p>如若继续在psvm中添加以下代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ArrayList&lt;Dogs&gt; dog <span class="hljs-operator">=</span> new ArrayList&lt;&gt;()<span class="hljs-comment">;</span><br>dog.add(new Dogs())<span class="hljs-comment">;</span><br>Test(dog)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>发现Dogs型也可以传到Test中，但我们不能够让Dogs对象传到Test中。  </p><p>这时只要将Test方法稍加修改:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> Car&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">(ArrayList&lt;T&gt; cars)</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>以上代码将T继承Car，这样Test将不再接受除Car类及其子类的其他类类型的集合</strong></p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> Car&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">(ArrayList&lt;T&gt; cars)</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>以上方法可以直接使用通配符？来定义，也可达到相同的效果，如下所示：  </p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Test</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-keyword">extends</span> Car&gt; cars)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong><code>? extends Car</code>表示上限，也就是说只能接受Car类型以及它的子类类型；与其相反的有<code>？super Car</code>表示下限，表示只能接收Car类型以及它的父类类型。</strong></p><h1 id="泛型注意事项"><a href="#泛型注意事项" class="headerlink" title="泛型注意事项"></a>泛型注意事项</h1><ul><li>泛型擦除：泛型是工作在编译阶段的，一旦程序编译成class文件，class文件中就不存在泛型了。</li></ul><p>例如以下源代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ArrayList&lt;String&gt; <span class="hljs-attribute">arry</span>=new ArrayList&lt;&gt;();<br>arry.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;A&quot;</span>);<br>arry.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;B&quot;</span>);<br>String <span class="hljs-attribute">a</span>=arry.get(0);<br>System.out.println(a);<br></code></pre></td></tr></table></figure><p>class类文件：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ArrayList arry<span class="hljs-operator">=</span>new ArrayList()<span class="hljs-comment">;</span><br>arry.add(<span class="hljs-string">&quot;A&quot;</span>)<span class="hljs-comment">;</span><br>arry.add(<span class="hljs-string">&quot;B&quot;</span>)<span class="hljs-comment">;</span><br>String a<span class="hljs-operator">=</span>(String) arry.get(<span class="hljs-number">0</span>)<span class="hljs-comment">;//利用强转</span><br>System.out.println(a)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>泛型不支持基本类型，只支持引用类型和类类型,基本类型所对应的引用类型：  <ul><li>int——&gt;Ingrater</li><li>double——&gt;Double</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java枚举</title>
    <link href="/2025/04/08/java21/"/>
    <url>/2025/04/08/java21/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举实际上是一个特殊的类，切不可被继承</p><h2 id="创建枚举类"><a href="#创建枚举类" class="headerlink" title="创建枚举类"></a>创建枚举类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class5</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> A &#123;<br><br>    <span class="hljs-comment">//注意：枚举类的第一行必须罗列的是枚举对象的名字</span><br>    X,Y,Z;<br><br>    <span class="hljs-comment">//后续才可以创建私有成员和方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：枚举类第一行的枚举对象是私有final型，且是枚举类型的对象，实际代码如下：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> A X=<span class="hljs-keyword">new</span> A();    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> A Y=<span class="hljs-keyword">new</span> A();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> A Z=<span class="hljs-keyword">new</span> A();<br></code></pre></td></tr></table></figure><p>后续需要通过A对象进行调用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//通过A对象进行调用</span><br>        A a=A.X;<br>        System.<span class="hljs-keyword">out</span>.println(a);<br><br>        <span class="hljs-comment">//枚举类的构造器是私有的，不可在外部类进行创建对象</span><br>        <span class="hljs-comment">//A a2=new A();</span><br><br>        <span class="hljs-comment">//枚举类提供了很多API供我们使用</span><br>        <span class="hljs-comment">//获得所有枚举值的数组</span><br>        A[] a1 = A.values();<br>        A a2 = A.valueOf(<span class="hljs-string">&quot;Z&quot;</span>);<span class="hljs-comment">//拿到对象Z</span><br>        System.<span class="hljs-keyword">out</span>.println(a2.name());<span class="hljs-comment">//获取a2的名称</span><br>        System.<span class="hljs-keyword">out</span>.println(a2.ordinal());<span class="hljs-comment">//获取a2的索引</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：枚举类的构造器是私有的，不可在外部类进行创建对象</strong></p><h2 id="抽象枚举类"><a href="#抽象枚举类" class="headerlink" title="抽象枚举类"></a>抽象枚举类</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">d1_inner_class5</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> B &#123;<br><br>    <span class="hljs-comment">//存在抽象方法go(),则不能直接创建B类对象，而是要通过构造函数来创建对象并重写go方法</span><br>    <span class="hljs-title function_">X</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">go</span>(<span class="hljs-params"></span>) &#123;<br><br>        &#125;<br>    &#125;,<span class="hljs-title function_">Y</span>(<span class="hljs-params"><span class="hljs-string">&quot;张三&quot;</span></span>)&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">go</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title function_">getName</span>()+<span class="hljs-string">&quot;再跑~~&quot;</span>);<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>) &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br><br>    <span class="hljs-title function_">B</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">go</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="枚举的应用场景"><a href="#枚举的应用场景" class="headerlink" title="枚举的应用场景"></a>枚举的应用场景</h2><p>做信息标志和分类（性别）<br>通常情况下我们会建立一个常量类来存储常量，Constant类：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Constant</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> BOY=<span class="hljs-number">0</span>;<span class="hljs-comment">//男</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> GIRL=<span class="hljs-number">1</span>;/女<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类Test.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        check(Constant.BOY);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> sex</span>)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (sex)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;男&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;女&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为“男”</p><p>但通常情况下，我们在网页中是通过按钮来实现性别选择的，所以可以采用枚举类Constant2.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Constant2 &#123;<br>    BOY,GIRL;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类Test.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        check(Constant2.BOY);<br>    &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span>(<span class="hljs-params">Constant2 sex</span>)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (sex)&#123;<br>            <span class="hljs-keyword">case</span> BOY:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;男&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GIRL:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;女&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果仍为“男”。<br><strong>注意：这两种方法不存在互相淘汰的情况，各自有各自适用的场合</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java内部类</title>
    <link href="/2025/04/07/java20/"/>
    <url>/2025/04/07/java20/</url>
    
    <content type="html"><![CDATA[<h1 id="Java内部类"><a href="#Java内部类" class="headerlink" title="Java内部类"></a>Java内部类</h1><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>成员内部类是类中的一个普通成员，类似于之前的成员方法、成员变量。如下代码所示：Inner就是成员内部类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.di_inner_class1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age=<span class="hljs-number">66</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String a=<span class="hljs-string">&quot;qqqq&quot;</span>;<br><br>    <span class="hljs-comment">//成员内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age=<span class="hljs-number">88</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String schoolName;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-comment">//在成员内部类中定义方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(age);<span class="hljs-comment">//输出的是内部类中的age</span><br>            System.<span class="hljs-keyword">out</span>.println(a);<span class="hljs-comment">//输出的是外部类中的a</span><br>            <span class="hljs-built_in">int</span> age=<span class="hljs-number">66</span>;<br>            System.<span class="hljs-keyword">out</span>.println(age);<span class="hljs-comment">//就近原则，输出66</span><br><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">this</span>.age);<span class="hljs-comment">//输出的是内部类中的age</span><br>            System.<span class="hljs-keyword">out</span>.println(Outer.<span class="hljs-keyword">this</span>.age);<span class="hljs-comment">//输出的是外部类中的age</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建内部类成员对象的格式：<code>外部类名.内部类名 对象名=new 外部类名().new 内部类名()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.di_inner_class1;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        //创建成员内部类<span class="hljs-keyword">inner</span>对象<br>        <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">inner</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>().<span class="hljs-built_in">new</span> <span class="hljs-keyword">Inner</span>();<br>        <span class="hljs-keyword">inner</span>.Test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/image/s21.png"></p><p><strong>注意：JDK16之后成员内部类也能定义静态成员了</strong></p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>静态内部类是由static修饰的内部类。<br>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String str;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m;<br><br>    <span class="hljs-comment">//静态内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> &#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> a;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test</span>()</span> &#123;<br>            <span class="hljs-comment">//内部静态方法不能访问外部类对象的实例成员变量</span><br>            <span class="hljs-comment">//System.out.println(m);</span><br>            <br>            <span class="hljs-comment">//内部静态方法可以访问外部类对象的静态成员变量，因为它只有一个，可以被共享</span><br>            System.<span class="hljs-keyword">out</span>.println(str);<br>            <br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-comment">//外部静态方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test2</span>()</span> &#123;<br>        <span class="hljs-comment">//静态方法可以直接访问外部类对象的静态成员变量，因为它只有一个，可以被共享</span><br>        System.<span class="hljs-keyword">out</span>.println(str);<br>        <br>        <span class="hljs-comment">//静态方法不能直接访问外部类对象的实例成员变量</span><br>        <span class="hljs-comment">//System.out.println(m);</span><br>        <br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>由以上代码可知：外部静态方法和静态内部类中的方法访问外部静态变量和实例变量的情况是相同的：外部类的静态成员变量都可以被访问，因为它只有一个，可以被共享；而外部实例变量只能通过外部对象进行访问</strong></p><p>创建静态内部类成员对象的格式：<code>外部类名.内部类名 对象名=new 外部类名().内部类名()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.itheima.d1_inner_class2;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Test &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br>        //创建静态内部类<br>        <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span> <span class="hljs-keyword">inner</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Outer</span>.<span class="hljs-keyword">Inner</span>();<br>        <span class="hljs-keyword">inner</span>.Test();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="匿名内部类（重点）"><a href="#匿名内部类（重点）" class="headerlink" title="匿名内部类（重点）"></a>匿名内部类（重点）</h2><p>匿名内部类是一种特殊的局部内部类，所谓匿名：指的是程序员不需要为这个类声明名字。</p><p>通常情况下，我们会写以下代码，为抽象类Animal创建一个继承它的子类Cat，在子类中重写方法cry()</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Animal cat=<span class="hljs-keyword">new</span> Cat();<br>        cat.cry();<br>        <br>    &#125;<br>    <br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-title">extends</span> <span class="hljs-title">Animal</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而匿名内部类的用法就是不需要创建一个继承父类的子类，更加方便，创建形式为</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">new</span> 类或接口(参数值)&#123;<br>    类体（一般是方法重写）<br>    &#125;<br></code></pre></td></tr></table></figure><p>如下代码所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//程序会将该匿名内部类编译成一个子类，并且会创建出一个子类对象</span><br>        Animal a=<span class="hljs-keyword">new</span> Animal()&#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span> &#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>            &#125;<br>        &#125;;<br>        a.cry();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>深究原理Class文件，发现多出了Test$1.class文件，如下所示：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.itheima.d1_inner_class3;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test$1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-type">Test</span>$<span class="hljs-number">1</span>() &#123;<br>    &#125;<br><br>    public void cry() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序将自动创建一个子类Test$1来继承父类</p><h3 id="匿名内部类的常见使用场景"><a href="#匿名内部类的常见使用场景" class="headerlink" title="匿名内部类的常见使用场景"></a>匿名内部类的常见使用场景</h3><p>通常作为一个参数传输给方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.d1_inner_class3;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>       <span class="hljs-comment">//调用howl，将匿名内部类作为一个参数传到howl方法中        </span><br>        howl(<span class="hljs-keyword">new</span> Animal()&#123;<br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span> &#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br><br>    <span class="hljs-comment">//定义一个静态方法howl，接收Animal类型参数a，调用a对象的方法cry</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">howl</span>(<span class="hljs-params">Animal a</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;开始叫----------&quot;</span>);<br>        a.cry();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用howl部分与以下代码作用相同，只不过更加简洁：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Animal a=<span class="hljs-keyword">new</span> Animal()&#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;喵喵&quot;</span>);<br>    &#125;<br>&#125;;<br>howl(a); <br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s22.png"></p><h3 id="匿名内部类在开发中的真实应用场景"><a href="#匿名内部类在开发中的真实应用场景" class="headerlink" title="匿名内部类在开发中的真实应用场景"></a>匿名内部类在开发中的真实应用场景</h3><p>创建一个窗口，添加登录按钮，给登录按钮添加监听事件，这里用到匿名内部类，一般我们不会专门写匿名内部类,而是在需要的时候再去用。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.di_inner_class4;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.event.ActionEvent;<br><span class="hljs-keyword">import</span> java.awt.event.ActionListener;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//GUI界面</span><br><br>        <span class="hljs-comment">//创建窗口</span><br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;登录界面&quot;</span>);<br><br>        <span class="hljs-type">JPanel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<span class="hljs-comment">//创建桌布</span><br>        frame.add(panel);<br><br>        JButton btn=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;登录&quot;</span>);<br>        panel.add(btn);<span class="hljs-comment">//将按钮加到桌布上</span><br><br>        <span class="hljs-comment">//给按钮绑定单击事件监听器，这里使用了匿名内部类</span><br>        btn.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                JOptionPane.showMessageDialog(frame,<span class="hljs-string">&quot;登录成功&quot;</span>);<br>            &#125;<br><br>        &#125;);<br><br>        <span class="hljs-comment">//lambda表达式</span><br>        <span class="hljs-comment">//btn.addActionListener(e -&gt; JOptionPane.showMessageDialog(frame,&quot;登录成功&quot;));</span><br><br><br>        frame.setSize(<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>        frame.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s23.png"></p><p><strong>如上代码所示，程序提供的接口ActionListener直接采用匿名内部类进行调用。</strong></p><p><strong>因此，匿名内部类的最终目的是简化代码，后续学到的lanmda表达式将更加简洁</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟ATM机系统</title>
    <link href="/2025/04/06/java19/"/>
    <url>/2025/04/06/java19/</url>
    
    <content type="html"><![CDATA[<h1 id="ATM机系统实践"><a href="#ATM机系统实践" class="headerlink" title="ATM机系统实践"></a>ATM机系统实践</h1><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>首先实现用户登录、用户开户功能（8位卡号由系统自动生成）</li><li>用户登录之后的功能：查询账户信息、存款、取款、修改密码、转账、退出、注销账户</li></ul><p style="text-indent: 2em;">采用面向对象的编程思想：首先需要一个Account类来存储封装用户的信息，再创建一个ATM类来实现主界面和方法的实现，最后创建一个测试类ATMTest来测试整体功能。</p>  <h2 id="自己编写代码"><a href="#自己编写代码" class="headerlink" title="自己编写代码"></a>自己编写代码</h2><p>以下是本人自己写的，存在很多bug😂  </p><p>Account.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">pkg</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">ArrayList</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> accountID;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br>    <span class="hljs-keyword">private</span> double limitwithdraw;<span class="hljs-comment">//限制最大取款额度</span><br>    <span class="hljs-keyword">private</span> double balance;<span class="hljs-comment">//账户余额</span><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>() &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> sex, <span class="hljs-title class_">String</span> password, double limitwithdraw) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limitwithdraw</span> = limitwithdraw;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getSex</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSex</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> sex</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> double <span class="hljs-title function_">getLimitwithdraw</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setLimitwithdraw</span>(<span class="hljs-params">double limitwithdraw</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">limitwithdraw</span> = limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getPassword</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPassword</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> password</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> double <span class="hljs-title function_">getBalance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBalance</span>(<span class="hljs-params">double balance</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span> = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAccountID</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> accountID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAccountID</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> accountID</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">accountID</span> = accountID;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">double amount1</span>) &#123;<span class="hljs-comment">//取款</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span> -= amount1;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">double amount2</span>) &#123;<span class="hljs-comment">//存款</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span> +=amount2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;性别：&quot;</span> + sex + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;卡号：&quot;</span> + accountID + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;密码：&quot;</span> + password + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;最大取款额度&quot;</span> + limitwithdraw +<span class="hljs-string">&quot;\n&quot;</span>+<br>                <span class="hljs-string">&quot;账户余额：&quot;</span> + balance ;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ATM.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Random;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ATM</span> &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>    Random random = <span class="hljs-keyword">new</span> Random();<br><br>    Account account=<span class="hljs-keyword">new</span> Account();<br><br>    ArrayList&lt;Account&gt; ATMs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    String nowAccount;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerATM</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户姓名: &quot;</span>);<br>        String name = sc.nextLine();<br>        account.setName(name);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入户主性别: &quot;</span>);<br>        String sex = sc.nextLine();<br>        account.setSex(sex);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户密码: &quot;</span>);<br>        String pwd = sc.nextLine();<br>        account.setPassword(pwd);<br><br>        String pwd2;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请再次输入开户密码: &quot;</span>);<br>        pwd2 = sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!pwd2.<span class="hljs-keyword">equals</span>(account.getPassword()))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;与上次密码不相同，请重新输入开户密码: &quot;</span>);<br>            pwd2 = sc.nextLine();<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款的最大限制额度： &quot;</span>);<br>        <span class="hljs-built_in">double</span> limitBalance = sc.nextDouble();<br>        account.setLimitwithdraw(limitBalance);<br><br>        String t=randomBalance();<br>        account.setAccountID(t);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+account.getName()+<span class="hljs-string">&quot;开户成功，您的卡号为&quot;</span>+t);<br><br>        ATMs.<span class="hljs-keyword">add</span>(account);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginATM</span>()</span> &#123;<br>        String AccountID;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入您的卡号：&quot;</span>);<br>        AccountID=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!checkAccountID(AccountID))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的卡号不存在，请再次输入卡号: &quot;</span>);<br>            AccountID = sc.nextLine();<br>        &#125;<br><br>        nowAccount=AccountID;<br><br>        String password;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入您的密码：&quot;</span>);<br>        password=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!password.<span class="hljs-keyword">equals</span>(account.getPassword()))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请再次输入您的密码：&quot;</span>);<br>            password=sc.nextLine();<br>        &#125;<br><br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">system</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择业务：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:查询账户信息&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:存款&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:取款&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;4:修改密码&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;5:转账&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;6:退出&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;7:注销账户&quot;</span>);<br>        String choice1 = sc.nextLine();<br>        <span class="hljs-keyword">switch</span> (choice1)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                System.<span class="hljs-keyword">out</span>.println(account.toString());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入存款金额：&quot;</span>);<br>                <span class="hljs-built_in">double</span> amount1 = sc.nextDouble();<br>                account.deposit(amount1);<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存款成功~，当前余额为：&quot;</span>+account.getBalance());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                <span class="hljs-built_in">double</span> amount2;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款金额：&quot;</span>);<br>                amount2 = sc.nextDouble();<br>                <span class="hljs-keyword">if</span>(!isLimteDraw(amount2)) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;超出了最大取款额度&quot;</span>+account.getLimitwithdraw()+<span class="hljs-string">&quot;,请重新输入:&quot;</span>);<br>                    amount2 = sc.nextDouble();<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    account.withdraw(amount2);<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜取款成功，当前余额为&quot;</span>+account.getBalance());<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;4&quot;</span>:<br>                modifyPwd();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;5&quot;</span>:<br>                transferAccounts();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;6&quot;</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;欢迎下次光临！&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;7&quot;</span>:<br>                unsubscribe(nowAccount);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-literal">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyPwd</span>()</span>&#123;<br>        String password;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入原密码：&quot;</span>);<br>        password=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!password.<span class="hljs-keyword">equals</span>(account.getPassword()))&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请再次输入原密码：&quot;</span>);<br>            password=sc.nextLine();<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入新密码：&quot;</span>);<br>        String newPassword = sc.nextLine();<br>        account.setPassword(newPassword);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span>()</span>&#123;<br>        String AccountID;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入对方卡号：&quot;</span>);<br>        AccountID=sc.nextLine();<br><br>        <span class="hljs-keyword">while</span> (!checkAccountID(AccountID)) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;该卡号不存在，请重新输入：&quot;</span>);<br>            AccountID=sc.nextLine();<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入转账的金额：&quot;</span>);<br>        <span class="hljs-built_in">double</span> amount = sc.nextDouble();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (AccountID.<span class="hljs-keyword">equals</span>((ATMs.<span class="hljs-keyword">get</span>(i)).getAccountID()))&#123;<br>                (ATMs.<span class="hljs-keyword">get</span>(i)).deposit(amount);<br>            &#125;<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;转账成功&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unsubscribe</span>(<span class="hljs-params">String AccountID</span>)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (AccountID.<span class="hljs-keyword">equals</span>((ATMs.<span class="hljs-keyword">get</span>(i)).getAccountID()))&#123;<br>                ATMs.<span class="hljs-keyword">remove</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">isLimteDraw</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> amount</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (amount&gt;account.getLimitwithdraw()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">randomBalance</span>()</span> &#123;<br>        String balance1 = <span class="hljs-string">&quot;1234567890&quot;</span>;<br>        String balance = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-built_in">int</span> r = random.nextInt(balance1.length());<br>            <span class="hljs-built_in">char</span> c = balance1.charAt(r);<br>            balance += c;<br>        &#125;<br>        <span class="hljs-keyword">return</span> balance;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">checkAccountID</span>(<span class="hljs-params">String AccountID</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (AccountID.<span class="hljs-keyword">equals</span>((ATMs.<span class="hljs-keyword">get</span>(i)).getAccountID()))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mainATM</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择业务：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:用户登录&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:用户开户&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:退出系统&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>            String choice = sc.nextLine();<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-keyword">if</span>(ATMs.size()==<span class="hljs-number">0</span>) &#123;<br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您还未开户&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----注册----&quot;</span>);<br>                    loginATM();<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    registerATM();<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;----登录----&quot;</span>);<br>                    loginATM();<br>                    system();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;谢谢光临！欢迎下次再来&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-literal">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>ATMTest.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pkg;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATMTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ATM</span> <span class="hljs-variable">atm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ATM</span>();<br>        atm.mainATM();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Bug修改"><a href="#Bug修改" class="headerlink" title="Bug修改"></a>Bug修改</h2><h3 id="ATM类"><a href="#ATM类" class="headerlink" title="ATM类"></a>ATM类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Random;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ATM</span> &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>    Random random = <span class="hljs-keyword">new</span> Random();<br><br>    <span class="hljs-keyword">private</span> Account loginAccount;<span class="hljs-comment">//创建成员变量，记录当前登录的账户</span><br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Account&gt; ATMs = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<span class="hljs-comment">//创建集合，存储Account对象</span><br><br><br>     <span class="hljs-comment">/** 完成用户开户操作*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerATM</span>()</span> &#123;<br>        Account account=<span class="hljs-keyword">new</span> Account();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===系统开户操作===&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户名称: &quot;</span>);<br>        String name = sc.next();<br>        account.setName(name);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//用户输入的性别不是男或女，则再次循环输入</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入户主性别: &quot;</span>);<br>            <span class="hljs-built_in">char</span> sex = sc.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//因为sc.next()返回的是一个String字符串，所以需要提取第一个字符</span><br>            <span class="hljs-comment">//户主性别判断</span><br>            <span class="hljs-keyword">if</span>(sex==<span class="hljs-string">&#x27;男&#x27;</span> || sex==<span class="hljs-string">&#x27;女&#x27;</span>)&#123;<br>                <span class="hljs-comment">//是男或女</span><br>                account.setSex(sex);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//不是男或女</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;性别只能输入&#x27;男&#x27;或&#x27;女&#x27;&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">/**善用while(true)循环，这里先将两次密码进行比较，若相同才将其存入account对象中*/</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入开户密码: &quot;</span>);<br>            String pwd = sc.next();<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请再次输入开户密码: &quot;</span>);<br>            String pwd2 = sc.next();<br>            <span class="hljs-keyword">if</span>(pwd.<span class="hljs-keyword">equals</span>(pwd2))&#123;<br>                account.setPassword(pwd);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您两次输入的密码不一致，请您确认~&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款的最大限制额度： &quot;</span>);<br>        <span class="hljs-built_in">double</span> limitBalance = sc.nextDouble();<br>        account.setLimitwithdraw(limitBalance);<br><br>        String t=randomBalance();<span class="hljs-comment">//将随机生成的卡号赋给一个String变量，此后就调用这个变量，再次调用方法就会重新生成一个</span><br>        account.setAccountID(t);<br><br>        ATMs.<span class="hljs-keyword">add</span>(account);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+account.getName()+<span class="hljs-string">&quot;开户成功，您的卡号是：&quot;</span>+account.getAccountID());<br>    &#125;<br><br><br>    <span class="hljs-comment">/** 随机生成8位卡号，且后续的用户的卡号不可与之前用户的卡号相同*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">randomBalance</span>()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//如果acc!=null,则继续循环直到位null为止</span><br>            String accountID = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//创建一个空字符串，存放卡号</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<span class="hljs-comment">//循环8次</span><br>                <span class="hljs-built_in">int</span> r = random.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//随机生成0~9的一个数字</span><br>                accountID += r;<span class="hljs-comment">//加到accountID字符串后面</span><br>            &#125;<br>            <span class="hljs-comment">//调用getAccount()方法判断该卡号是否已存在</span><br>            Account acc=getAccount(accountID);<br>            <span class="hljs-keyword">if</span>(acc==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//卡号不存在，则说明该卡号可以使用作为一个新卡号</span><br>                <span class="hljs-keyword">return</span> accountID;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/** 根据卡号查询账户对象，确保卡号与之前设置过的不一致 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Account <span class="hljs-title">getAccount</span>(<span class="hljs-params">String accountID</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; ATMs.size(); i++) &#123;<span class="hljs-comment">//遍历ATMs集合</span><br>            Account ac=ATMs.<span class="hljs-keyword">get</span>(i);<br>            <span class="hljs-comment">//判断每个Account对象的卡号是否与新输入的卡号相同</span><br>            <span class="hljs-keyword">if</span>(ac.getAccountID().<span class="hljs-keyword">equals</span>(accountID))&#123;<br>                <span class="hljs-comment">//相同则返回该卡号</span><br>                <span class="hljs-keyword">return</span> ac;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//没有找到相同的卡号则返回null，说明不存在该卡号</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/** 登录操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginATM</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span>(ATMs.size()==<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断当前系统是否有账户</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;当前系统中无任何账户，请先开户再来登录~~&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<span class="hljs-comment">//退出登录</span><br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;====登录操作====&quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入您的卡号：&quot;</span>);<br>            String AccountID=sc.next();<br><br>            <span class="hljs-comment">//判断卡号是否存在</span><br>            Account acc=getAccount(AccountID);<br>            <span class="hljs-keyword">if</span> (acc==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//卡号不存在</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的卡号不存在，请确认~ &quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//密码不正确，则进入循环重新输入密码</span><br>                    <span class="hljs-comment">//卡号存在，则输入密码</span><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>                    String password=sc.next();<br><br>                    <span class="hljs-comment">//判断密码是否正确</span><br>                    <span class="hljs-keyword">if</span> (password.<span class="hljs-keyword">equals</span>(acc.getPassword()))&#123;<br>                        <span class="hljs-comment">//密码正确</span><br>                        loginAccount = acc;<span class="hljs-comment">//将该账户对象赋给当前登录用户的成员变量</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+acc.getName()+<span class="hljs-string">&quot;登录成功,您的卡号为：&quot;</span>+acc.getAccountID());<br>                        loginsystem();<span class="hljs-comment">//登录成功后直接进入登录主界面</span><br>                        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//跳出并结束当前登录方法</span><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//密码不正确</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请确认~&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 修改密码操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">modifyPwd</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==修改密码操作==&quot;</span>);<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//输入的原密码不相同，进入循环重新输入</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入原密码：&quot;</span>);<br>            String password=sc.next();<br><br>            <span class="hljs-comment">//判断用户输入的原密码是否与系统中存入的密码一致</span><br>            <span class="hljs-keyword">if</span>(password.<span class="hljs-keyword">equals</span>(loginAccount.getPassword()))&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//两次密码不一致则进入循环重新输入</span><br>                    <span class="hljs-comment">//输入的原密码一致</span><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入新密码：&quot;</span>);<br>                    String newPassword = sc.next();<br><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请确认新密码：&quot;</span>);<br>                    String isNewPassword = sc.next();<br><br>                    <span class="hljs-comment">//判断两次新密码是否一致</span><br>                    <span class="hljs-keyword">if</span>(newPassword.<span class="hljs-keyword">equals</span>(isNewPassword))&#123;<br>                        <span class="hljs-comment">//两次新密码一致，成功修改密码</span><br>                        loginAccount.setPassword(newPassword);<br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜您成功修改密码&quot;</span>);<br>                        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//修改成功后，终止修改密码方法，返回到登录功能选择操作</span><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//两次密码不一致</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;两次密码输入不一致，请您确认~&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//输入的原密码不相同</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;抱歉您输入的密码与原密码不一致，请您确认~&quot;</span>);<br>            &#125;<br>        &#125;<br><br><br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 转账 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transferAccounts</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==用户转账==&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否有其他账户</span><br>        <span class="hljs-keyword">if</span> (ATMs.size()&lt;<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//判断自己账户是否有钱</span><br>        <span class="hljs-keyword">if</span>(loginAccount.getBalance()==<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的账户余额为0,不能转账&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//对方卡号输入不正确，需要循环重新输入</span><br>            <span class="hljs-comment">//提醒用户输入对方卡号</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入对方卡号：&quot;</span>);<br>            String AccountID = sc.next();<br><br>            <span class="hljs-comment">//判断对方账号是否存在</span><br>            Account acc=getAccount(AccountID);<br>            <span class="hljs-keyword">if</span> (acc==<span class="hljs-literal">null</span>)&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的对方的卡号不存在~~&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//认证对方姓氏不正确，需要循环冲输入</span><br>                    <span class="hljs-comment">//认证对方姓氏,将对方的姓氏遮盖提示给用户</span><br>                    String name=acc.getName();<br>                    String coverName=name.replace(name.charAt(<span class="hljs-number">0</span>),<span class="hljs-string">&#x27;*&#x27;</span>);<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请您输入【&quot;</span>+coverName+<span class="hljs-string">&quot;】的姓氏:&quot;</span>);<br>                    <span class="hljs-built_in">char</span> preName = sc.next().charAt(<span class="hljs-number">0</span>);<br><br>                    <span class="hljs-comment">//判断姓氏是否正确</span><br>                    <span class="hljs-keyword">if</span>(preName == (name.charAt(<span class="hljs-number">0</span>)))&#123;<span class="hljs-comment">//正确</span><br>                        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//当自己账户没有那么多钱时，会循环重新输入转账金额</span><br>                            <span class="hljs-comment">//认证通过了，开始进行转账</span><br>                            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入转账的金额：&quot;</span>);<br>                            <span class="hljs-built_in">double</span> amount = sc.nextDouble();<br>                            <span class="hljs-comment">//判断这个金额是否超过自己的余额</span><br>                            <span class="hljs-keyword">if</span>(loginAccount.getBalance() &gt;= amount)&#123;<br>                                <span class="hljs-comment">//可以转账</span><br>                                <span class="hljs-comment">//更新自己账户余额</span><br>                                loginAccount.setBalance(loginAccount.getBalance() - amount);<br>                                <span class="hljs-comment">//更新对方账户余额</span><br>                                acc.setBalance(acc.getBalance() + amount);<br>                                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜您转账成功，您当前余额为&quot;</span>+loginAccount.getBalance());<br>                                <span class="hljs-keyword">return</span>;<span class="hljs-comment">//直接结束该方法</span><br>                            &#125;<span class="hljs-keyword">else</span>&#123;<br>                                <span class="hljs-comment">//余额不足，不可以转账</span><br>                                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您余额不足，无法给对方转这么多钱，您当前余额为&quot;</span>+loginAccount.getBalance());<br>                            &#125;<br>                        &#125;<br><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//不正确</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;抱歉，您认证的姓氏有问题~~&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br><br><br><br>    &#125;<br><br><br>    <span class="hljs-comment">/** 注销操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> boolean <span class="hljs-title">unsubscribe</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;==销户操作==&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请问您确认销户吗？y/n&quot;</span>);<br>        String command = sc.next();<br>        <span class="hljs-keyword">switch</span> (command)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;y&quot;</span>:<br>                <span class="hljs-comment">//确实要销户</span><br>                <span class="hljs-keyword">if</span>(loginAccount.getBalance()==<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">//账户没钱，进行销户</span><br>                    ATMs.<span class="hljs-keyword">remove</span>(loginAccount);<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的账户已经成功销户&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;抱歉亲，您的账户还有钱，不可以销户~~&quot;</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            <span class="hljs-literal">default</span>:<br>                <span class="hljs-comment">//不销户</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;好的，您的账户保留~~&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/** 登录成功后的主界面及操作 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loginsystem</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(loginAccount.getName()+<span class="hljs-string">&quot;,请您选择业务：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:查询账户信息&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:存款&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:取款&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;4:修改密码&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;5:转账&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;6:退出&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;7:注销账户&quot;</span>);<br>            <span class="hljs-built_in">int</span> choice1 = sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (choice1)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">//查询当前账户</span><br>                    System.<span class="hljs-keyword">out</span>.println(loginAccount.toString());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-comment">//存款</span><br>                    loginAccount.deposit();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-comment">//取款</span><br>                    loginAccount.withdraw();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    <span class="hljs-comment">//密码修改</span><br>                    modifyPwd();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    <span class="hljs-comment">//转账</span><br>                    transferAccounts();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                    <span class="hljs-comment">//退出</span><br>                    System.<span class="hljs-keyword">out</span>.println(loginAccount.getName()+<span class="hljs-string">&quot;,您退出系统成功，欢迎下次光临！&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<span class="hljs-comment">//跳出并结束当前方法</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                    <span class="hljs-comment">//注销账户</span><br>                    <span class="hljs-keyword">if</span>(unsubscribe())&#123;<br>                        <span class="hljs-comment">//销户成功，回到欢迎界面</span><br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-comment">//销户失败，回到登录主界面</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-literal">default</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您当前选择的操作不正确，请重新选择~&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 启动ATM系统 展示欢迎界面*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mainATM</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;=======欢迎您进入ATM系统=======&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:用户登录&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2:用户开户&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3:退出系统&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>            <span class="hljs-built_in">int</span> choice = sc.nextInt();<br>            <span class="hljs-keyword">switch</span> (choice) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    loginATM();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    registerATM();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;谢谢光临！欢迎下次再来&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-literal">default</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;没有该操作&quot;</span>);<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意：ATM类中的所有方法的访问权限为private，以防止其他类访问该类中的方法导致信息泄露</strong></p><p><strong>注意：sc.next()与sc.nextLine()的异同：</strong></p><ul><li>同：扫描结果都为String型</li><li>异：next()只读取到下一个空白字符为止的内容，不读取空格和制表符；nextLine()则读取从当前位置到换行符之间的所有内容，会读取空格和制表符。</li></ul><p>所以经常遇到一种情况：当程序中两种都有使用时，nextLine()会读取上段代码残留的换行符，导致用户还未输入内容就做出了反应。 </p><p><strong>注意：善用return和break：return可以直接结束整个方法；break终止离其最近的循环（switch、for、while等），while循环中套了switch循环，在switch循环中使用break后只结束switch循环，外层的while循环还符合条件则会重新执行while循环</strong></p><p><strong>注意：注册成功之后就进入登录系统，可以直接在注册方法内调用登录方法，不要再主界面内分别调用（会难以控制）</strong></p><p><strong>注意：善用while(true)循环，例如登录时输入密码操作：密码不正确时直接使用while(true)让用户重新输入密码即可</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//密码不正确，则进入循环重新输入密码</span><br>                    <span class="hljs-comment">//卡号存在，则输入密码</span><br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>                    String password=sc.next();<br><br>                    <span class="hljs-comment">//判断密码是否正确</span><br>                    <span class="hljs-keyword">if</span> (password.<span class="hljs-keyword">equals</span>(acc.getPassword()))&#123;<br>                        <span class="hljs-comment">//密码正确</span><br>                        loginAccount = acc;<span class="hljs-comment">//将该账户对象赋给当前登录用户的成员变量</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜&quot;</span>+acc.getName()+<span class="hljs-string">&quot;登录成功,您的卡号为：&quot;</span>+acc.getAccountID());<br>                        loginsystem();<span class="hljs-comment">//登录成功后直接进入登录主界面</span><br>                        <span class="hljs-keyword">return</span>;<span class="hljs-comment">//跳出并结束当前登录方法</span><br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-comment">//密码不正确</span><br>                        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您输入的密码不正确，请确认~&quot;</span>);<br>                    &#125;<br>                &#125;<br></code></pre></td></tr></table></figure><h3 id="Account类"><a href="#Account类" class="headerlink" title="Account类"></a>Account类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> &#123;<br>    Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">char</span> sex;<br>    <span class="hljs-keyword">private</span> String accountID;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> limitwithdraw;<span class="hljs-comment">//限制最大取款额度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> balance;<span class="hljs-comment">//账户余额</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>()</span> &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>(<span class="hljs-params">String name, <span class="hljs-built_in">char</span> sex, String accountID, String password, <span class="hljs-built_in">double</span> limitwithdraw, <span class="hljs-built_in">double</span> balance</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.accountID = accountID;<br>        <span class="hljs-keyword">this</span>.password = password;<br>        <span class="hljs-keyword">this</span>.limitwithdraw = limitwithdraw;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> name +(sex == <span class="hljs-string">&#x27;男&#x27;</span>?<span class="hljs-string">&quot;先生&quot;</span>:<span class="hljs-string">&quot;女士&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span> <span class="hljs-title">getSex</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSex</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> sex</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAccountID</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> accountID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccountID</span>(<span class="hljs-params">String accountID</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.accountID = accountID;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPassword</span>(<span class="hljs-params">String password</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getLimitwithdraw</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLimitwithdraw</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> limitwithdraw</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.limitwithdraw = limitwithdraw;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">getBalance</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> balance</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 取款 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===取款操作===&quot;</span>);<br>        <span class="hljs-comment">//判断账户余额是否达到100元</span><br>        <span class="hljs-keyword">if</span> (getBalance() &lt; <span class="hljs-number">100</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您的账户余额不足100元，不允许取钱&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//让用户输入取款金额</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入取款金额：&quot;</span>);<br>            <span class="hljs-built_in">double</span> amount2 = sc.nextDouble();<br>            <span class="hljs-keyword">if</span> (amount2 &lt;= getBalance()) &#123;<br>                <span class="hljs-comment">//判断当前取款金额是否超过取款限额</span><br>                <span class="hljs-keyword">if</span>(amount2 &gt; getLimitwithdraw()) &#123;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;您当前取款金额超过了每次取款金额，您每次最多可取&quot;</span>+getLimitwithdraw()+<span class="hljs-string">&quot;元&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">//可以取款</span><br>                    <span class="hljs-keyword">this</span>.balance -=amount2;<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;恭喜您取款成功，取款后剩余&quot;</span>+getBalance()+<span class="hljs-string">&quot;元&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//跳出while循环</span><br>                &#125;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;余额不足，您的账户余额是&quot;</span>+getBalance());<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">/** 存款 */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;===存款操作===&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入存款金额：&quot;</span>);<br>        <span class="hljs-built_in">double</span> amount1 = sc.nextDouble();<br>        <span class="hljs-keyword">this</span>.balance +=amount1;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存款成功~，当前余额为：&quot;</span>+getBalance());<br>    &#125;<br><br><br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;当前您的账户信息如下：&quot;</span>+<span class="hljs-string">&#x27;\n&#x27;</span>+<br>                <span class="hljs-string">&quot;姓名：&quot;</span> + name + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;性别：&quot;</span> + sex + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;卡号：&quot;</span> + accountID + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;密码：&quot;</span> + password + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;最大取款额度&quot;</span> + limitwithdraw +<span class="hljs-string">&quot;\n&quot;</span>+<br>                <span class="hljs-string">&quot;账户余额：&quot;</span> + balance ;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：直接在Account定义具体的存款取款方法，然后再ATM类使用Account对象直接调用这两个方法即可</strong></p><h3 id="ATMTest类不变"><a href="#ATMTest类不变" class="headerlink" title="ATMTest类不变"></a>ATMTest类不变</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java API基础——String与ArrayList</title>
    <link href="/2025/04/01/java17/"/>
    <url>/2025/04/01/java17/</url>
    
    <content type="html"><![CDATA[<p>Java API是java提供给我们的程序，方便我们完成功能，其构成也是多个类组成的包</p><h1 id="包-Package"><a href="#包-Package" class="headerlink" title="包|Package"></a>包|Package</h1><p>包用来管理不同的程序，是类和接口的集合</p><h2 id="包都主要作用"><a href="#包都主要作用" class="headerlink" title="包都主要作用"></a>包都主要作用</h2><ul><li>避免命名冲突</li><li>根据特征进行分类</li><li>封装（访问控制）</li></ul><h2 id="类的调用"><a href="#类的调用" class="headerlink" title="类的调用"></a>类的调用</h2><ul><li>调用相同包的类：无需import，创建另一个类的类类型实例，直接就可调用。</li><li>调用不同包的类:需要写入import 包名.类名，再创建另一个类的类类型实例，便可调用。</li><li>调用java提供的类（API）：需要写入import 包名.类名，再创建另一个类的类类型实例，便可调用；但java.lang包下的类不需要import。</li><li>调用相同名称却在不同包中的类：只能import其中一个类，当需要调用另一个类时，则需要写全——包名.类名才可调用。</li></ul><h2 id="类的导入声明"><a href="#类的导入声明" class="headerlink" title="类的导入声明"></a>类的导入声明</h2><ul><li>单类型导入声明 <code>import java.util.Scanner;</code></li><li>按需类型导入声明 <code>import java.util.*;</code></li><li>单静态导入声明 <code>import static java.lang.Math.PI;</code></li><li>按需静态导入声明，适用于需要多次使用Math类中的类变量或类方法 <code>import static java.lang.Math.*;</code></li></ul><p><strong>注意：java.util和java.sql中都包含Date类,所以调用那个的一定要写清楚，不能使用按需类型导入声明，否则就会出错</strong></p><p><strong>注意：import static java.lang.System.out.println;：这样写不可取，前面有static，又因为println是实例方法，所以不能这样调用</strong></p><h2 id="包的声明"><a href="#包的声明" class="headerlink" title="包的声明"></a>包的声明</h2><p>一个包中不可以存在同名的“包”和“类”，包的首字母是小写</p><h3 id="类和成员的访问属性"><a href="#类和成员的访问属性" class="headerlink" title="类和成员的访问属性"></a>类和成员的访问属性</h3><ul><li>类的访问属性:<ul><li>public类：公开访问，包内外部都可以访问</li><li>非public类：包访问（默认访问），只在包内部使用</li><li><strong>注意：public类的名称一定要与源程序（.java文件）的文件名一致，一个源程序只能定义0个或1个public类</strong></li></ul></li><li>成员的访问属性：（成员包括类变量、实例变量、方法）<ul><li>public公开访问：public类中加上public声明的成员，可在包内外使用，在包外使用时需要导入</li><li>protected限制公开访问：public类或非public类中加上protected声明的成员，只在包和该类派生的类内使用</li><li>包访问（默认访问）：public类或非public类中无关键字声明的成员，只在同一个包中使用</li><li>private私有访问：public类或非public类中加上private声明的成员，只可在类的内部使用，派生的类也不可以使用</li></ul></li></ul><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String概述"><a href="#String概述" class="headerlink" title="String概述"></a>String概述</h2><p>String类在java.lang包中<br>它代表字符串，可以创建字符串并且对其进行封装，对其进行处理。String封装数据的方式有两种：①直接利用””；②利用new String()封装器</p><ul><li>直接给变量赋值字符串，封装字符串:<code>String str=&quot;abc&quot;;</code></li><li>利用构造器创建字符串对象并初始化：<code>String str=new String();</code></li><li>利用构造器从字符数组中获取字符串：<code>char[] chars=&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;  String str=new String(chars);</code></li><li>利用构造器从字节数组中获得字符串：<code>byte[] bytes=&#123;97,98,99&#125;;  String str=new String(bytes);//最后输出为abc</code></li></ul><h2 id="String常用方法"><a href="#String常用方法" class="headerlink" title="String常用方法"></a>String常用方法</h2><p><code>String str=&quot;Java是世界上最好的编程语言之一&quot;</code></p><ul><li><p><strong>charAt(int i)</strong>：获取索引i位置的字符。<code>char c=str.charAt(1);//结果为a</code><br>   可用于字符的遍历：快捷用法：<code>str.length().fori</code>回车补全for循环——&gt;</p>   <figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">str</span>.length();i++)&#123;<span class="hljs-comment">//注意：字符串获取长度有()</span><br>   <span class="hljs-built_in">char</span> c=<span class="hljs-built_in">str</span>.charAt(i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>length()</strong>:获取字符串的长度。<code>int n=str.length();//结果为17</code> </p></li><li><p><strong>toCharArray()</strong>:将字符串转变为字符数组。<code>char[] chars=str.toCharArray; int n=chars.length;//注意：数组获取长度无()</code>  </p></li><li><p><strong>equals()</strong>:比较两个字符串内容是否相同。<code>String str1=&quot;abc&quot;; boolean b=str.equals(str1);//结果为false</code><br><strong>注意：&#x3D;&#x3D;符号比较的是两个字符串引用的实例是否相同</strong> </p></li><li><p><strong>equalsIgnoreCase()</strong>:忽略字母大小写比较两个字符串内容是否相同（一般用于验证码）。<code>String str1=&quot;abc&quot;; String str2=&quot;ABc&quot;; boolean b=str1.equalsIgnoreCase(str2);//结果为true</code>  </p></li><li><p><strong>subString(int i,int j)</strong>:截取索引i到j的字符串（包括i不包括j）。<code>String s=str.subString(0,4);//结果为java</code><br>这里有个小技巧，不需要自己去数末尾字符的索引，选中要截取的字符串，IDEA右下角就会出现选中字符串的长度</p></li><li><p><strong>subString(int i)</strong>:截取索引i处及后面所有的字符串</p></li><li><p><strong>replace(“A”,”B”)</strong>:用B代替A，返回字符串。<code>String str3=str.replace(&quot;Java&quot;,&quot;C&quot;);//结果为&quot;C是世界上最好的编程语言之一&quot;</code></p></li><li><p><strong>contains(“A”)</strong>:判断字符串中是否包含A。<code>boolean d=str.contains(&quot;Java&quot;);//结果为true</code></p></li><li><p><strong>startswith(“A”)</strong>:判断字符串是否由A开头。<code>boolean c=str.startswith(&quot;Java1&quot;);//结果为false</code></p></li><li><p><strong>split(“A”)</strong>:根据A进行分割字符串，获得一个字符串数组。<code>String str4=&quot;Java,C,C++,Go&quot;; String[] str5=str4.split(&quot;,&quot;);</code></p></li></ul><h2 id="String使用时的注意事项"><a href="#String使用时的注意事项" class="headerlink" title="String使用时的注意事项"></a>String使用时的注意事项</h2><ul><li><p><strong>String对象是不可变的字符串对象，一旦被创建它的内容就是无法被修改的，通常只是又创建了一个新的字符串对象（新地址），由另外一个字符串对象去引用它（节约空间）</strong></p></li><li><p><strong>利用””创建的两个字符串对象，若它们内容相同，那么两个字符串对象便相等</strong>：这是因为””创建的内容相同的字符串常量被放到了堆内存的字符串常量池中，栈内存内的字符串对象只需引用那一个即可（也就是字符串对象引用的实例（的地址）相同）。<code>String str1=&quot;abc&quot;; String str2=&quot;abc&quot;; System.out.print(str1==str2);//结果为true</code></p></li><li><p><strong>利用new创建的两个字符串对象，即使内容相同，它们也不相等</strong> ：使用new每创建一个字符串对象，堆内存便会创建一个新的地址来存放该对象，栈内存内的两个字符串对象需要分别引用它们,（也就是字符串对象引用的实例（的地址）不同了）。<code>String str1=new String(&quot;abc&quot;); String str2=new String(&quot;abc&quot;);; System.out.print(str1==str2);//结果为flase</code></p></li></ul><p><font size="4"><strong>练习题1</strong>：这段代码<code>String str=new String(&quot;abc&quot;)</code>创建了几个字符串对象</font></p><p>答案是：两个，程序先在堆内存的字符串常量池中创建了”abc”对象，又利用new在堆内存创建了新的字符串对象。</p><p><font size="4"><strong>练习题2</strong>：这段代码<code>String str1=&quot;ab&quot;; String str2=str1 + &quot;c&quot;;</code>中str2对象被放置在了什么地方？</font></p><p>答案是：被放在了堆内存中，因为程序在编译时才会发现str1是”ab”,所以是需要在堆内存进行运算的。</p><h2 id="开发案例"><a href="#开发案例" class="headerlink" title="开发案例"></a>开发案例</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><p>开发一个登录页面，要求如下：</p><ul><li>允许用户登录三次，三次不成功退出系统</li><li>登录成功显示”欢迎进入系统”</li><li>登录不成功前两次要求用户重新输入账号密码</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">pkg</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-comment">//开发登录界面</span><br>        <span class="hljs-title class_">Scanner</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-title class_">System</span>.<span class="hljs-property">in</span>);<br><br>        <span class="hljs-keyword">for</span> (int i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;请输入账号：&quot;</span>);<br>            <span class="hljs-title class_">String</span> account=sc.<span class="hljs-title function_">nextLine</span>();<br><br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>            <span class="hljs-title class_">String</span> password=sc.<span class="hljs-title function_">nextLine</span>();<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_">equals</span>(account,password))&#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;欢迎登录系统！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">&quot;请重新输入&quot;</span>);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">equals</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> account, <span class="hljs-title class_">String</span> password</span>) &#123;<br>        <span class="hljs-title class_">String</span> account1=<span class="hljs-string">&quot;javazhifu&quot;</span>;<br>        <span class="hljs-title class_">String</span> password1=<span class="hljs-string">&quot;123456&quot;</span>;<br><br>        <span class="hljs-keyword">return</span> account1.<span class="hljs-title function_">equals</span>(account) &amp;&amp; password.<span class="hljs-title function_">equals</span>(password1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>*快捷键使用：1.要想加入for循环，可以选中循环区域按<code>ctrl+alt+T</code>键便可。<br>2.输出语句快捷键：<code>要输入的内容.sout</code>按回车键</p><p style="color:red">*以下代码才是一个成熟的程序员写的，我们最初写的都是if条件语句</p><p><code>return account1.equals(account) &amp;&amp; password.equals(password1);</code></p><h3 id="验证码随机生成"><a href="#验证码随机生成" class="headerlink" title="验证码随机生成"></a>验证码随机生成</h3><p>随机生成n位验证码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package com.itheima.pkg;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">codes</span>(<span class="hljs-number">5</span>));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">String</span> <span class="hljs-title">codes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">String</span> code = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> codeString = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            Random random = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>();<br><br>            <span class="hljs-type">int</span> r=random.<span class="hljs-built_in">nextInt</span>(codeString.<span class="hljs-built_in">length</span>());<br>            code += codeString.<span class="hljs-built_in">charAt</span>(r);<br>        &#125;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h1><p>ArrayList是一种容器，用于存储数据，它与数组的区别是集合不限制长度，而数组的长度是固定的；例如购物车内商品的数量一般是能够随时增删的，这里用到的就是ArrayList。</p><h2 id="创建ArrayList对象"><a href="#创建ArrayList对象" class="headerlink" title="创建ArrayList对象"></a>创建ArrayList对象</h2><ul><li>不限制元素类型（支持泛型）：<code>ArrayList list = new ArrayList();</code></li><li>限制元素类型（<strong>注意：集合和泛型不支持基本数据类型，只支持引用类型</strong>）：<code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</code></li></ul><h2 id="ArrayList常用方法"><a href="#ArrayList常用方法" class="headerlink" title="ArrayList常用方法"></a>ArrayList常用方法</h2><p><code>ArrayList&lt;String&gt; list=new ArrayList&lt;&gt;();</code></p><ul><li><strong>boolean add(E e)</strong>:在集合末尾添加元素。<code>list.add(&quot;java&quot;)；list.add(&quot;C&quot;);//结果为true，[&quot;java&quot;,&quot;C&quot;]</code></li><li><strong>void add(int index,E e)</strong>:在索引index处添加元素e。<code>list.add(0,&quot;C&quot;);//[&quot;C&quot;,&quot;java&quot;,&quot;C&quot;]</code></li><li><strong>E remove(int index)</strong>:删除index索引处的元素，并返回该元素。<code>list.remove(0);//结果为true，[&quot;java&quot;,&quot;C&quot;]</code></li><li><strong>boolean remove(E e)</strong>:删除元素e，若有多个e，则删除最前面的e。<code>list.remove(&quot;java&quot;);//结果为true，[&quot;C&quot;]</code> </li><li><strong>E get(int index)</strong>:获取索引index处的元素，并返回该元素。<code>list.get(0);//结果为C,[]</code></li><li><strong>int size()</strong>:返回集合的个数。<code>list.size();//结果为0</code></li><li><strong>E set(int index,E e)</strong>:修改索引index处的元素为e，并返回e。</li></ul><h2 id="开发案例-1"><a href="#开发案例-1" class="headerlink" title="开发案例"></a>开发案例</h2><p>删除购物车中所有的枸杞</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StringTest</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>       ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java入门&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;宁夏枸杞&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;黑枸杞&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;人字拖&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;特级枸杞&quot;</span>);<br>       list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;枸杞子&quot;</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(removeE(list));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;String&gt; <span class="hljs-title">removeE</span>(<span class="hljs-params">ArrayList&lt;String&gt; list</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(list.<span class="hljs-keyword">get</span>(i).contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>                list.<span class="hljs-keyword">remove</span>(list.<span class="hljs-keyword">get</span>(i));<br>                i--;<span class="hljs-comment">//注意：这里要使i向前移一位，因为删掉一个元素之后后面的元素会自动向前移一位，如果i还向后移的话，就会忽略部分元素</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如上述代码需要注意的是for循环中的i- -，这里也可以将for循环进行修改，倒序进行判断，就不用再考虑i- -的问题了，如下所示</strong>：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">for (<span class="hljs-name">int</span> i = list.size()<span class="hljs-number">-1</span><span class="hljs-comment">; i &gt; 0; i--) &#123;</span><br>            if(<span class="hljs-name">list</span>.get(<span class="hljs-name">i</span>).contains(<span class="hljs-string">&quot;枸杞&quot;</span>))&#123;<br>                list.remove(<span class="hljs-name">list</span>.get(<span class="hljs-name">i</span>))<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="集合综合案例"><a href="#集合综合案例" class="headerlink" title="集合综合案例"></a>集合综合案例</h2><p>要求：创建一个类似美团外卖的菜品系统，包含菜品上架、浏览菜品信息和退出系统的功能。</p><p><strong>这里采用面向对象的思想进行程序的编写</strong></p><p>首先根据我们平时的外卖软件分析我们的主界面，其中会包含多个菜品，每个菜品都有它的详细信息，还包括上架和浏览菜品详细信息的功能。  </p><p>由此我们可以分析出一个实体类：Food.java</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">itheima</span>.<span class="hljs-property">pkg</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> double price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> description;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Food</span>()&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Food</span>(<span class="hljs-title class_">String</span> description, <span class="hljs-title class_">String</span> name, double price) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> double <span class="hljs-title function_">getPrice</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setPrice</span>(<span class="hljs-params">double price</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getDescription</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDescription</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> description</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">description</span> = description;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;名称：&quot;</span> + name + <span class="hljs-string">&#x27;\n&#x27;</span> +<br>                <span class="hljs-string">&quot;价格：&quot;</span> + price + <span class="hljs-string">&#x27;\n&#x27;</span>+<br>                <span class="hljs-string">&quot;描述：&quot;</span> + description ;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><p style="color:red">注意：toString方法重写，给后续代码带来极大的便利</p></strong></p><p>接着创建一个容器来存储所有的菜品以及显示主界面、上架菜品和浏览菜品的功能，所以需要一个菜单功能类:FoodMenuFuc.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.itheima.pkg;<br><br>import java.util.ArrayList;<br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FoodMenuFuc</span> &#123;<br>    Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>    Food food=<span class="hljs-keyword">new</span> Food();<br><br>    ArrayList&lt;Food&gt; foods=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span>(<span class="hljs-params">Food food</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入菜品名称：&quot;</span>);<br>        String name = scanner.next();<br>        food.setName(name);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入菜品价格：&quot;</span>);<br>        <span class="hljs-built_in">double</span> price = scanner.nextDouble();<br>        food.setPrice(price);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入菜品描述：&quot;</span>);<br>        String desc = scanner.next();<br>        food.setDescription(desc);<br><br>        foods.<span class="hljs-keyword">add</span>(food);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showFood</span>()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; foods.size(); i++) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(foods.<span class="hljs-keyword">get</span>(i).toString());<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">display</span>()</span>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请选择功能：&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;1:上架菜品&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;2.浏览菜品&quot;</span>);<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;3.退出&quot;</span>);<br><br><br>            String choice = scanner.nextLine();<br>            <span class="hljs-keyword">switch</span>(choice)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&quot;</span>:<br>                    <span class="hljs-keyword">add</span>(food);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&quot;</span>:<br>                    showFood();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;3&quot;</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;下次再来哦！&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                <span class="hljs-literal">default</span>:<br>                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请重新输入正确的命令：&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><p style="color:red">switch循环中的return；表示直接切断整个display()方法</p></strong></p><p>最后需要一个操作类来实现主界面的显示：FoodOperate.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.pkg;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FoodOperate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FoodMenuFuc</span> <span class="hljs-variable">foodMenu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FoodMenuFuc</span>();<br>        foodMenu.display();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot基础</title>
    <link href="/2025/03/31/Spring03/"/>
    <url>/2025/03/31/Spring03/</url>
    
    <content type="html"><![CDATA[<h1 id="检查Java环境"><a href="#检查Java环境" class="headerlink" title="检查Java环境"></a>检查Java环境</h1><p><img src="/image/s17.png"></p><h1 id="安装并配置Maven"><a href="#安装并配置Maven" class="headerlink" title="安装并配置Maven"></a>安装并配置Maven</h1><p>Maven时项目构建工具，能把项目抽象成POM（project object model）,Maven使用POM对项目进行构建、打包、文档化等操作，<strong>最重要的是解决了项目所需要类库的依赖管理，</strong> 简化了项目开发环境搭建的过程，使得我们开发一个大型复杂的项目变得更容易。  </p><h2 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h2><p>Maven最初用于替代Apache Ant.用来简化项目构建，它采用不同的方式对项目构建进行抽象，主要有以下几点：  </p><ul><li>使构建项目变得更加容易。</li><li>统一了构建项目的方式，通过pom.xml来描述项目，并提供一系列插件来构建项目。</li><li>提出一套开发项目的最佳实践，源码在src&#x2F;main&#x2F;java中，测试代码在src&#x2F;test&#x2F;java中，项目需要的配置文件则放在src&#x2F;main&#x2F;resources中。</li><li>包含不同环境项目的构建方式。</li><li>解决类库依赖的问题，只需要声明使用的类库，Maven就会自动从仓库下载依赖的jar包，并协助管理jar包之间的冲突。</li></ul><p><strong>在开发人员本地，Maven都会创建一个本地仓库来缓存已经下载的jar包，避免每次都去重新下载，如果不自行设置本地仓库地址，其默认仓库在用户目录下的隐藏文件夹中</strong>  </p><h2 id="Maven的核心"><a href="#Maven的核心" class="headerlink" title="Maven的核心"></a>Maven的核心</h2><p><strong>Maven的核心为pom.xml文件</strong><br>pom.xml文件用XML方式描述项目模型，pom通常有以下元素： </p><ul><li>groupId:表示项目所属的组,通常是一个公司或者组织的名称,如 org.springtramewot。</li><li>artifactId:项目唯一的标识，比如，有spring-boot-starter-web、spring-boot-devtool、groupld 和 artifactld 能唯一标识一个项目或者一个库，我们通常称之为项目坐标。</li><li>packaging:项目的类型，常用的有jar和war 两种，jar 表示项目会打包成一个jar包,这是 Spring Boot 的默认使用方式。</li><li>version:项目的版本号，比如0.0.1-SNAPSHOT、1.5.2.RELEASE。</li></ul><blockquote><p>通常来说，项目版本号分三段，主版本号.次版本号.修订版本号。主版本号变动代表架构变动或者不兼容实现，次版本号是兼容性修改、功能增强，修订版本号则是bug修复。</p><p>版本的后缀意味着项目的不同阶段，SNAPSHOT表示开发中的版本，会修复bug和添加新功能;RELEASE 表示的是一个正式发布版，中间还可能有M1、M2(M指里程碑，即将发布)RC(Release Candidate，发布候选)、GA(general availability，基本可用版本)等表示即将发布前的各个过程，SNAPSHOT&lt;m1&lt;m2…&lt;RC&lt;GA&lt;Realease。</p></blockquote><ul><li>modelVersion:代表pom文件的Maven的版本，如我i的项目的Maven的modelVersion 是4.0.0。</li><li>dependencies:此元素下包含了多个dependency，用来声明项目的依赖，&amp;<strong>这是pom最核心的部分。</strong></li><li>dependency:包含在dependencies中，用来声明项目的依赖，比如项目用到的MySQL驱动。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依赖的坐标是 mysqlmysql-connector-java，版本号是6.0.5。</p><ul><li>scope:scope代表此类库与项目的关系，默认是compile，也就是编译和打包都需要此类库。test表示仅仅在单元测试的时候需要;provided表示在编译阶段需要此类库，但打包阶段不需要，这是因为项目的目标环境已经提供了;runtime 表示在编译和打包的时候都不需要，但在运行的时候需要，比如某个指定的数据库驱动，编译和打包都不需要，但测试应用要连到数据库时就需要此数据库驱动。</li><li>build:此项在 pom 中可选，build 包含了多个插件 plugin，用来辅助项目构建。Maven与以往的 Ant 等其他构建工具不同，Maven 已经约定俗成地包含了构建方法，插件可以在构建过程中影响项目的构建。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="检查Maven环境"><a href="#检查Maven环境" class="headerlink" title="检查Maven环境"></a>检查Maven环境</h2><p><img src="/image/s18.png">   </p><p><strong>注意：Maven安装路径下的conf&#x2F;settings.xml中mirrors元素中要添加仓库镜像</strong>  </p><p><img src="/image/s19.png"></p><h2 id="在IDEA中配置Maven"><a href="#在IDEA中配置Maven" class="headerlink" title="在IDEA中配置Maven"></a>在IDEA中配置Maven</h2><p><img src="/image/s20.png"></p><h2 id="Maven常见命令"><a href="#Maven常见命令" class="headerlink" title="Maven常见命令"></a>Maven常见命令</h2><ul><li>mvn package:编译并打包工程，更具pom.xml中元素packaging是jar还是war进行打包，会在target目录下生成一个jar包或war包。</li><li>mvn install:打包并安装到本地仓库，这样其他本地Maven项目就可以通过项目坐标引用。</li><li>mvn deploy:打包并安装到远程仓库</li><li>mvn clean:清楚target目录</li></ul><h2 id="Spring容器介绍"><a href="#Spring容器介绍" class="headerlink" title="Spring容器介绍"></a>Spring容器介绍</h2><h3 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h3><p>IOC：Inversion of Control,反向控制原则，更为形象得称呼为DI（dependency injection,依赖注入）</p><p>Spring提供多个注解声明Bean为Spring管理的Bean，注释不同代表的含义不同，但对于Spring容器来说，都是Spring管理的Bean</p><ul><li>@Controller:声明此类是一个MVC类，通常和@RequestMapping一起使用。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Controller</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/user&quot;</span>)<br>public class UserController&#123;<br>    <span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/get/&#123;id&#125;&quot;</span>)<br>    public String <span class="hljs-built_in">getUser</span>(<span class="hljs-variable">@PathVariable</span> String id)&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如上述代码，如果客户请求&#x2F;user&#x2F;get&#x2F;1;将调用getUser方法，并把参数1传给id。</p><ul><li>@Service：声明此类是一个业务处理类，通常与@Transactional一起配合使用。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Service</span><br><span class="hljs-variable">@Transactional</span><br>public class UserServiceImpl implements UserService&#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">order</span>(...)&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Repository:声明此类是一个数据库或者其他NoSQL访问类。</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">UserDao</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">CruDao</span>&lt;<span class="hljs-symbol">User,<span class="hljs-symbol">String</span></span>&gt;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>RestController:同Controller，用于REST服务。</li><li>Component:声明此类是一个Spring管理的类，通常用于无法用上述注解描述的Spring管理类。</li><li>Configuration:声明此类是一个配置类，通常与注解@Bean配合使用。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Spring完成一个简单的Web应用</title>
    <link href="/2025/03/30/Spring02/"/>
    <url>/2025/03/30/Spring02/</url>
    
    <content type="html"><![CDATA[<h1 id="完成一个简单的Web应用"><a href="#完成一个简单的Web应用" class="headerlink" title="完成一个简单的Web应用"></a>完成一个简单的Web应用</h1><p>所需要的环境:  </p><ul><li>JDK17</li><li>IDEA旗舰版</li><li>Maven3</li></ul><h2 id="创建一个新项目spring01"><a href="#创建一个新项目spring01" class="headerlink" title="创建一个新项目spring01"></a>创建一个新项目spring01</h2><p><img src="/image/s1.png">  </p><p>向pom.xml文件添加以下部分：</p><pre><code class="hljs">    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.6.13&lt;/version&gt;    &lt;/parent&gt;    &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><p>  <strong>注意：parent内的version要与下方properties内的spring-boot.version相同，否则就会发生冲突</strong></p><h2 id="Hello-Spring-Boot示例"><a href="#Hello-Spring-Boot示例" class="headerlink" title="Hello Spring Boot示例"></a>Hello Spring Boot示例</h2><p>  项目已为我们提供了一个有main方法的类Spring01Application </p><p>  <img src="/image/s2.png">  </p><p>  <strong>其中的<code>@SpringBootApplication</code>以及<code>SpringApplication.run(Spring01Application.class, args);</code>让其不再是个普通的Java类，而是使其成为一个Spring Boot应用</strong>   </p><p>  再创建一个名为HelloworldController的类，包名为com.example.spring01.controller,代码如下：<br>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">  <span class="hljs-keyword">package</span> com.example.spring01.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.*;<br><br><span class="hljs-meta">@Controller</span><span class="hljs-comment">//@Controller是Spring MVC注解，表示此类用于负责处理Web请求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloworldController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;/say.html&quot;</span>)</span><span class="hljs-comment">//@RequestMapping是Spring MVC注解，表示如果请求路径匹配，被注解的方法将被调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> String say()&#123;<span class="hljs-comment">//@ResponseBody表示此方法返回的是文本，并非视图名称</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></p><p>  写了Controller,此时就可以通过浏览器访问应用<br>  <strong>注意：对于SpringBoot应用，建议启动程序Spring01Application的包名层次最高，其余类都在其下</strong>  </p><p>  在浏览器网址框输入<code>http://localhost:8080/say.html</code>，运行结果如下：</p><p>  <img src="/image/s13.png">   </p><p><font size="6"><b><i>访问成功！！！</i></b></font>  </p><h2 id="使用热部署"><a href="#使用热部署" class="headerlink" title="使用热部署"></a>使用热部署</h2><p>热部署通俗来讲就是随时修改程序网页随时响应   </p><p>在pom.xml文件中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重启项目<br>此时修改<code>@RequestMapping(&quot;/say.html&quot;)</code>为<code>@RequestMapping(&quot;/sayhello.html&quot;)</code><br>查看控制台发现并未重启，这是因为有两个按钮未开启，如下两图所示：   </p><p><img src="/image/s14.png"><br><img src="/image/s15.png">  </p><p>开启之后热部署就可以使用了！  </p><p><strong>主要多了两个变化：由于依赖spring-boot-devtools，LiveReload server用于监控Spring Boot应用文件变化，重启时间快是因为Spring Boot再次重启，避免重启Tomcat Server和已经加载的Spring相关类，只重载变化的类</strong></p><h2 id="添加REST支持"><a href="#添加REST支持" class="headerlink" title="添加REST支持"></a>添加REST支持</h2><p>若你的系统不是单一的系统，而是由多个系统组成的，其中一个系统给其他系统提供数据，此时就用到调用方法，RESTFul就可以被考虑。  </p><p>例如新建一个UserReditRestController，添加代码<br><img src="/image/s16.png"> </p><p>代码中没有用到@Controller和@ResposeBody，而是使用了@RestController，可以理解为@RestController相当于@Controller和@ResposeBody  </p><p><strong>注：对于多个系统互相访问，最好不要直接访问对方的数据库，而是采用RESTFul架构，封装逻辑接口；这样对方的数据变更，业务逻辑变化都不会影响到其他系统。详细的RESTFul架构和REST支持将在后面学到</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客的搭建</title>
    <link href="/2025/03/29/Build%20individual%20blog/"/>
    <url>/2025/03/29/Build%20individual%20blog/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建个人博客（Hexo框架）并部署到远端仓库"><a href="#搭建个人博客（Hexo框架）并部署到远端仓库" class="headerlink" title="搭建个人博客（Hexo框架）并部署到远端仓库"></a>搭建个人博客（Hexo框架）并部署到远端仓库</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p><a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a>  </p><p>使用<code>node -v</code>和<code>npm -v</code>命令检验是否安装成功<br>再输入以下命令安装Hexo（使用淘宝镜像）<br><strong><code>npm install-g cnpm --registry=https://registry.npm.taobao.org</code></strong></p><p><img src="/image/image-1.png#pic_right"><br>利用<code>hexo -version</code>检验是否安装成功  </p><p><img src="/image/image-6.png"></p><h2 id="安装Git及配置"><a href="#安装Git及配置" class="headerlink" title="安装Git及配置"></a>安装Git及配置</h2><p><code>https://blog.csdn.net/fanyun_01/article/details/145350857</code>   </p><p>在Git文件夹内新建文件夹blog1，右击blog1点击<code>Git Bash Here</code>,输入以下命令,创建个人博客<br><code>hexo init</code>  </p><p><img src="/image/image-2.png"><br>再输入以下命令启动Hexo<br><code>hexo s</code>  </p><p><img src="/image/image-3.png"><br>在浏览器网址栏输入<code>https://localhost:4000/</code>  </p><p><img src="/image/image-4.png"><br><em><strong>这样一个简单的个人博客就搭建好啦！</strong></em></p><h2 id="新建博客文章"><a href="#新建博客文章" class="headerlink" title="新建博客文章"></a>新建博客文章</h2><p>在blog1路径下直接输入以下命令：<br><code>hexo n &quot;我的第一篇博客.md&quot;</code>    </p><p><img src="/image/s3.png"><br>文件被创建在了&#x2F;source&#x2F;_posts目录下<br>接着进入&#x2F;source&#x2F;_posts目录下<br><code>cd /source/_posts</code>  </p><p>之后就可以直接采用code（VScode）命令打开并修改md文件   </p><p><img src="/image/image-5.png"> </p><p><img src="/image/s5.png">  </p><p><strong>注意：code命令的使用需要配置环境变量</strong>   </p><blockquote><p>点击此电脑——&gt;属性——&gt;高级系统设置——&gt;环境变量——&gt; 用户变量的Path，添加VScode安装路径下的bin文件的根本路径<br><img src="/image/image-7.png"></p></blockquote><p>保存修改的文件后，返回blog1目录下   (<code>cd ../../</code>)<br>输入以下命令<br><code>hexo clean</code>  &#x2F;&#x2F;清理<br><code>hexo g</code>&#x2F;&#x2F;生成<br><code>hexo s</code>&#x2F;&#x2F;启动     </p><p><img src="/image/s6.png">   </p><p>进入博客网页查看文件是否生成 </p><p><img src="/image/s4.png">     </p><h1 id="将博客部署到Gitee-Github"><a href="#将博客部署到Gitee-Github" class="headerlink" title="将博客部署到Gitee&#x2F;Github"></a>将博客部署到Gitee&#x2F;Github</h1><p><strong>由于Gitee Pages暂停服务，所以没有成功😂，但基本步骤是对的</strong>   </p><h2 id="登录Gitee-Gittub"><a href="#登录Gitee-Gittub" class="headerlink" title="登录Gitee&#x2F;Gittub"></a>登录Gitee&#x2F;Gittub</h2><p>点击右上角加号新建仓库，名称最好为<code>你的username.gitee.io</code>，仓库介绍随意写，点击创建即可 </p><p>接着在blog1目录下输入<code>dir</code>查看所有文件，看到存在_config.yml文件，输入以下命令<code>code _config.yml</code>修改配置文件,如下图所示：<br><img src="/image/s8.png"><br>上图内容修改为以下内容：<br><img src="/image/s7.png"><br><strong>注意：repo是指新建的gitee或github仓库的地址</strong><br>我的github仓库地址：<a href="https://github.com/Alder-djr/Alder-djr.github.io.git">https://github.com/Alder-djr/Alder-djr.github.io.git</a> </p><p>接着在blog1目录下输入<code>hexo d</code>远程部署到gitee&#x2F;github平台   </p><p><img src="/image/s9.png">   </p><p><img src="/image/s11.png"> </p><p><img src="/image/s10.png"><br>这样我们的远程仓库就多了很多文件 </p><p>后续如果我们想要打开我们的博客就不需要再命令行里输入<code>hexo s</code>了，直接在网址栏输入上面红框中的内容即可   </p><p><strong>注意：edge浏览器要在前面加上https:&#x2F;&#x2F;</strong>  </p><p>当然我这网页不可访问&#x2F;(ㄒoㄒ)&#x2F;~~  </p><p><img src="/image/s12.png">   </p><p style="color:red">注意：还有一个坑</p> 如果要将其他文件夹的md文件直接复制或移动到/source/_posts目录下，要在文件内容开头加上以下内容，否则无法上传到博客中 <pre><code class="hljs">---title: Hexo博客date: 2025-03-29categories:  - Hexo博客tags:  - Hexo博客---</code></pre><p>title：博客标题；categories：目录；tags：标签   </p><p><strong>另外，如果文件有大幅度修改或创建，还需要执行以下两个命令才能上传至博客中</strong> </p><p><code>hexo clean</code></p><p><code>hexo g</code></p>]]></content>
    
    
    <categories>
      
      <category>Hexo博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架的产生及Spring Boot的推出</title>
    <link href="/2025/03/29/Spring01/"/>
    <url>/2025/03/29/Spring01/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架的产生"><a href="#Spring框架的产生" class="headerlink" title="Spring框架的产生"></a>Spring框架的产生</h1><p>由于JavaEE框架的复杂性（比如假定的分布式系统），Spring是为了解决应用复杂性而产生的框架，它提供两种机制：控制反转（IoC）和面向切面（AOP），来提供任意的服务和增强Bean的任意特性，使得Spring本身容易掌握，又可以通过Bean管理来无限扩展功能。</p><p>注：Bean 是java中的类，通常用于封装数据、业务逻辑或服务。</p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC Core Container:Spring Container负责管理你的任意对象，并结合你对对象的描述进行初始化和加强</p><h6 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h6><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">@Controller</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloworldController</span></span>&#123;<br>    <span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/sayhello.html&quot;</span>)<br>    public <span class="hljs-variable">@RequestBody</span> String <span class="hljs-keyword">say</span>(String name)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>+name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，Spring Container在容器中初始化HelloworldController实例后，对于客户端发起的&#x2F;sayhello.html请求，会执行say方法，并自动将请求参数按照say方法声明的名称一一对应。</p><p><strong>Spring通常提供一些注解：@controller、@Service、@Component、@Configuration,只有使用这些注解才能引起Spring容器的注意，并根据注解含义来管理和增强对象</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-variable">@Controller</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloworldController</span></span>&#123;<br>    <span class="hljs-variable">@Autowired</span> UserService userService;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，类UserService被@Service注解了，在类HelloworldController中，使用@Autowired自动注入这个实例</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP指面向切面编程，通过预编译方式或者运行时刻对目标对象动态地添加功能。例如要实现用户访问控制，可以对每个Controller的方法使用一个自定义的注解Function，用Spring AOP向Controller每个方法动态地添加用户权限校验功能。例子如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/sayhello.html&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>+name;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/adduser.html&quot;</span>)<br><span class="hljs-meta">@Function</span>(<span class="hljs-string">&quot;user.add&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>)&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>注解Function是自定义的一个注解，接受一个字符串，表示Controller方法对应的业务功能，用户是否能访问“user.add”功能，将在数据库中配置。</p><h2 id="Spring的缺点"><a href="#Spring的缺点" class="headerlink" title="Spring的缺点"></a>Spring的缺点</h2><ul><li>使用门槛高，入门Spring需很长时间</li><li>对过时技术兼容，导致使用复杂度高（比如处理事务使用XML还是注解@Trasaction）<br>Trasaction：Deposit(&#x2F;dɪˈpɒzɪt&#x2F;) money into or withdraw money from a bank account.</li><li>XML配置已不再流行</li><li>集成第三方工具时，程序员还要考虑工具之间的兼容性</li><li>系统启动慢，不具备热部署功能，完全依赖虚拟机或Web服务器的热部署</li></ul><h2 id="SpringBoot的推出"><a href="#SpringBoot的推出" class="headerlink" title="SpringBoot的推出"></a>SpringBoot的推出</h2><p>基于Spring的缺点，Spring开发人员推出SpringBoot，解决了以上缺点，<strong>SpringBoot能激素开发Web系统，更容易架构大的分布式系统</strong></p><hr><p>SpringBoot管理Spring容器、第三方插件，并提供很多默认系统级的服务，无论是简单的Web系统还是负复杂的系统，都只需要少量配置和代码就能完成。   </p><ul><li>SpringBoot通过Starter来提供系统级服务</li></ul><p>如果要开发一个Web应用，只需要在pom.xml中声明一下代码即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>以下是SpringBoot提供的常用Starter  ：</li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>spring-boot-starter</code></td><td>核心 Starter，包括自动配置支持、日志库和 YAML</td></tr><tr><td><code>spring-boot-starter-web</code></td><td>用于构建 Web 应用程序，包括 Spring MVC 和 Tomcat</td></tr><tr><td><code>spring-boot-starter-data-jpa</code></td><td>用于 Spring Data JPA 与 Hibernate，便于数据库操作</td></tr><tr><td><code>spring-boot-starter-security</code></td><td>提供 Spring Security 支持，用于添加安全和身份验证</td></tr><tr><td><code>spring-boot-starter-test</code></td><td>提供用于测试 Spring Boot 应用的库，如 JUnit、Hamcrest 和 Mockito</td></tr><tr><td><code>spring-boot-starter-jdbc</code></td><td>用于支持 JDBC 数据库访问和数据库池配置</td></tr><tr><td><code>spring-boot-starter-cache</code></td><td>提供缓存支持，例如 EhCache、Caffeine 或简单的内存基缓存</td></tr><tr><td><code>spring-boot-starter-actuator</code></td><td>提供生产级别的应用监控和管理功能</td></tr><tr><td><code>spring-boot-starter-mail</code></td><td>用于支持发送电子邮件</td></tr><tr><td><code>spring-boot-starter-aop</code></td><td>包括 spring-aop 和 AspectJ，支持面向切面编程</td></tr><tr><td><code>spring-boot-starter-batch</code></td><td>用于支持 Spring Batch，一个批量处理框架</td></tr><tr><td><code>spring-boot-starter-data-redis</code></td><td>用于 Spring Data Redis 和 Lettuce 客户端的 Redis 键值数据存储</td></tr><tr><td><code>spring-boot-starter-data-mongodb</code></td><td>用于 MongoDB 文档数据库和 Spring Data MongoDB</td></tr><tr><td><code>spring-boot-starter-data-elasticsearch</code></td><td>用于 Elasticsearch 搜索和分析引擎以及 Spring Data Elasticsearch</td></tr><tr><td><code>spring-boot-starter-websocket</code></td><td>用于构建 WebSocket 应用程序</td></tr><tr><td><code>spring-boot-starter-thymeleaf</code></td><td>用于使用 Thymeleaf 视图构建 MVC Web 应用程序</td></tr><tr><td><code>spring-boot-starter-freemarker</code></td><td>用于使用 FreeMarker 视图构建 MVC Web 应用程序</td></tr><tr><td><code>spring-boot-starter-mustache</code></td><td>用于使用 Mustache 视图构建 MVC Web 应用程序</td></tr></tbody></table><h2 id="SpringBoot相对于Spring的优点"><a href="#SpringBoot相对于Spring的优点" class="headerlink" title="SpringBoot相对于Spring的优点"></a>SpringBoot相对于Spring的优点</h2><ul><li>实现约定大于配置，是一个低配置的应用系统框架，且能够使用Spring的大量功能  </li><li>提供内置的Tomcat或者Jetty容器  </li><li>通过依赖jar包管理、自动装配技术，容易支持与其他技术体系、工具集成  </li><li>支持热加载，开发体验好，也支持SpringBoot系统监控，方便了解系统运行状态</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java接口类</title>
    <link href="/2025/03/06/java12/"/>
    <url>/2025/03/06/java12/</url>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li>接口可持有类、接口、常量（public\static\final）、抽象方法(public\abstract)，接口是引用类型的一种</li><li>接口interface，相当于一个遥控器</li><li>无法创建接口类型的实例</li></ul><p>定义一个播放器接口：<br>Player.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Player</span> &#123;<span class="hljs-comment">//接口interface，相当于一个遥控器</span><br>    <span class="hljs-comment">//无法创建接口类型的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span>()</span>;<span class="hljs-comment">//public abstract void play();</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stop</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口的派生"><a href="#接口的派生" class="headerlink" title="接口的派生"></a>接口的派生</h2><ul><li>子接口继承父接口的方法</li><li>一个子接口不可以继承多个父接口</li></ul><p>定义接口类ExPlayer继承Player<br>ExPlayer.java:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ExPlayer</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">Player</span>&#123;<span class="hljs-comment">//ExPlayer继承了父接口的stop和play方法</span><br>    <span class="hljs-comment">//ExPlayer是父接口、Player是子接口，一个子接口不可以继承多个父接口</span><br>    <span class="hljs-built_in">void</span> slow();<span class="hljs-comment">//慢放</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h2><ul><li>接口的实现，定义实现各个按钮所调用的方法主体</li><li>若接口实现类实现了接口的所有方法，则是非抽象类，否则是抽象类</li></ul><p>VideoPlayer.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">VideoPlayer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Player</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">//类变量，只有一个</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VideoPlayer</span>()</span>&#123;<br>        id=++count;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;视频播放开始&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;视频播放暂停&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printInFo</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;该机器的制造编号[&quot;</span>+id+<span class="hljs-string">&quot;]。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CDPlayer.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CDPlayer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Player</span>&#123;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span>()</span> &#123;<span class="hljs-comment">//重写play()</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;CD播放器开始！&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span>()</span> &#123;<span class="hljs-comment">//重写stop()</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;CD播放器结束！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cleaning</span>()</span>&#123;<span class="hljs-comment">//重写cleaning()</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;已清洗磁头！&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>DVDPlayer.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DVDPlayer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExPlayer</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">play</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;DVD播放开始&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">stop</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;DVD播放结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">slow</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;DVD慢放开始&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类PlayerTester.java：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerTester</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Player[] a=<span class="hljs-keyword">new</span> Player[<span class="hljs-number">3</span>];<br>        a[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> VideoPlayer();<br>        a[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> CDPlayer();<br>        a[<span class="hljs-number">2</span>]=<span class="hljs-keyword">new</span> DVDPlayer();<br><br>        <span class="hljs-keyword">for</span>(Player s:a)&#123;<span class="hljs-comment">//执行动态联编</span><br>            s.play();<span class="hljs-comment">//无法调用各自的新增的方法，例如a[0]这个类型无法调用VideoPlayer()新增的方法printInFo()</span><br>            s.stop();<span class="hljs-comment">//也可用instanceof运算符来判断引用实例的类型</span><br>            System.<span class="hljs-keyword">out</span>.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：父类类型引用子类的实例调用的方法只能是子类重写父类的方法，不能调用子类新增的方法</strong><br><strong>接口也可以利用instanceof运算符来判断引用实例的类型</strong></p><p>运行结果如下：<br><img src="/image/s67.png"></p><h2 id="一个类实现多个接口"><a href="#一个类实现多个接口" class="headerlink" title="一个类实现多个接口"></a>一个类实现多个接口</h2><p>定义一个换肤接口Skinnable.java:<br>持有常量的接口</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap14;<br><span class="hljs-comment">//换肤接口，持有常量的接口</span><br><span class="hljs-comment">//有些软件可以自由切换窗口和按钮的设计，则是通过该接口实现的</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Skinnable</span> </span>&#123;<br>    <span class="hljs-comment">//字段都是public static final类型，且是类变量，不可改写</span><br>    <span class="hljs-keyword">int</span> BLACK=<span class="hljs-number">0</span>;<span class="hljs-comment">//该常量可以利用Skinnable.BLACK来访问，即类名.字段名</span><br>    <span class="hljs-keyword">int</span> RED=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> GREEN=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> BLUE=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> LEOPARD=<span class="hljs-number">4</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">changeSkin</span><span class="hljs-params">(<span class="hljs-keyword">int</span> skin)</span></span>;<span class="hljs-comment">//该方法是public abstract</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个可换肤的随身播放器PortablePlayer.java:</p><p><strong>该类就可以实现两个接口类Player和Skinnable</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PortablePlayer</span> <span class="hljs-title">implements</span> <span class="hljs-title">Player</span>,<span class="hljs-title">Skinnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> skin=BLACK;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PortablePlayer</span>()</span>&#123;&#125;;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span>()</span> &#123;<span class="hljs-comment">//重写Player中的play()</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;播放开始！&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span>()</span> &#123;<span class="hljs-comment">//重写Player中的stop()</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;播放结束！&quot;</span>);<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">changeSkin</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> skin</span>)</span> &#123;<span class="hljs-comment">//重写Skinnable中的changeSkin(int skin)</span><br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;皮肤换成了&quot;</span>);<br>        <span class="hljs-keyword">switch</span> (skin)&#123;<br>            <span class="hljs-keyword">case</span> BLACK:<span class="hljs-comment">//在类中，可以使用简名来访问实现的接口中的字段</span><br>                System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;乌黑&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> RED:<br>                System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;深红&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> GREEN:<br>                System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;柳叶&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BLUE:<br>                System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;露草&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> LEOPARD:<br>                System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;豹纹&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-literal">default</span>:<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;。&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类PortablePlayerTester.java：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PortablePlayerTester</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">PortablePlayer</span> a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PortablePlayer</span>();<br>        a.<span class="hljs-title function_">play</span>();<br>        a.<span class="hljs-title function_">stop</span>();<br>        a.<span class="hljs-title function_">changeSkin</span>(<span class="hljs-title class_">Skinnable</span>.<span class="hljs-property">LEOPARD</span>);<span class="hljs-comment">//使用类名.字段名来访问常量（类变量）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s68.png"></p><h2 id="继承-实现"><a href="#继承-实现" class="headerlink" title="继承+实现"></a>继承+实现</h2><p>定义一个接口类Plane2D.java:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Plane2D</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//面积</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将上一节中的长方形类修改：</p><ul><li><strong>既有继承又有实现时，先书写extends后写implements,Shape是血缘关系，接口是朋友关系</strong></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap14;<br><span class="hljs-keyword">import</span> chap<span class="hljs-number">13.</span>Shape;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle1</span> extends Shape implements Plane2D&#123;<span class="hljs-comment">//先书写extends后写implements,Shape一族市血缘关系，接口是朋友关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle1</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.width = width;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;width;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;height;j++)&#123;<br>                System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>            &#125;<br>            System.out.<span class="hljs-built_in">println</span>();<br>        &#125;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Rectangle(width:&quot;</span>+width+<span class="hljs-string">&quot;,height:&quot;</span>+height+<span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br><br>   @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">Area</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写Plane2D的Area()方法</span><br>        <span class="hljs-keyword">return</span> width*height;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap14;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RectangleTester</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Rectangle1 r=<span class="hljs-keyword">new</span> Rectangle1(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>        System.<span class="hljs-keyword">out</span>.println(r.toString());<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;该长方形的面积为&quot;</span>+r.Area());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s69.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java抽象类</title>
    <link href="/2025/03/05/java11/"/>
    <url>/2025/03/05/java11/</url>
    
    <content type="html"><![CDATA[<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><ul><li>抽象类：如果对下位类进行分组，充分利用多态的类中没有具体的主体，则可以定义为抽象类</li><li>标识在该类中无法定义方法主体，只在派生的类中定义</li><li>抽象方法中不写具体实现，而是在抽象类的子类中实现</li><li>抽象类不可以指定final、static、private</li><li>类中只要包含一个抽象方法，就必须将其声明为抽象类；抽象类中也可以没有抽象方法</li><li>非抽象方法print()调用了无主体的抽象方法，其派生的类自动继承该方法</li><li>如果抽象类派生的类存在没有实现的抽象方法，则会自动继承抽象方法，<ul><li>eg：父类——子类a——子类b（继承子类a），父类有两个抽象方法c和d，子类a只重写父类的抽象方法c，则会自动继承另d，所以子类a为抽象类</li><li>而子类b重写了抽象方法d，也自动继承了子类a的抽象方法c，因此子类b重写了所有的抽象方法，它不是抽象类</li></ul></li><li>抽象方法的定义将{}改为”;”,否则无法定义</li></ul><p>定义一个表示图形概念的类，不是一个具体的图形<br>Shape.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Shape</span> &#123;<span class="hljs-comment">//抽象类，标识在该类中无法定义方法主体，只在派生的类中定义</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span>()</span>;<span class="hljs-comment">//抽象方法，将&#123;&#125;改为&quot;;&quot;,否则无法定义</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title">toString</span>()</span>;<span class="hljs-comment">//toString()方法是“老大类”Object类中定义的非抽象方法，这里强行将非抽象方法重写为抽象方法</span><br>    <span class="hljs-comment">//这样是为了让其派生的类必须重写toString方法，否则就会编译错误</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span>()</span>&#123;<span class="hljs-comment">//非抽象方法print()调用了无主体的抽象方法，其派生的类自动继承该方法，</span><br>    <span class="hljs-comment">//调用：p.print();p是Shape型的数组，调用哪个print()取决于p引用的是哪个类型的实例</span><br>        <br>        System.<span class="hljs-keyword">out</span>.println(toString());<br>        draw();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类的派生-不实现方法"><a href="#抽象类的派生-不实现方法" class="headerlink" title="抽象类的派生(不实现方法)"></a>抽象类的派生(不实现方法)</h2><ul><li><strong>若子类未重写父类中的所有方法，该子类应该定义为抽象类</strong></li></ul><p>定义一个抽象直线类（抽象的原因：直线有横线和竖线）继承抽象图形类：<br>AbstLine.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap13;<br><span class="hljs-comment">//直线类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstLine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span></span>&#123;<span class="hljs-comment">//由于该类未重写方法draw和toString，所以是抽象类</span><br>    <span class="hljs-comment">//该子类中直接继承point()、draw()和toString()</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> length;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AbstLine</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.length = length;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setLength</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.length = length;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个抽象三角形类（抽象的原因：三角形有多种类型）继承抽象图形类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap13;<br><br><span class="hljs-keyword">public</span> abstract <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> extends Shape&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<span class="hljs-comment">//高</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Triangle</span><span class="hljs-params">(<span class="hljs-type">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-type">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="抽象类的派生-实现方法"><a href="#抽象类的派生-实现方法" class="headerlink" title="抽象类的派生(实现方法)"></a>抽象类的派生(实现方法)</h2><p>定义一个点类继承抽象图形类:<br>Point.java</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> chap13;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Shape</span> </span>&#123;<br>    <span class="hljs-type">Point</span>()&#123;&#125;<span class="hljs-comment">//构造函数</span><br><br>    <span class="hljs-meta">@Override</span><br>    public void draw() &#123;<span class="hljs-comment">//重写draw()</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    public <span class="hljs-type">String</span> toString()&#123;<span class="hljs-comment">//重写toString()</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Point&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个长方形类继承继承抽象图像类：<br>Rectangle.java:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> extends Shape&#123;<span class="hljs-comment">//父类的两个抽象方法都重写了，则不是抽象类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> width;<span class="hljs-comment">//宽</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<span class="hljs-comment">//高</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rectangle</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.width = width;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写抽象类shape的抽象方法draw，这称为“实现”（声明方法主体的定义）</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;width;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;height;j++)&#123;<br>                System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>            &#125;<br>            System.out.<span class="hljs-built_in">println</span>();<br>        &#125;<br>    &#125;<br><br>    @<span class="hljs-function">Override</span><br><span class="hljs-function">    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Rectangle(width:&quot;</span>+width+<span class="hljs-string">&quot;,height:&quot;</span>+height+<span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个直角三角形类继承抽象三角形类：<br>LeftDownTriangle.java:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LeftDownTriangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Triangle</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LeftDownTriangle</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(height);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=getHeight();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)&#123;<br>                System.out.print(<span class="hljs-string">&#x27;+&#x27;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;LeftDownTriangle(height=&quot;</span>+getHeight()+<span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个横线类继承<strong>抽象直线类</strong>：<br>HorzLine.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HorzLine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstLine</span></span>&#123;<span class="hljs-comment">//不是抽象类</span><br><span class="hljs-comment">//以下是文档注释，文档注释只能在类、构造函数、方法、字段前面声明才会被识别</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length    //<span class="hljs-doctag">@param</span>指参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span> “杜佳荣”  //作者</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HorzLine</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(length);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写draw()</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=getLength();i++)&#123;<br>            System.out.print(<span class="hljs-string">&#x27;-&#x27;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &quot;HorzLinee(length=&quot;+getLength()+&quot;)&quot;   //返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写toString()</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HorzLinee(length=&quot;</span>+getLength()+<span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：文档注释只能在类、构造函数、方法、字段前面声明才会被识别</strong></p><p>定义一个竖线类继承<strong>抽象直线类</strong>:<br>VertLine.java：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VertLine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstLine</span></span>&#123;<span class="hljs-comment">//不是抽象类</span><br><span class="hljs-comment">//AbstLine类通过getLength()和setLength()方法封装了length变量的访问。</span><br><span class="hljs-comment">//子类VertLine可以通过这些方法来获取和设置length的值，而不需要直接访问private变量。所以不需要再次定义private int length；</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VertLine</span><span class="hljs-params">(<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(length);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写draw()</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=getLength();i++)&#123;<br>            System.out.println(<span class="hljs-string">&#x27;|&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重写toString()</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;VertLine(length=&quot;</span>+getLength()+<span class="hljs-string">&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类1:ShapeTester.java:<br>创建Shape型数组，将Shape类的子类类型的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap13;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ShapeTester</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Shape[] a=<span class="hljs-keyword">new</span> Shape[<span class="hljs-number">5</span>];<span class="hljs-comment">//创建的是元素为Shape类型的数组，无法创建Shape型的实例</span><br><br>        a[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> Point();<br>        a[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> Rectangle(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//a[0]和a[1]是Shape型的类类型变量，引用自派生Shape类的实例</span><br>        a[<span class="hljs-number">2</span>]=<span class="hljs-keyword">new</span> VertLine(<span class="hljs-number">3</span>);<br>        a[<span class="hljs-number">3</span>]=<span class="hljs-keyword">new</span> HorzLine(<span class="hljs-number">4</span>);<br>        a[<span class="hljs-number">4</span>]=<span class="hljs-keyword">new</span> LeftDownTriangle(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-keyword">for</span>(Shape i:a)&#123;<br>            i.print();<span class="hljs-comment">//调用Shape类中的非抽象方法print()，根据i的类型来选择定义哪个重写的point()</span><br>            System.<span class="hljs-keyword">out</span>.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：可以创建的是元素为抽象类类型的数组，但无法创建抽象类类型的实例</strong>  </p><p>运行结果如下：<br><img src="/image/s66.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类的派生和多态</title>
    <link href="/2025/03/04/java10/"/>
    <url>/2025/03/04/java10/</url>
    
    <content type="html"><![CDATA[<h1 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h1><ul><li><p>派生：继承已有类的资产以及添加重写字段和方法，继承的好处就是可以进行增量编程，提高程序的开发效率和维护性。子类在继承父类时，会将其作为自己的一部分，也就是子类包含父类的成员;</p></li><li><p>在类的派生中，只有类的成员（字段、方法、类、接口）可以被继承；</p></li><li><p>不可以被子类继承的：私有访问属性（private）的成员和非成员（构造函数、实例初始化器、静态初始化器），当然也不可以被重写</p></li><li><p>final类不可以作为父类，也就是不能随便将派生的类定义为final类;final方法不可以被子类重写，也就是不应该父类中的方法定义为final类；<strong>而且final类中的所有方法自动变为final方法</strong></p></li><li><p>当重写方法时，必须赋给与上位类中方法相同或更弱的访问控制修饰符；public\protected\无关键字（包）\private限制依次变强<br>但是即使父类的方法是private型，子类也可以定义相同名字、相同返回类型的方法，这样编译器会自动认为它们是不同的方法</p></li></ul><p><strong>除了Object类之外的所有类都是Object类的下位类</strong></p><p><strong>父类的类方法不可以被重写为实例方法</strong></p><h2 id="super调用父类构造函数"><a href="#super调用父类构造函数" class="headerlink" title="super调用父类构造函数"></a>super调用父类构造函数</h2><p>继承Account类的TimeAccount.java:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> chap12;<br><br><span class="hljs-keyword">import</span> chap08.Account;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Account</span> </span>&#123;<span class="hljs-comment">//从已有的Account类（上位类、父类）派生一个继承其资产的TimeAccount类（下位类、子类）</span><br>    <br>        <span class="hljs-comment">//子类在继承父类时，会将其作为自己的一部分，也就是子类包含父类的成员</span><br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> timeBalance;<span class="hljs-comment">//可用余额（定期存款）</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TimeAccount</span><span class="hljs-params">(String name, String no, <span class="hljs-keyword">long</span> balance,<span class="hljs-keyword">long</span> timeBalance)</span> </span>&#123;<br>            <span class="hljs-comment">//在类的派生中，构造函数不可被继承</span><br>            <span class="hljs-comment">// super只能在构造函数的开头调用，如果不调用以下super(name,no,balance)语句，则会调用无形参的super()，</span><br>            <span class="hljs-comment">// 而父类不存在无形参的构造函数，则会编译错误</span><br>            <span class="hljs-keyword">super</span>(name,no,balance);<br>            <span class="hljs-comment">//super(name,no,balance);//子类通过super调用父类的构造函数，注意：父类的构造函数只能包括这三个形参时才能调用</span><br>            <span class="hljs-keyword">this</span>.timeBalance=timeBalance;<br>        &#125;<span class="hljs-comment">//若子类中没有定义构造函数，编译器则会自动创建默认构造函数：TimeAccount()&#123;super()&#125;;也就是说会调用父类的无形参的构造函数</span><br><br><br>        <span class="hljs-comment">//确认定期存款</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">long</span> <span class="hljs-title">getTimeBalance</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> timeBalance;<br>        &#125;<br><br>        <span class="hljs-comment">//解除定期存款，全部转为普通存款</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cancel</span><span class="hljs-params">()</span></span>&#123;<br>            deposit(timeBalance);<br>            timeBalance=<span class="hljs-number">0</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：在类的派生中，构造函数不可被继承，只能利用super调用</strong>  </p><p><strong>注意：super只能在构造函数的开头调用，如果不调用父类对应构造函数的super语句，则会默认调用无形参的super()</strong><br>Account.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package chap08;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br><br>    <span class="hljs-comment">//字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> no;<span class="hljs-comment">//账号</span><br>    <span class="hljs-keyword">private</span> long balance;<span class="hljs-comment">//余额</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> openDate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> <span class="hljs-keyword">from</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> to;<br><br><span class="hljs-title class_">Account</span>()&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> no, long balance,<span class="hljs-title class_">Day</span> openDate,<span class="hljs-title class_">Day</span> <span class="hljs-keyword">from</span>,<span class="hljs-title class_">Day</span> to) &#123;<span class="hljs-comment">//构造函数：名称与类相同且没有返回值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">no</span>=no;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span>=balance;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">openDate</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(openDate);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(<span class="hljs-keyword">from</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(to);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> no, long balance) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">no</span>=no;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span>=balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//实例方法。字段和方法统称为成员</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br><br>    <span class="hljs-comment">//确认账号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getNo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-comment">//确认可用余额</span><br>    <span class="hljs-keyword">public</span> long <span class="hljs-title function_">getBalance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getOpenDate</span>(<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(openDate);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getFrom</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(<span class="hljs-keyword">from</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getTo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(to);<br>    &#125;<br><br>    <span class="hljs-comment">//存钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">long k</span>)&#123;<br>        balance+=k;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">long k</span>)&#123;<br>        balance-=k;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> openDate.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ openDate.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+ openDate.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString2</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//当它的子类要重写该方法时，必须加上public</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span><br>                + <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日到&quot;</span>+ to.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ to.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+to.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：TimeAccountTester1.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//is-A关系和实例的引用</span><br>package chap12;<br><br>import chap08.Account;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TimeAccountTester1</span> &#123;<br><br>    <span class="hljs-comment">//对比两个账户的金额</span><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">comBalance</span>(<span class="hljs-params">Account a,Account b</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(a.getBalance()&gt;b.getBalance())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a.getBalance()&lt;b.getBalance()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//创建Account类型的实例</span><br>        Account adachi=<span class="hljs-keyword">new</span> Account(<span class="hljs-string">&quot;足立幸一&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">//创建TimeAccount类型的实例</span><br>        TimeAccount nakata=<span class="hljs-keyword">new</span> TimeAccount(<span class="hljs-string">&quot;中田真二&quot;</span>,<span class="hljs-string">&quot;654321&quot;</span>,<span class="hljs-number">200</span>,<span class="hljs-number">500</span>);<br><br><span class="hljs-comment">//        Account x;</span><br><span class="hljs-comment">//        x=adachi;</span><br><span class="hljs-comment">//        //x=nakata;//Account类型能引用TimeAccount类型的实例</span><br><span class="hljs-comment">//        System.out.println(&quot;x的可用余额：&quot;+x.getBalance());</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        TimeAccount y;</span><br><span class="hljs-comment">//        //y=adachi;//TimeAccount类型（子类）不能引用Account类型（父类）的实例</span><br><span class="hljs-comment">//        y=nakata;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        System.out.println(&quot;Y可用余额：&quot;+y.getBalance());</span><br><span class="hljs-comment">//        System.out.println(&quot;y的定期存款：&quot;+y.getTimeBalance());</span><br><br><br>        <span class="hljs-keyword">switch</span> (comBalance(adachi,nakata))&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;足立存款金额更多&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//每个case后面要加上break，以便跳出switch语句</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;中田存款金额更多&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;两人存款金额相同&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：父类可以引用子类的实例，但子类无法引用父类的实例</strong></p><p><strong>注意：java不支持多重继承，也就是一个儿子不能有好几个父亲</strong></p><h2 id="super调用父类成员"><a href="#super调用父类成员" class="headerlink" title="super调用父类成员"></a>super调用父类成员</h2><p>子类采用<code>super.父类成员名</code>的方式来调用父类方法（这里的成员包括变量和方法）<br>eg:Base.java:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap12;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Base &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> x;<span class="hljs-comment">//这里x是protected访问属性，只有其包内和其派生类才能访问x</span><br><br>    Base()&#123;<br>        <span class="hljs-keyword">this</span>.x=<span class="hljs-number">0</span>;<br>    &#125;<br>    Base(<span class="hljs-keyword">int</span> x)&#123;<br>        <span class="hljs-keyword">this</span>.x=x;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">print</span>()&#123;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;Base.x=&quot;</span>+x);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> Derived <span class="hljs-keyword">extends</span> Base&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> x;<br>    Derived(<span class="hljs-keyword">int</span> x1,<span class="hljs-keyword">int</span> x2)&#123;<br>        <span class="hljs-comment">//父类的成员可以通过“super.成员名”进行访问</span><br>        <span class="hljs-keyword">super</span>.x=x1;<br>        <span class="hljs-keyword">this</span>.x=x2;<br>    &#125;<br><br>    <span class="hljs-comment">//重写父类的方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-keyword">print</span>() &#123;<br>        <span class="hljs-comment">//父类的成员可以通过“super.成员名”进行访问</span><br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">print</span>();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;Derived.x=&quot;</span>+x);<span class="hljs-comment">//不带super.和this.的x是this.x;这是因为当存在同名的字段和方法时，父类的名称会被隐藏</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> Cent <span class="hljs-keyword">extends</span> Derived&#123;<span class="hljs-comment">//Derived类仍能派生Cent类，</span><br>    <span class="hljs-comment">//此时Base类是上位类——&gt;包括父类在内的祖先类（父亲、祖父、曾祖父）</span><br>    <span class="hljs-comment">//间接上位类：除了父类的祖先类</span><br>    <span class="hljs-comment">//下位类：包括孩子在内的子孙类（孩子，孙子）</span><br>    <span class="hljs-comment">//间接下位类：除了孩子的子孙类</span><br>    Cent(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> x2) &#123;<br>        <span class="hljs-keyword">super</span>(x1, x2);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> SuperTester&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        Base a=<span class="hljs-keyword">new</span> Base(<span class="hljs-number">10</span>);<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;--a--&quot;</span>);<br>        a.<span class="hljs-keyword">print</span>();<br><br>        Derived b=<span class="hljs-keyword">new</span> Derived(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;--b--&quot;</span>);<br>        b.<span class="hljs-keyword">print</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p><font size="5">面向对象的三大要素：类（封装）、继承、多态</font></p><p>多态：类类型由于类的派生的关系，可以引用多种类类型实例</p><p><strong>父类可以引用子类的实例</strong></p><p>宠物与主人程序<br>Pet.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package chap12;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> masterName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-title class_">String</span> name,<span class="hljs-title class_">String</span> masterName)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">masterName</span>=masterName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getMasterName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> masterName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">introduce</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//重写Pet类的introduce方法，让父类的该方法无效，重新写内容；重写：override</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;我的名字是&quot;</span>+<span class="hljs-title function_">getName</span>());<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;我主人的名字是&quot;</span>+<span class="hljs-title function_">getMasterName</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Pet的子类RobotPet.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">RobotPet</span> <span class="hljs-title">extends</span> <span class="hljs-title">Pet</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RobotPet</span>(<span class="hljs-params">String name,String masterName</span>)</span>&#123;<span class="hljs-comment">//构造函数不可以被继承，只能被调用</span><br>        super(name,masterName);<br>    &#125;<br><br>    @Override<span class="hljs-comment">//重写父类的方法时，最好加上注解@Override，主要是防止人类将重写的方法名写错（要传达给人类和编译器的注释称为注解）</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">introduce</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我是机器人，我的名字是&quot;</span>+getName()+<span class="hljs-string">&quot;。&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我主人的名字是&quot;</span>+getMasterName()+<span class="hljs-string">&quot;。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//子类新增的work方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">work</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> sw</span>)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (sw)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;打扫&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;洗衣服&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;做饭&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类1 PetTester1.java:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">PetTester1</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Pet kur=<span class="hljs-keyword">new</span> Pet(<span class="hljs-string">&quot;咪咪&quot;</span>,<span class="hljs-string">&quot;杜佳荣&quot;</span>);<br>        kur.introduce();<span class="hljs-comment">//调用Pet的introduce()方法</span><br>        System.<span class="hljs-keyword">out</span>.println();<br><br>        RobotPet r2d2=<span class="hljs-keyword">new</span> RobotPet(<span class="hljs-string">&quot;Robot2&quot;</span>,<span class="hljs-string">&quot;杜佳荣&quot;</span>);<br>        r2d2.introduce();<span class="hljs-comment">//调用RobotPet的introduce()方法</span><br>        System.<span class="hljs-keyword">out</span>.println();<br><br>        Pet p= r2d2;<span class="hljs-comment">//引用类型的放大转换，父类Pet可以引用子类RobotPet的实例，但实例类型仍是Pet型。</span><br>        <br>        p.introduce();<span class="hljs-comment">//此时最终运行时调用的是RobotPet类中的introduce方法（动态联编）（方法调用时使用动态联编），但是编译时调用的是Pet类中的方法（静态联编）</span><br><br>        <span class="hljs-comment">//类类型由于类的派生的关系，可以引用多种类类型实例，这就称为多态</span><br><br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;请输入要选择的家务：0：打扫；1:洗衣服；2：做饭&quot;</span>);<br>        <span class="hljs-built_in">int</span> n= scanner.nextInt();<br><br>        r2d2.work(n);<br>        <span class="hljs-comment">//p.work(n);错误，因为p是Pet类型的，只是引用的实例类型不一样</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s63.png"></p><p>测试类2 PetTester2.java:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PetTester2</span>&#123;<br>    <span class="hljs-comment">//类方法intro</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">intro</span>(<span class="hljs-params"><span class="hljs-title class_">Pet</span> p</span>)&#123;<br>        p.<span class="hljs-title function_">introduce</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Pet</span>[] a=&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;kurt&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">RobotPet</span>(<span class="hljs-string">&quot;jurt&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>),<span class="hljs-comment">//调用的是RobotPet中的introduce方法</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>(<span class="hljs-string">&quot;Lurt&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>),<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-title class_">Pet</span> <span class="hljs-attr">p</span>:a)&#123;<br>            <span class="hljs-title function_">intro</span>(p);<span class="hljs-comment">//第二个元素RobotPet型调用的是RobotPet中的introduce方法</span><br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s64.png"></p><h2 id="InstanceOf关键词"><a href="#InstanceOf关键词" class="headerlink" title="InstanceOf关键词"></a>InstanceOf关键词</h2><p>InstanceOf关键词用来判断对象的引用类型，使用格式是：【类类型变量 instanceof 类】</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">PetInstanceOf</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Pet[] a=&#123;<br>                <span class="hljs-keyword">new</span> Pet(<span class="hljs-string">&quot;kurt&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>),<br>                <span class="hljs-keyword">new</span> RobotPet(<span class="hljs-string">&quot;jurt&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>),<span class="hljs-comment">//调用的是RobotPet中的introduce方法</span><br>                <span class="hljs-keyword">new</span> Pet(<span class="hljs-string">&quot;Lurt&quot;</span>,<span class="hljs-string">&quot;王五&quot;</span>),<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a[&quot;</span>+i+<span class="hljs-string">&quot;]&quot;</span>);<br><br>            <span class="hljs-keyword">if</span>(a[i] instanceof RobotPet)<span class="hljs-comment">//如果换成Pet，因为RobotPet是Pet的子类，间接属于Pet类，则if就会一直为true，不会执行else</span><br>                ((RobotPet) a[i]).work(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">else</span><br>                a[i].introduce();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s65.png"><br><strong>注意：instanceof后面一般是子类类型非父类类型，否则则会一直返回true</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类类型数组</title>
    <link href="/2025/03/03/java09/"/>
    <url>/2025/03/03/java09/</url>
    
    <content type="html"><![CDATA[<p>日期类与上一章节相同<br>Day1.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Day1</span> &#123;<span class="hljs-comment">//原则上类声明时都应该加上public，但规模较小的用完即舍弃的类除外，加上public表示该类可以在任何地方使用，没有则表示只能在该包内使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> year=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-built_in">int</span> month=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> date=<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//构造函数也可重载</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>()</span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<span class="hljs-keyword">if</span>(year==<span class="hljs-number">0</span>) year=<span class="hljs-number">1</span>; <span class="hljs-keyword">this</span>.year=year;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month</span>)</span>&#123;<span class="hljs-keyword">this</span>(year);<span class="hljs-keyword">this</span>.month=month;&#125;<span class="hljs-comment">//利用this()来调用该类中的其他构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month, <span class="hljs-built_in">int</span> date</span>)</span>&#123;<span class="hljs-keyword">this</span>(year,month);<span class="hljs-keyword">this</span>.date=date;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day1</span>(<span class="hljs-params">Day1 d</span>)</span>&#123;<span class="hljs-keyword">this</span>(d.year,d.month,d.date);&#125;<span class="hljs-comment">//复制构造函数</span><br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getYear</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setYear</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getMonth</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMonth</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> month</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getDate</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> date</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year,<span class="hljs-built_in">int</span> month,<span class="hljs-built_in">int</span> date</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.year=year;<br>        <span class="hljs-keyword">this</span>.date=date;<br>        <span class="hljs-keyword">this</span>.month=month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">dayOfWeek</span>()</span>&#123;<br>        <span class="hljs-built_in">int</span> y=year;<br>        <span class="hljs-built_in">int</span> m=month;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>||m==<span class="hljs-number">2</span>)&#123;<br>            y--;<br>            m+=<span class="hljs-number">12</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (y+y/<span class="hljs-number">4</span>-y/<span class="hljs-number">100</span>+y/<span class="hljs-number">400</span>+(<span class="hljs-number">13</span>*m+<span class="hljs-number">8</span>)/<span class="hljs-number">5</span>+date)%<span class="hljs-number">7</span>;<span class="hljs-comment">//蔡勒公式，只能计算1582年10月15日之后的日期所对应的星期</span><br>        <span class="hljs-comment">//0代表星期日，1代表星期一，以此类推</span><br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">equalTo</span>(<span class="hljs-params">Day1 d</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> year==d.year &amp;&amp; month==d.month &amp;&amp; date==d.date;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建Day类类型的数组"><a href="#创建Day类类型的数组" class="headerlink" title="创建Day类类型的数组"></a>创建Day类类型的数组</h2><p><code>Day1[] day=new Day1[n];</code>  </p><p>日期类类型数组DayArrayError.java  </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> chap09;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Scanner</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DayArrayError</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br>        Scanner scanner=<span class="hljs-keyword">new </span><span class="hljs-class title_">Scanner</span>(System.<span class="hljs-property">in</span>);<br>        <span class="hljs-built_in">String</span>[] wd=&#123;<span class="hljs-string">&quot;日&quot;</span>,<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>,<span class="hljs-string">&quot;五&quot;</span>,<span class="hljs-string">&quot;六&quot;</span>&#125;;<br><br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;请输入日期的个数&quot;</span>);<br>        <span class="hljs-type">int</span> n= scanner.<span class="hljs-property">nextInt</span>();<br><br>        Day1[] <span class="hljs-built_in">day</span>=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>[n];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-built_in">day</span>[i]=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2017</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>);<span class="hljs-comment">//为每个类类型变量构造函数并初始化变量，且里面的参数必须全</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            System.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;day[&quot;</span>+i+<span class="hljs-string">&quot;]=&quot;</span>+<span class="hljs-built_in">day</span>[i].<span class="hljs-property">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+<span class="hljs-built_in">day</span>[i].<span class="hljs-property">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+<span class="hljs-built_in">day</span>[i].<span class="hljs-property">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s57.png"></p><p>Day类型的数组元素的初始和赋值可以直接这样写（<strong>太繁杂</strong>）<br>Day[] days &#x3D;{new Day(1900,12,3),<br>            new Day(2000,2,12),<br>            new Day(2010,8,19),<br>            new Day(2030,12,4),};  </p><h3 id="toString-和equalTo-的应用"><a href="#toString-和equalTo-的应用" class="headerlink" title="toString()和equalTo()的应用"></a>toString()和equalTo()的应用</h3><p>DayArrayInit.java</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> chap09;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DayArrayInit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br><br>        <span class="hljs-comment">//Day类中构造方法重载了，Day类型的数组就可以先创建，再设置值了,比较灵活</span><br>        Day1[] <span class="hljs-built_in">day</span>=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">day</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-built_in">day</span>[i]=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; <span class="hljs-built_in">day</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-built_in">day</span>[i].<span class="hljs-property">set</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        &#125;<br><br>        Day1[] days;<br>        days=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>[]&#123;<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>),<br>                    <span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2000</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>),<br>                    <span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2010</span>,<span class="hljs-number">8</span>,<span class="hljs-number">19</span>),<br>                    <span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">2030</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>),&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;days.<span class="hljs-property">length</span>;i++)&#123;<br>            System.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;day[&quot;</span>+i+<span class="hljs-string">&quot;]=&quot;</span>+days[i].<span class="hljs-property">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+days[i].<span class="hljs-property">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+days[i].<span class="hljs-property">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br><br>        <br>        <span class="hljs-comment">//使用复制构造函数，也就是将Day类型的day2的所有字段都复制到Day类型的uu中</span><br>        Day1 day2=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        Day1 uu=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>(day2);<br><br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;uu和day2&quot;</span>+(uu.<span class="hljs-property">equalTo</span>(day2)?<span class="hljs-string">&quot;相等&quot;</span>:<span class="hljs-string">&quot;不相等&quot;</span>));<span class="hljs-comment">//equalTo()函数的应用，随时判断两个Day类型的值是否相等</span><br><br>        <br>        <span class="hljs-comment">//toString函数的应用</span><br>        <span class="hljs-built_in">String</span> f=day2.<span class="hljs-property">toString</span>();<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(f);<br><br>        Day1 td=<span class="hljs-keyword">new </span><span class="hljs-class title_">Day1</span>();<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(td.<span class="hljs-property">toString</span>());<span class="hljs-comment">//toString()可以省略</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：equalTo()函数的应用，随时判断两个Day类型的值是否相等</strong></p><p>toString()是Java程序自带的类，以上代码的sout中的toString()可以实现是因为toString会被默认调用，在”字符串+类类型变量”和”类类型变量+字符串“的运算中，会自动调用toString方法。输出为chap09.Day1@6f496d9f的原因是因为toString()没有被重写。</p><p>运行结果如下：<br><img src="/image/s58.png"></p><h2 id="判断两个日期是否相同"><a href="#判断两个日期是否相同" class="headerlink" title="判断两个日期是否相同"></a>判断两个日期是否相同</h2><p>判断日期是否相同，年月日需要分开比较</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs sas">package chap09;<br><br>import java.util.Scanner;<br><br>public class DayCompare &#123;<br><br>    //作为参数的类类型变量<br>    static boolean isDayCompare(Day1 d1, Day1 d2)&#123;//由于这个方法定义在类Day的外部，所以要加上static（加上static进行声明的方法是类方法）<br>        <span class="hljs-keyword">return</span> d1.get<span class="hljs-meta">Year</span>()==d2.get<span class="hljs-meta">Year</span>() <span class="hljs-variable">&amp;&amp;</span> d1.get<span class="hljs-meta">Month</span>()== d2.get<span class="hljs-meta">Month</span>() <span class="hljs-variable">&amp;&amp;</span> d1.get<span class="hljs-meta">Date</span>()== d2.get<span class="hljs-meta">Date</span>();<br>    &#125;<br><br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br>        Scanner scanner=new Scanner(System.<span class="hljs-keyword">in</span>);<br><br>        int y,m,d;<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入第一个日期&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;年：&quot;</span>);y= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;月：&quot;</span>);m=scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;日：&quot;</span>);d= scanner.next<span class="hljs-meta">Int</span>();<br>        Day1 day1=new Day1(y,m,d);<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入第二个日期&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;年：&quot;</span>);y= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;月：&quot;</span>);m=scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;日：&quot;</span>);d= scanner.next<span class="hljs-meta">Int</span>();<br>        Day1 day2=new Day1(y,m,d);<br><br>        <span class="hljs-keyword">if</span>(isDayCompare(day1,day2))&#123;//若直接用day1==day2来判断，则是判断day1和day2引用目标是否一样<br>            System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;不相等&quot;</span>);<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：当然可以直接使用equalTo()</strong></p><h2 id="类类型引用实例说明"><a href="#类类型引用实例说明" class="headerlink" title="类类型引用实例说明"></a>类类型引用实例说明</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sas">package chap09;<br><br>import java.util.Scanner;<br><br>public class DayTester &#123;<br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br>        Scanner scanner=new Scanner(System.<span class="hljs-keyword">in</span>);<br>        String[] wd=&#123;<span class="hljs-string">&quot;日&quot;</span>,<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>,<span class="hljs-string">&quot;五&quot;</span>,<span class="hljs-string">&quot;六&quot;</span>&#125;;<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入阳历生日。&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;年：&quot;</span>);int y= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;月：&quot;</span>);int m= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;日：&quot;</span>);int d= scanner.next<span class="hljs-meta">Int</span>();<br><br>        Day1 birthday=new Day1(y,m,d);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;birthday=&quot;</span>+birthday);//这个可以实现是因为toString会被默认调用，<br>        // 在<span class="hljs-string">&quot;字符串+类类型变量&quot;</span>和”类类型变量+字符串“的运算中，会自动调用toString方法<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;你的生日&quot;</span>+birthday.get<span class="hljs-meta">Year</span>()+<span class="hljs-string">&quot;年&quot;</span>+birthday.get<span class="hljs-meta">Month</span>()+<span class="hljs-string">&quot;月&quot;</span>+birthday.get<span class="hljs-meta">Date</span>()+<br>                <span class="hljs-string">&quot;日是星期&quot;</span>+wd[birthday.dayOfWeek()]+<span class="hljs-string">&quot;。&quot;</span>);<br><br><br>        Day1 xDay=birthday;//这里没有利用构造函数，说明xDay不是一个新的类类型变量,而是引用了和birthday同样的实例<br>//        xDay.<span class="hljs-keyword">set</span><span class="hljs-meta">Year</span>(2004);<br>//        xDay.<span class="hljs-keyword">set</span><span class="hljs-meta">Month</span>(10);<br>//        xDay.<span class="hljs-keyword">set</span><span class="hljs-meta">Date</span>(18);<br>        xDay.<span class="hljs-keyword">set</span>(2004,10,18);<br><br>        //下方两个输出的内容相同，这正是因为利用了上面的<span class="hljs-keyword">set</span>方法，将引用的实例中的变量重新赋值了，又因为xDay和birthday引用的实例相同，所有输出内容相同<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;你的生日&quot;</span>+birthday.get<span class="hljs-meta">Year</span>()+<span class="hljs-string">&quot;年&quot;</span>+birthday.get<span class="hljs-meta">Month</span>()+<span class="hljs-string">&quot;月&quot;</span>+birthday.get<span class="hljs-meta">Date</span>()+<br>                <span class="hljs-string">&quot;日(&quot;</span>+wd[birthday.dayOfWeek()]+<span class="hljs-string">&quot;)&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;你的生日&quot;</span>+xDay.get<span class="hljs-meta">Year</span>()+<span class="hljs-string">&quot;年&quot;</span>+xDay.get<span class="hljs-meta">Month</span>()+<span class="hljs-string">&quot;月&quot;</span>+xDay.get<span class="hljs-meta">Date</span>()+<br>                <span class="hljs-string">&quot;日(&quot;</span>+wd[xDay.dayOfWeek()]+<span class="hljs-string">&quot;)&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在以上代码中，直接已创建的Day类型的birthday赋给xDay，使得xDay和birthday的引用实例是同一个，而并非是创建一个新的Day类类型；所以后续使用set方法重新赋值之后，输出的结果相同。</strong></p><p>运行结果如下：<br><img src="/image/s59.png"></p><h2 id="获取今天的日期"><a href="#获取今天的日期" class="headerlink" title="获取今天的日期"></a>获取今天的日期</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> chap09;<br><br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.util.GregorianCalendar.*;<br><span class="hljs-comment">//获取今天的日期</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">GetTodayDate</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        GregorianCalendar today=<span class="hljs-keyword">new</span><span class="hljs-type"></span> GregorianCalendar();<br>        System.out.printf(<span class="hljs-string">&quot;今天是%04d年%02d月%02d日&quot;</span>,today.<span class="hljs-keyword">get</span>(YEAR),today.<span class="hljs-keyword">get</span>(MONTH)+<span class="hljs-number">1</span>,today.<span class="hljs-keyword">get</span>(DATE));<span class="hljs-comment">//get(MONTH):0~11</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本人是在4.10才总结的<br><img src="/image/s60.png"></p><p><strong>补充：</strong><br>基本类型数组的创建方式有以下两种：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] c=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] a;   <br><span class="hljs-attribute">a</span>=new int[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br></code></pre></td></tr></table></figure><p>类类型数组的创建方式相似：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Day</span>[] day3=&#123; new Day(<span class="hljs-number">2004</span>,<span class="hljs-number">1</span>,<span class="hljs-number">20</span>),<br>             <span class="hljs-attribute">new</span> Day(<span class="hljs-number">2005</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>),&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Day</span>[] day1;<br>day1=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>(<span class="hljs-number">2004</span>,<span class="hljs-number">1</span>,<span class="hljs-number">20</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>(<span class="hljs-number">2005</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>),&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类的基础知识</title>
    <link href="/2025/03/02/java08/"/>
    <url>/2025/03/02/java08/</url>
    
    <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类表示方法及处理的数据对象的集合的结构，比方法更大一级的控件。</p><p><strong>封装：将字段设为私有，防止来自外部的访问，从而使方法和字段紧密结合在一起的操作</strong></p><p><strong>getter和setter方法统称为访问器：以get开头的方法用于获取、返回字段的值；以set开头的方法用于设置字段的值</strong></p><p><strong>注意：在该类中创建了Day类型的开户日期，存款时间和存款结束时间</strong></p><p><strong>构造函数的重载是为了后续创建类类型变量时new Day()中()内的参数可以有0个、1个、2个…全部，这样比较方便</strong></p><h2 id="银行账户练习"><a href="#银行账户练习" class="headerlink" title="银行账户练习"></a>银行账户练习</h2><p>创建银行账户存储账户的信息，其中包括日期（包括三字段：年 月 日），所以需要先创建日期类。其中包含了复制构造函数的创建</p><p>Day.java：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap08;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Day</span> &#123;<span class="hljs-comment">//原则上类声明时都应该加上public，但规模较小的用完即舍弃的类除外，加上public表示该类可以在任何地方使用，没有则表示只能在该包内使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> year=<span class="hljs-number">1</span>;<span class="hljs-comment">//创建字段时，直接初始化，修改比较简单</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-built_in">int</span> month=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> date=<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//构造函数也可重载</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(year==<span class="hljs-number">0</span>) year=<span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">this</span>.year=year;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>(year);<br>        <span class="hljs-keyword">this</span>.month=month;&#125;<span class="hljs-comment">//利用this()来调用该类中的其他构造函数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year, <span class="hljs-built_in">int</span> month, <span class="hljs-built_in">int</span> date</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>(year,month);<br>        <span class="hljs-keyword">this</span>.date=date;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Day</span>(<span class="hljs-params">Day d</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>(d.year,d.month,d.date);<br>        &#125;<span class="hljs-comment">//复制构造函数</span><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getYear</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setYear</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getMonth</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMonth</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> month</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.month = month;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getDate</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> date</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> year,<span class="hljs-built_in">int</span> month,<span class="hljs-built_in">int</span> date</span>)</span>&#123;<br>        <span class="hljs-keyword">this</span>.year=year;<br>        <span class="hljs-keyword">this</span>.date=date;<br>        <span class="hljs-keyword">this</span>.month=month;<br>    &#125;<br><br>    <span class="hljs-comment">//根据日期判断星期</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">dayOfWeek</span>()</span>&#123;<br>        <span class="hljs-built_in">int</span> y=year;<br>        <span class="hljs-built_in">int</span> m=month;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>||m==<span class="hljs-number">2</span>)&#123;<br>            y--;<br>            m+=<span class="hljs-number">12</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (y+y/<span class="hljs-number">4</span>-y/<span class="hljs-number">100</span>+y/<span class="hljs-number">400</span>+(<span class="hljs-number">13</span>*m+<span class="hljs-number">8</span>)/<span class="hljs-number">5</span>+date)%<span class="hljs-number">7</span>;<span class="hljs-comment">//蔡勒公式，只能计算1582年10月15日之后的日期所对应的星期</span><br>        <span class="hljs-comment">//0代表星期日，1代表星期一，以此类推</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> boolean <span class="hljs-title">equalTo</span>(<span class="hljs-params">Day d</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> year==d.year &amp;&amp; month==d.month &amp;&amp; date==d.date;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span>&#123;<br>        String[] wd=&#123;<span class="hljs-string">&quot;日&quot;</span>,<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>,<span class="hljs-string">&quot;五&quot;</span>,<span class="hljs-string">&quot;六&quot;</span>&#125;;<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%04d年%02d月%02d日(%s)&quot;</span>,year,month,date,wd[dayOfWeek()]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：构造函数也可重载</strong></p><p>接着创建账户类Account，存储账户信息，其中包含了Day类，称为has-A组合</p><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h3><p>只要是Day类型的字段，它对应的get方法都必须返回一个新建的Day类类型，防止Day类的字段被修改<br><strong>重点：观察以下代码中复制构造函数的用法</strong><br>Account.java：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package chap08;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<span class="hljs-comment">//类声明：类型的声明，由字段组成。</span><br><br>    <span class="hljs-comment">//字段</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> name;<span class="hljs-comment">//姓名，加上private表示私有访问，私有访问的字段对类的外部是隐藏的，也就是无法从类的外部进行访问</span><br>    <span class="hljs-comment">//将数据对外隐藏起来，防止非法访问操作称为数据隐藏。原则上所有的字段都应该设为私有</span><br>    <span class="hljs-comment">//未指定private的字段都是默认访问，对包内公开，包外私有</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> no;<span class="hljs-comment">//账号</span><br>    <span class="hljs-keyword">private</span> long balance;<span class="hljs-comment">//余额</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> openDate;<span class="hljs-comment">//开户日期</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> <span class="hljs-keyword">from</span>;<span class="hljs-comment">//存款时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Day</span> to;<span class="hljs-comment">//存款结束时间</span><br><br>    <span class="hljs-comment">//构造函数，是在创建实例是所调用的，是为了正确初始化实例。像最开始的对实例赋值可以成功，实际上是程序自动构建了一个构造函数Account()&#123;&#125;</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> no, long balance,<span class="hljs-title class_">Day</span> openDate,<span class="hljs-title class_">Day</span> <span class="hljs-keyword">from</span>,<span class="hljs-title class_">Day</span> to) &#123;<span class="hljs-comment">//构造函数：名称与类相同且没有返回值</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">no</span>=no;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span>=balance;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">openDate</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(openDate);/利用复制构造函数将一个类类型变量的所有字段复制到另一个变量的对应的所有字段中，而不是单单复制实例<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">from</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(<span class="hljs-keyword">from</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(to);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Account</span>(<span class="hljs-title class_">String</span> name, <span class="hljs-title class_">String</span> no, long balance) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">no</span>=no;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">balance</span>=balance;<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//确认账户名</span><br>    <span class="hljs-comment">//以下方法未加static，是由各个实例分别创建的，属于该实例。（前面讲到变量前加static，是为了让其在整个类中通用）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">//实例方法。字段和方法统称为成员</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-comment">//确认账号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getNo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-comment">//确认可用余额</span><br>    <span class="hljs-keyword">public</span> long <span class="hljs-title function_">getBalance</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getOpenDate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(openDate);<span class="hljs-comment">//不要返回引用类型的字段值，因为外部能够通过该引用值间接改写值，而是要返回利用复制构造函数构造的Day的新实例，</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getFrom</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(<span class="hljs-keyword">from</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Day</span> <span class="hljs-title function_">getTo</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Day</span>(to);<br>    &#125;<br><br>    <span class="hljs-comment">//存钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">deposit</span>(<span class="hljs-params">long k</span>)&#123;<br>        balance+=k;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">withdraw</span>(<span class="hljs-params">long k</span>)&#123;<br>        balance-=k;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> openDate.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ openDate.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+ openDate.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString2</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//当它的子类要重写该方法时，必须加上public</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span><br>                + <span class="hljs-keyword">from</span>.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日到&quot;</span>+ to.<span class="hljs-title function_">getYear</span>()+<span class="hljs-string">&quot;年&quot;</span>+ to.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-string">&quot;月&quot;</span>+to.<span class="hljs-title function_">getDate</span>()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：AccountTester.java<br><strong>类类型与前方提到的数组类型一样是引用类型的一种，类的实例和数组主体统称为对象</strong>  </p><p>在其中会创建类的实例：Account adachi &#x3D; new Account():使用new创建的类类型的主体称为实例，创建实例的操作称为实例化；adachi是用来引用主体的类类型变量</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sas">package chap08;<br><br>public class AccountTester &#123;<br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br><br>        //下方是创建实例，这时会调用Account类的构造函数。其中还调用了Day类的构造函数<br>        Account adachi=new Account(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,12000,new <span class="hljs-meta">Day</span>(2004,2,3),new <span class="hljs-meta">Day</span>(2000,2,2),new <span class="hljs-meta">Day</span>(2010,2,3));//张三的账户；<br>        <br>        Account nakata=new Account(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,18000,new <span class="hljs-meta">Day</span>(2004,2,6),new <span class="hljs-meta">Day</span>(2009,1,1),new <span class="hljs-meta">Day</span>(2020,1,2));//李四的账户<br><br>        adachi.deposit(200);<br>        nakata.withdraw(3000);<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;张三的账户：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;姓名&quot;</span>+adachi.getName());//调用实例方法，采用了成员访问运算符<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;账户名&quot;</span>+adachi.getNo());//adachi.getNo()会向对象（实例）adachi发送消息”请告诉我账号是多少“，这样adachi就会自主决定找到账号，并做出应答<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;余额&quot;</span>+adachi.getBalance());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;开户日期&quot;</span>+adachi.getOpen<span class="hljs-meta">Date</span>().toString());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;存款时间&quot;</span>+adachi.toString2());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>();<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;李四的账户：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;姓名&quot;</span>+nakata.getName());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;账户名&quot;</span>+nakata.getNo());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;余额&quot;</span>+nakata.getBalance());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;开户日期&quot;</span>+nakata.getOpen<span class="hljs-meta">Date</span>().toString());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;存款时间&quot;</span>+nakata.toString2());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：测试类包含main方法（程序的入口）</strong><br>运行结果如下：<br><img src="/image/s54.png"></p><p><strong>注意：Account类中将字段设置为private，其他外部的类无法进行访问修改，这时测试类中的下面这些代码则无法使用</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//adachi.name等都是实例变量，如若不进行赋值，则会自动初始化，String类型初始化为<span class="hljs-keyword">null</span>，Long型初始化为<span class="hljs-number">0</span><br>adachi.name=&quot;张三&quot;;//访问其中某个字段采用x.y成员访问运算符（点运算符、（由于是特别指定字段，又称为字段访问运算符））&#123;访问x引用的实例中的成员y&#125;<br>adachi.<span class="hljs-keyword">no</span>=&quot;zhangsan&quot;;<br>adachi.balance=<span class="hljs-number">12000</span>;<br><br>nakata.name=&quot;李四&quot;;<br>nakata.<span class="hljs-keyword">no</span>=&quot;lisi&quot;;<br>nakata.balance=<span class="hljs-number">20000</span>;<br><br>adachi.balance-=<span class="hljs-number">200</span>;//张三取了<span class="hljs-number">200</span><br>nakata.balance+=<span class="hljs-number">2000</span>;//李四存了<span class="hljs-number">2000</span><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;张三的账户：&quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;姓名&quot;+adachi.name);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;账户名&quot;+adachi.<span class="hljs-keyword">no</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;余额&quot;+adachi.balance);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;李四的账户：&quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;姓名&quot;+nakata.name);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;账户名&quot;+nakata.<span class="hljs-keyword">no</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;余额&quot;+nakata.balance);<br></code></pre></td></tr></table></figure><h2 id="汽车练习"><a href="#汽车练习" class="headerlink" title="汽车练习"></a>汽车练习</h2><p>在汽车类同样用到了Day类</p><h3 id="继承用法"><a href="#继承用法" class="headerlink" title="继承用法"></a>继承用法</h3><p>Car类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap08;<br><span class="hljs-comment">//Car类中包含Day类，称为has-A组合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> width;<span class="hljs-comment">//访问限制为protected，以便子类可以通过super访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> height;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> length;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> x;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> y;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> fuel;<br><br>    <span class="hljs-comment">//类类型的字段</span><br>    <span class="hljs-keyword">private</span> Day purchaseDay;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, <span class="hljs-type">int</span> length, <span class="hljs-type">double</span> fuel, Day purchaseDay)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<span class="hljs-comment">//this.name是类的字段</span><br>        <span class="hljs-keyword">this</span>.width = width;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.length = length;<br>        <span class="hljs-keyword">this</span>.fuel = fuel;<br>        x=y=<span class="hljs-number">0.0</span>;<br>        <span class="hljs-keyword">this</span>.purchaseDay=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>(purchaseDay);<span class="hljs-comment">//利用复制构造函数将一个类类型变量的所有字段复制到另一个变量的对应的所有字段中，而不是单单复制实例</span><br>    &#125;<br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title">getFuel</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fuel;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Day <span class="hljs-title">getPurchaseDay</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Day</span>(purchaseDay);<span class="hljs-comment">//不要返回引用类型的字段值，因为外部能够通过该引用值间接改写值</span><br>    &#125;<br><br>    <span class="hljs-comment">//输出车的信息</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">putSpex</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;名称：&quot;</span>+name);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;车宽：&quot;</span>+width+<span class="hljs-string">&quot;mm&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;车高：&quot;</span>+height+<span class="hljs-string">&quot;mm&quot;</span>);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;车长：&quot;</span>+length+<span class="hljs-string">&quot;mm&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//汽车前进的距离及计算耗油量</span><br>    <span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">double</span> dx,<span class="hljs-type">double</span> dy)</span></span>&#123;<br>        <span class="hljs-type">double</span> dist=Math.<span class="hljs-built_in">sqrt</span>(dx*dx+dy*dy);<br>        <span class="hljs-keyword">if</span>(dist&gt;fuel)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            fuel-=dist;<br>            x+=dx;<br>            y+=dy;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建CarExtend子类继承自Car类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CarExtend</span> extends Car&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> distence=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">CarExtend</span>(<span class="hljs-type">String</span> name, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, <span class="hljs-type">int</span> length, <span class="hljs-type">double</span> fuel, Day purchaseDay,<span class="hljs-type">int</span> distence)&#123;<br>        <span class="hljs-built_in">super</span>(name,width,height,length,fuel,purchaseDay);<span class="hljs-comment">//父类的字段在构造函数中访问需要用到super</span><br>        <span class="hljs-keyword">this</span>.distence=distence;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getDistence</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> distence;<br>    &#125;<br><br>    <span class="hljs-comment">//判断两辆车的行驶距离是否相等</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title">fuelCompare</span><span class="hljs-params">(<span class="hljs-type">int</span> distence1,<span class="hljs-type">int</span> distence2)</span></span>&#123;<br>        super.width=distence1;<span class="hljs-comment">//父类无法调用子类新创建的变量，所以用width（车宽）代替（不用特别在意功能，只是简单介绍这个点😂）</span><br>        <span class="hljs-keyword">this</span>.distence=distence2;<br>        <span class="hljs-keyword">if</span>(distence1==distence2)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：getPurchaseDay()方法中返回的是一个新建的Day类类型变量，而不是直接返回引用类型的字段值（也就是return purchaseDay），因为外部能够通过该引用值间接改写值</strong><br><strong>注意：父类的字段（访问类型不为private，可以为protected）在子类的构造函数中访问需要用到super，而父类无法调用子类新创建的变量</strong></p><p>测试类CarTest1.java</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package chap08;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> CarTester1 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Day d=<span class="hljs-built_in">new</span> Day(<span class="hljs-number">2010</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>);<br>        Car vitz=<span class="hljs-built_in">new</span> Car(&quot;威姿&quot;,<span class="hljs-number">1660</span>,<span class="hljs-number">1500</span>,<span class="hljs-number">3640</span>,<span class="hljs-number">40.0</span>, d);//如若d这个变量除了该作用在后续有用处，<br>        // 则可以像上句代码所示专门为其导入一个类类型变量，如若不需要则直接采用<span class="hljs-built_in">new</span>来创建实例传递参数（CarTester2中）<br>        CarExtend march=<span class="hljs-built_in">new</span> CarExtend(&quot;特斯拉&quot;,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-built_in">new</span> Day(<span class="hljs-number">2000</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<span class="hljs-number">200</span>);<br><br>        Day p=vitz.getPurchaseDay();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;爱车的购买日期：&quot;+p);<br>        p.<span class="hljs-keyword">set</span>(<span class="hljs-number">1900</span>,<span class="hljs-number">12</span>,<span class="hljs-number">31</span>);<br><br>        Day q=vitz.getPurchaseDay();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;爱车的购买日期：&quot;+q);<br><br>        vitz.putSpex();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>        march.putSpex();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;特斯拉的行驶距离为&quot;+ march.getDistence());<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;这俩辆车的行驶距离&quot;+(march.fuelCompare(vitz.width, march.getDistence())?&quot;相等&quot;:&quot;不相等&quot;));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s55.png"><br>测试类CarTest2.java</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap08;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> CarTester2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入车的数据：&quot;</span>);<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;名称：&quot;</span>);String name= scanner.nextLine();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;宽度：&quot;</span>);<span class="hljs-keyword">int</span> width= scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;高度：&quot;</span>);<span class="hljs-keyword">int</span> height= scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;长度：&quot;</span>);<span class="hljs-keyword">int</span> length= scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;燃料数量：&quot;</span>);<span class="hljs-keyword">double</span> fuel= scanner.nextDouble();<br><br>        Car myCar=<span class="hljs-keyword">new</span> Car(name,width,height,length,fuel,<span class="hljs-keyword">new</span> Day(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>));<span class="hljs-comment">//使用new创建Day类型实例</span><br>        <span class="hljs-comment">//创建的实例的引用被传递给了构造函数（使用new创建的实例可以不用再起名，直接传递参数即可）</span><br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;购买日期：&quot;</span>+myCar.getPurchaseDay().toString()+<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//这里使用的getPurchaseDay()方法时Car类中的复制构造函数方法，</span><br>        <span class="hljs-comment">// 所以最终Car类的purchaseDay字段引用的是复制构造函数创建的一个日期副本,toString()方法可以省略</span><br><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;当前位置：(&quot;</span>+myCar.getX()+<span class="hljs-string">&quot;,&quot;</span>+myCar.getY()+<span class="hljs-string">&quot;)·剩余燃料&quot;</span>+myCar.getFuel());<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;是否移动[0...No/1...Yes]:&quot;</span>);<br>            <span class="hljs-keyword">if</span>(scanner.nextInt()==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;x方向的移动距离：&quot;</span>);<br>            <span class="hljs-keyword">double</span> dx=scanner.nextDouble();<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;y方向的移动距离：&quot;</span>);<br>            <span class="hljs-keyword">double</span> dy= scanner.nextDouble();<br><br>            <span class="hljs-keyword">if</span>(!myCar.move(dx,dy))<br>                System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;燃料不足！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s56.png"></p><h2 id="类（实例）变量和类（实例）方法"><a href="#类（实例）变量和类（实例）方法" class="headerlink" title="类（实例）变量和类（实例）方法"></a>类（实例）变量和类（实例）方法</h2><ul><li>类变量(静态变量):它是所有实例共享的数据，与实例无关，且只有一个，要加上static，不加即为实例变量</li><li>实例初始化器{…}：每次创建实例前都会执行实例初始化器其中不能存在return语句，可以存在this语句和super语句；</li><li>类初始化器static{…}，只执行一次，其中不能存在return语句、this语句和super语句。<br>修改Account.java</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap10;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> &#123;<br>    <span class="hljs-comment">//counter表示当前赋到了哪一个标识编号,但是不可以用其来保存类类型的全部实例的个数，因为构建的实例可能会在程序中被销毁</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> counter=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String no;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">long</span> balance;<br><br>    <span class="hljs-comment">//未加static的id指各个实例的标识编号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> id;<br>    <span class="hljs-keyword">private</span> Day2 openDate;<br>    <span class="hljs-keyword">private</span> Day2 <span class="hljs-keyword">from</span>;<br>    <span class="hljs-keyword">private</span> Day2 to;<br><br>    <span class="hljs-comment">//每次创建实例前都会执行实例初始化器；如加上static，则只执行一次类初始化器</span><br>    &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;感谢您开设明解账户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account2</span>(<span class="hljs-params">String name, String no, <span class="hljs-built_in">long</span> balance,Day2 openDate,Day2 <span class="hljs-keyword">from</span>,Day2 to</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.name=name;<br>        <span class="hljs-keyword">this</span>.no=no;<br>        <span class="hljs-keyword">this</span>.balance=balance;<br>        <span class="hljs-keyword">this</span>.id=++counter;<br>        <span class="hljs-keyword">this</span>.openDate=<span class="hljs-keyword">new</span> Day2(openDate);<br>        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">from</span>=<span class="hljs-keyword">new</span> Day2(<span class="hljs-keyword">from</span>);<br>        <span class="hljs-keyword">this</span>.to=<span class="hljs-keyword">new</span> Day2(to);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>()</span> &#123;<span class="hljs-comment">//实例方法。字段和方法统称为成员</span><br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getNo</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> <span class="hljs-title">getBalance</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getId</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Day2 <span class="hljs-title">getOpenDate</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Day2(openDate);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Day2 <span class="hljs-title">getFrom</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Day2(<span class="hljs-keyword">from</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Day2 <span class="hljs-title">getTo</span>()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Day2(to);<br>    &#125;<br><br>    <span class="hljs-comment">//存钱</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deposit</span>(<span class="hljs-params"><span class="hljs-built_in">long</span> k</span>)</span>&#123;<br>        balance+=k;<br>    &#125;<br><br>    <span class="hljs-comment">//取钱</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span>(<span class="hljs-params"><span class="hljs-built_in">long</span> k</span>)</span>&#123;<br>        balance-=k;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> openDate.getYear()+<span class="hljs-string">&quot;年&quot;</span>+ openDate.getMonth()+<span class="hljs-string">&quot;月&quot;</span>+ openDate.getDate()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString2</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">from</span>.getYear()+<span class="hljs-string">&quot;年&quot;</span>+ <span class="hljs-keyword">from</span>.getMonth()+<span class="hljs-string">&quot;月&quot;</span><br>                + <span class="hljs-keyword">from</span>.getDate()+<span class="hljs-string">&quot;日到&quot;</span>+ to.getYear()+<span class="hljs-string">&quot;年&quot;</span>+ to.getMonth()+<span class="hljs-string">&quot;月&quot;</span>+to.getDate()+<span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>修改测试类：AccountTester.java</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap10;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AccountTester</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        Account2 adachi=<span class="hljs-keyword">new</span> Account2(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">12000</span>,<span class="hljs-keyword">new</span> Day2(<span class="hljs-number">2004</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<span class="hljs-keyword">new</span> Day2(<span class="hljs-number">2000</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),<span class="hljs-keyword">new</span> Day2(<span class="hljs-number">2010</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//张三的账户；adachi是用来引用主体的类类型变量</span><br><br>        Account2 nakata=<span class="hljs-keyword">new</span> Account2(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-number">18000</span>,<span class="hljs-keyword">new</span> Day2(<span class="hljs-number">2004</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>),<span class="hljs-keyword">new</span> Day2(<span class="hljs-number">2009</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-keyword">new</span> Day2(<span class="hljs-number">2020</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<span class="hljs-comment">//李四的账户</span><br><br>        adachi.deposit(<span class="hljs-number">200</span>);<br>        nakata.withdraw(<span class="hljs-number">3000</span>);<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;张三的账户：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;姓名&quot;</span>+adachi.getName());<span class="hljs-comment">//调用实例方法，采用了成员访问运算符</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;账户名&quot;</span>+adachi.getNo());<span class="hljs-comment">//adachi.getNo()会向对象（实例）adachi发送消息”请告诉我账号是多少“，这样adachi就会自主决定找到账号，并做出应答</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;余额&quot;</span>+adachi.getBalance());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;编号&quot;</span>+adachi.getId());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;开户日期&quot;</span>+adachi.getOpenDate().toString());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存款时间&quot;</span>+adachi.toString2());<br>        System.<span class="hljs-keyword">out</span>.println();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;李四的账户：&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;姓名&quot;</span>+nakata.getName());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;账户名&quot;</span>+nakata.getNo());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;余额&quot;</span>+nakata.getBalance());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;编号&quot;</span>+nakata.getId());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;开户日期&quot;</span>+nakata.getOpenDate().toString());<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;存款时间&quot;</span>+nakata.toString2());<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Account2.counter=&quot;</span>+Account2.counter);<span class="hljs-comment">//从类外部访问：因为无private，类变量counter的访问——&gt;类名.counter</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s61.png"></p><p>如上图所示：Account2.counter&#x3D;2，证明当前赋到了第二个标识编号<br><strong>注意：从Account类外部访问counter，因为无private，类变量counter的访问——&gt;<code>类名.counter</code></strong></p><p><strong>注意：若将Accocunt类中的实例初始化器加上static转变为类初始化器，最后的结果只出现一次“感谢您开设明解账户”</strong></p><h3 id="实例方法和类方法的调用"><a href="#实例方法和类方法的调用" class="headerlink" title="实例方法和类方法的调用"></a>实例方法和类方法的调用</h3><ul><li>Math类调用方法（不是实例方法）[类名.静态方法名]：Math.sqrt()、Math.max(x,y)、Math.min(x,y)、 返回x的绝对值Math.abs(x)</li><li>类方法能访问类变量和类方法，其他（实例变量、实例方法）不可以访问类方法</li><li>实例方法可以调用类方法、类变量、实例变量和实例方法；<br>修改Day.java</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package chap10;<br><br><span class="hljs-keyword">import</span> java.util.GregorianCalendar;<br><br><span class="hljs-keyword">import</span> static java.util.Calendar.*;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Day2 &#123;<br><br>    private static <span class="hljs-type">int</span> counter;<br>    private <span class="hljs-type">int</span> year;<br>    private  <span class="hljs-type">int</span> month;<br>    private <span class="hljs-type">int</span> <span class="hljs-type">date</span>;<br>    private <span class="hljs-type">int</span> id;<br><br>    //类方法，该类无法访问实例变量<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">boolean</span> isLeap(<span class="hljs-type">int</span> y)&#123;<br>        <span class="hljs-keyword">return</span> y%<span class="hljs-number">4</span>==<span class="hljs-number">0</span> &amp;&amp; y%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span> &amp;&amp; y%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;<br>    &#125;<br><br>    &#123;//实例初始化器（非静态初始化器），其中不能有<span class="hljs-keyword">return</span>语句，但可以存在this语句和super语句<br>        GregorianCalendar today=<span class="hljs-built_in">new</span> GregorianCalendar();<br>        this.year= today.<span class="hljs-keyword">get</span>(YEAR);//this不可以用在static（也就是类初始化器）下<br>        this.month=today.<span class="hljs-keyword">get</span>(MONTH)+<span class="hljs-number">1</span>;//月份是从<span class="hljs-number">0</span>开始的，所以需要+<span class="hljs-number">1</span><br>        this.date=today.<span class="hljs-keyword">get</span>(<span class="hljs-type">DATE</span>);<br>    &#125;<br><br>    //构造函数也可重载<br>    <span class="hljs-built_in">public</span> Day2()&#123;<br><br>    &#125;<br>    <span class="hljs-built_in">public</span> Day2(<span class="hljs-type">int</span> year) &#123;<span class="hljs-keyword">if</span>(year==<span class="hljs-number">0</span>) year=<span class="hljs-number">1</span>; this.year=year;&#125;<br>    <span class="hljs-built_in">public</span> Day2(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month)&#123;this(year);<span class="hljs-keyword">if</span>(month&gt;<span class="hljs-number">12</span>) month=<span class="hljs-number">12</span>;this.month=month;&#125;//利用this()来调用该类中的其他构造函数<br>    <br>    <span class="hljs-built_in">public</span> Day2(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> <span class="hljs-type">date</span>)&#123;<br>        this(year,month);<br>        //使得日期数字符合实际<br>        <span class="hljs-keyword">if</span>(month==<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">29</span>) <span class="hljs-type">date</span>=<span class="hljs-number">29</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">3</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">4</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">30</span>) <span class="hljs-type">date</span>=<span class="hljs-number">30</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">5</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">6</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">30</span>) <span class="hljs-type">date</span>=<span class="hljs-number">30</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">7</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">8</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">9</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">30</span>) <span class="hljs-type">date</span>=<span class="hljs-number">30</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">10</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">11</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">30</span>) <span class="hljs-type">date</span>=<span class="hljs-number">30</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(month==<span class="hljs-number">12</span> &amp;&amp; <span class="hljs-type">date</span>&gt;<span class="hljs-number">31</span>) <span class="hljs-type">date</span>=<span class="hljs-number">31</span>;<br>        this.date=<span class="hljs-type">date</span>;&#125;<br>    <span class="hljs-built_in">public</span> Day2(Day2 d)&#123;this(d.year,d.month,d.date);<br>        &#125;//复制构造函数<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getYear() &#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setYear(<span class="hljs-type">int</span> year) &#123;<br>        this.year = year;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getMonth() &#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setMonth(<span class="hljs-type">int</span> month) &#123;<br>        this.month = month;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getDate() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">date</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setDate(<span class="hljs-type">int</span> <span class="hljs-type">date</span>) &#123;<br>        this.date = <span class="hljs-type">date</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">set</span>(<span class="hljs-type">int</span> year,<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> <span class="hljs-type">date</span>)&#123;<br>        this.year=year;<br>        this.date=<span class="hljs-type">date</span>;<br>        this.month=month;<br>    &#125;<br><br>    //实例方法可以调用类方法（和类变量、实例变量、实例方法）；而类方法能访问类变量和类方法，其他不可以访问<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> isLeap()&#123;<br>        <span class="hljs-keyword">return</span> isLeap(year);<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> getId()&#123;<br>        <span class="hljs-keyword">return</span> id=++counter;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> dayOfWeek()&#123;<br>        <span class="hljs-type">int</span> y=year;<br>        <span class="hljs-type">int</span> m=month;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>||m==<span class="hljs-number">2</span>)&#123;<br>            y<span class="hljs-comment">--;</span><br>            m+=<span class="hljs-number">12</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (y+y/<span class="hljs-number">4</span>-y/<span class="hljs-number">100</span>+y/<span class="hljs-number">400</span>+(<span class="hljs-number">13</span>*m+<span class="hljs-number">8</span>)/<span class="hljs-number">5</span>+<span class="hljs-type">date</span>)%<span class="hljs-number">7</span>;//蔡勒公式，只能计算<span class="hljs-number">1582</span>年<span class="hljs-number">10</span>月<span class="hljs-number">15</span>日之后的日期所对应的星期<br>        //<span class="hljs-number">0</span>代表星期日，<span class="hljs-number">1</span>代表星期一，以此类推<br>    &#125;<br><br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> equalTo(Day2 d)&#123;<br>        <span class="hljs-keyword">return</span> year==d.year &amp;&amp; month==d.month &amp;&amp; <span class="hljs-type">date</span>==d.date;<br>    &#125;<br><br>    <span class="hljs-built_in">public</span> String toString()&#123;<br>        String[] wd=&#123;&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;&#125;;<br>        <span class="hljs-keyword">return</span> String.format(&quot;%04d年%02d月%02d日(%s)&quot;,year,month,<span class="hljs-type">date</span>,wd[dayOfWeek()]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：DayTest.java</p><ul><li>实例方法的调用： 类类型变量名.实例方法名</li><li>类方法的调用： 类名.类方法名</li></ul><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sas">package chap10;<br><br>import java.util.Scanner;<br><br>public class DayTest &#123;<br><br>    public static void mai<span class="hljs-meta">n</span>(String[] args) &#123;<br>        Scanner scanner=new Scanner(System.<span class="hljs-keyword">in</span>);<br><br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;年：&quot;</span>);<br>        int y= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;月：&quot;</span>);<br>        int m= scanner.next<span class="hljs-meta">Int</span>();<br>        System.<span class="hljs-keyword">out</span>.pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;日：&quot;</span>);<br>        int d= scanner.next<span class="hljs-meta">Int</span>();<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;该年份&quot;</span>+(Day2.isLeap(y)?<span class="hljs-string">&quot;是&quot;</span>:<span class="hljs-string">&quot;不是&quot;</span>+<span class="hljs-string">&quot;闰年&quot;</span>));//类方法的调用： 类名.类方法名<br><br>        Day2 day=new Day2(y,m,d);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;该年份&quot;</span>+(day.isLeap()?<span class="hljs-string">&quot;是&quot;</span>:<span class="hljs-string">&quot;不是&quot;</span>)+<span class="hljs-string">&quot;闰年&quot;</span>);//实例方法的调用： 类类型变量名.实例方法名<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;day的日期是&quot;</span>+day.get<span class="hljs-meta">Year</span>()+<span class="hljs-string">&quot;年&quot;</span>+day.get<span class="hljs-meta">Month</span>()+<span class="hljs-string">&quot;月&quot;</span>+day.get<span class="hljs-meta">Date</span>()+<span class="hljs-string">&quot;日&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;day的编号是：&quot;</span>+day.getId());<br>        Day2 day2=new Day2();<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;day2的日期是&quot;</span>+day2.get<span class="hljs-meta">Year</span>()+<span class="hljs-string">&quot;年&quot;</span>+day2.get<span class="hljs-meta">Month</span>()+<span class="hljs-string">&quot;月&quot;</span>+day2.get<span class="hljs-meta">Date</span>()+<span class="hljs-string">&quot;日&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;day的编号是：&quot;</span>+day2.getId());<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>();<br><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s62.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java方法</title>
    <link href="/2025/03/01/java07/"/>
    <url>/2025/03/01/java07/</url>
    
    <content type="html"><![CDATA[<h1 id="类作用域（字段）和块作用域（局部变量）"><a href="#类作用域（字段）和块作用域（局部变量）" class="headerlink" title="类作用域（字段）和块作用域（局部变量）"></a>类作用域（字段）和块作用域（局部变量）</h1><ul><li>类作用域：在方法外部声明的变量称为字段，该字段在方法内外(也就是整个类中)都可以使用；注意要加上static。</li><li>块作用域：在程序块{}和for方法中的变量称为在块作用域中的局部变量，只在程序块和for中使用。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr2</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> x=<span class="hljs-number">700</span>;<span class="hljs-comment">//类作用域</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br><br>        <span class="hljs-built_in">int</span> x=<span class="hljs-number">300</span>;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Expr2.x=&quot;</span>+Expr2.x);<span class="hljs-comment">//类名+字段名表示类作用域的字段</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类名+字段名表示类作用域的字段</strong><br>运行结果如下：<br><img src="/image/s51.png"></p><h2 id="心算游戏"><a href="#心算游戏" class="headerlink" title="心算游戏"></a>心算游戏</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap07;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">expr2</span> &#123;<br>    <span class="hljs-type">static</span> Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>    <span class="hljs-comment">//不接受参数的方法</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title">conFirm</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-type">int</span> cont;<br><br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;再来一次? 1——yes 0——no&quot;</span>);<br>            cont = scanner.<span class="hljs-built_in">nextInt</span>();<br>        &#125;<span class="hljs-keyword">while</span>(cont!=<span class="hljs-number">0</span> &amp;&amp; cont!=<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> cont==<span class="hljs-number">1</span>;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <br>        Random random=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Random</span>();<br>        <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-type">int</span> a=random.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">900</span>)<span class="hljs-number">+100</span>;<span class="hljs-comment">//随机生成三位数</span><br>        <span class="hljs-type">int</span> b=random.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">900</span>)<span class="hljs-number">+100</span>;<br>        <span class="hljs-type">int</span> c=random.<span class="hljs-built_in">nextInt</span>(<span class="hljs-number">900</span>)<span class="hljs-number">+100</span>;<br><br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            System.out.<span class="hljs-built_in">println</span>(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;+&quot;</span> + c + <span class="hljs-string">&quot;=&quot;</span>);<br>            <span class="hljs-type">int</span> result = scanner.<span class="hljs-built_in">nextInt</span>();<br>            <span class="hljs-keyword">if</span> (result == a + b + c)<br>                <span class="hljs-keyword">break</span>;<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;回答错误&quot;</span>);<br>        &#125;<br>        &#125;<span class="hljs-keyword">while</span>(<span class="hljs-built_in">conFirm</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法和程序块中都用到输入，则Scanner要加static</strong><br>运行结果如下：<br><img src="/image/s52.png"></p><h1 id="操作数组的方法"><a href="#操作数组的方法" class="headerlink" title="操作数组的方法"></a>操作数组的方法</h1><p>idx指索引</p><h2 id="寻找数组中最大的值"><a href="#寻找数组中最大的值" class="headerlink" title="寻找数组中最大的值"></a>寻找数组中最大的值</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">findmax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a)</span></span>&#123;<br>    <span class="hljs-type">int</span> max=a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;a.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;max)&#123;<br>            max=a[i];<br>        &#125;<br>    &#125;<span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">key</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span>(<span class="hljs-type">int</span>[] a)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-built_in">key</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-comment">//起初我是想在这里加个else...break；但是这样做的后果是当循环时判断第一个数时，不符合if条件的话就会立马跳出循环</span><br>        <span class="hljs-comment">//不会再判断其他的值</span><br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<span class="hljs-comment">//如果循环结束之后仍没有符合if中条件的值，那么就会结束循环执行这句；所以不用在for中执行break</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="倒序排列"><a href="#倒序排列" class="headerlink" title="倒序排列"></a>倒序排列</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">static void change(int[] a)&#123;<br>    for(int i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;a.length/2;i++)&#123;</span><br>        int t<span class="hljs-operator">=</span>a[i]<span class="hljs-comment">;</span><br>        a[i]<span class="hljs-operator">=</span>a[a.length-i-<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>        a[a.length-i-<span class="hljs-number">1</span>]<span class="hljs-operator">=</span>t<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除索引对应的值-最后的值不变以保证长度不变"><a href="#删除索引对应的值-最后的值不变以保证长度不变" class="headerlink" title="删除索引对应的值(最后的值不变以保证长度不变)"></a>删除索引对应的值(最后的值不变以保证长度不变)</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static <span class="hljs-type">void</span> aryRmv(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> idx)&#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i==idx)&#123;<br>                <span class="hljs-comment">//int t=a[idx];</span><br>                <span class="hljs-type">int</span> s=a[a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=idx;j&lt;a.<span class="hljs-built_in">length</span>;j++)&#123;<br>                    <span class="hljs-keyword">if</span>((j+<span class="hljs-number">1</span>)!=a.<span class="hljs-built_in">length</span>)&#123;<br>                        a[j]=a[j+<span class="hljs-number">1</span>];<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        a[a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>]=s;<br>                    &#125;<br><br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="插入一个值到数组中-长度不变"><a href="#插入一个值到数组中-长度不变" class="headerlink" title="插入一个值到数组中(长度不变)"></a>插入一个值到数组中(长度不变)</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">aryIns</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> idx, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">// 边界检查</span><br>    <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= a.length) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">IllegalArgumentException</span>(<span class="hljs-string">&quot;Index out of bounds&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 从数组末尾开始，将每个元素向后移动一位，直到 idx 位置</span><br>    <span class="hljs-comment">//我一开始总想着从前往后，所以导致总是无法写出合适的for循环</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.length - <span class="hljs-number">1</span>; i &gt; idx; i--) &#123;<br>        a[i] = a[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 在 idx 位置插入新元素 x</span><br>    a[idx] = x;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="判断两个数组的值是否相等"><a href="#判断两个数组的值是否相等" class="headerlink" title="判断两个数组的值是否相等"></a>判断两个数组的值是否相等</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static boolean <span class="hljs-built_in">equal</span>(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span>[] b)&#123;<br>    <span class="hljs-keyword">if</span> (a.<span class="hljs-built_in">length</span>!=b.<span class="hljs-built_in">length</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=b[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交换两个数组的值"><a href="#交换两个数组的值" class="headerlink" title="交换两个数组的值"></a>交换两个数组的值</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static <span class="hljs-type">void</span> aryChng(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span>[] b) &#123;<br>    <span class="hljs-type">int</span> minarray=Math.<span class="hljs-built_in">min</span>(a.<span class="hljs-built_in">length</span>,b.<span class="hljs-built_in">length</span>);<span class="hljs-comment">//利用math求出小值</span><br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;minarray;i++)&#123;<br>        <span class="hljs-type">int</span> t=a[i];<span class="hljs-comment">//这里不需要用数组存储值，只需要用一个变量就可以，让其在循环中重复赋值</span><br>        a[i]=b[i];<br>        b[i]=t;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="返回值类型为数组"><a href="#返回值类型为数组" class="headerlink" title="返回值类型为数组"></a>返回值类型为数组</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">reShuzu</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> n</span>)</span>&#123;<br>    <span class="hljs-built_in">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        a[i]=i;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入一个数到数组中，长度-1"><a href="#插入一个数到数组中，长度-1" class="headerlink" title="插入一个数到数组中，长度+1"></a>插入一个数到数组中，长度+1</h2><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs glsl">static <span class="hljs-type">int</span>[] arrayInsOf(<span class="hljs-type">int</span>[] a,<span class="hljs-type">int</span> idx,<span class="hljs-type">int</span> x)&#123;<br>    <span class="hljs-type">int</span>[] b=new <span class="hljs-type">int</span>[a.<span class="hljs-built_in">length</span>+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> t=a[a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>];<br>    b[b.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>]=t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a.<span class="hljs-built_in">length</span><span class="hljs-number">-1</span>;i&gt;idx;i--)&#123;<span class="hljs-comment">//从后往前循环到idx处</span><br>        a[i]=a[i<span class="hljs-number">-1</span>];<br>    &#125;a[idx]=x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">length</span>;i++)&#123;<br>        b[i]=a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> b;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多维数组的传递"><a href="#多维数组的传递" class="headerlink" title="多维数组的传递"></a>多维数组的传递</h1><h2 id="创建并返回一个与二维数组a相同的数组"><a href="#创建并返回一个与二维数组a相同的数组" class="headerlink" title="创建并返回一个与二维数组a相同的数组"></a>创建并返回一个与二维数组a相同的数组</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">static int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> aryClone(int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> x)&#123;<br>    int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> y=new int<span class="hljs-comment">[x.length]</span><span class="hljs-comment">[x<span class="hljs-comment">[0]</span>.length]</span>;<br>    for(int i=0;i&lt; x.length;i++) &#123;<br>        for (int j = 0; j &lt; x<span class="hljs-comment">[i]</span>.length; j++) &#123;<br>            y<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = x<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>;<br><br>        &#125;<br>    &#125;return y;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="计算两个矩阵的和-前提是两个矩阵行和列都相同"><a href="#计算两个矩阵的和-前提是两个矩阵行和列都相同" class="headerlink" title="计算两个矩阵的和(前提是两个矩阵行和列都相同)"></a>计算两个矩阵的和(前提是两个矩阵行和列都相同)</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs prolog">static boolean addMatrix(int[][] x,int[][] y,int[][] z)&#123;<br>        if(x.length==y.length &amp;&amp; y.length==z.length)&#123;<br>            if(x[<span class="hljs-number">0</span>].length==y[<span class="hljs-number">0</span>].length &amp;&amp; y[<span class="hljs-number">0</span>].length==z[<span class="hljs-number">0</span>].length)&#123;<br>                for(int i=<span class="hljs-number">0</span>;i&lt; x.length;i++) &#123;<br>                    for (int j = <span class="hljs-number">0</span>; j &lt; x[i].length; j++) &#123;<br>                        z[i][j] = x[i][j] + y[i][j];<br><br>                    &#125;<br>                &#125;<br>            &#125;<br>            return true;<br>        &#125;else &#123;<br>            return false;<br>        &#125;<br><br>    &#125;<br>public static void main(<span class="hljs-symbol">String</span>[] args) &#123;<br>            int[][] a=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>        int[][] b=&#123;&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br>        int[][] c=new int[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br><br><br>        <span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;这三个多维数组行和列都&quot;</span>+((addMatrix(a,b,c))?<span class="hljs-string">&quot;相同&quot;</span>:<span class="hljs-string">&quot;不相同&quot;</span>));<br>        printArray(c);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s50.png"></p><h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><p>重载指在同一个类中对不同的方法赋予相同的名称，但相同签名的方法不可以进行重载（签名指方法名和形参的个数、类型的组合），不包括返回类型和形参的名称<br><strong>main方法不可以重载</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">package</span> chap07;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr6</span> &#123;<br><span class="hljs-comment">//如下三种方法实现了重载，方法名不同，而且形参的个数或类型不同</span><br><br>    <span class="hljs-comment">//输出两个数中最大值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;<br>        <span class="hljs-keyword">return</span> Math.<span class="hljs-property">max</span>(a, b);<br>    &#125;<br><br>    <span class="hljs-comment">//输出三个数中最大值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>=x;<br>        <span class="hljs-keyword">if</span>(y&gt;<span class="hljs-built_in">max</span>) <span class="hljs-built_in">max</span>=y;<br>        <span class="hljs-keyword">if</span>(z&gt;<span class="hljs-built_in">max</span>) <span class="hljs-built_in">max</span>=z;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//输出数组中的最大值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span>[] r)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-built_in">max</span>=r[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;r.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(r[i]&gt;<span class="hljs-built_in">max</span>)<br>               <span class="hljs-built_in">max</span>=r[i];<br><br>        &#125;<span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-built_in">String</span>[] args) &#123;<br>        <span class="hljs-type">int</span> o=<span class="hljs-number">12</span>;<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">34</span>;<br>        <span class="hljs-type">int</span> q=<span class="hljs-number">90</span>;<br>        <span class="hljs-type">int</span>[] w=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">33</span>,<span class="hljs-number">55</span>,<span class="hljs-number">88</span>&#125;;<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">max</span>(o,p));<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">max</span>(o,p,q));<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">max</span>(w));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s53.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java整数内部的位处理运算符</title>
    <link href="/2025/02/28/java06/"/>
    <url>/2025/02/28/java06/</url>
    
    <content type="html"><![CDATA[<h1 id="整数内部的位处理运算符"><a href="#整数内部的位处理运算符" class="headerlink" title="整数内部的位处理运算符"></a>整数内部的位处理运算符</h1><ul><li>&amp; 按位与运算符</li><li>| 按位或运算符</li><li>^ 按位异或运算符   相同为0，不同为1</li><li>~ 按位取反运算符   每位取反</li><li>x&lt;&lt; i;将x的二进制向左移动i位（乘以2的i次），前面位都用0来填充</li><li>x&gt;&gt;&gt;i;将x的二进制向右移动i位（除以2的i次），前面位都用0来填充</li><li>x&gt;&gt; i;将x的二进制向右移动i位,前面位都用原来的符号位来填充<br><strong>|也可以用于布尔值的逻辑或运算，但通常不推荐，因为它不会像||一样进行短路运算</strong></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr3</span> &#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printBits</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>)</span>&#123;<span class="hljs-comment">//转化为32位的二进制数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">31</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.<span class="hljs-keyword">out</span>.print(((x&gt;&gt;&gt;i &amp; <span class="hljs-number">1</span>)==<span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;1&#x27;</span> :<span class="hljs-string">&#x27;0&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">count</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> x</span>)</span>&#123;<br>        <span class="hljs-built_in">int</span> bits=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//从x一直判断到它为0，所以用while循环</span><br>            <span class="hljs-keyword">if</span> ((x &amp; <span class="hljs-number">1</span>)==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//以此判断最低为是否为1</span><br>                bits++;<br>                x&gt;&gt;&gt;=<span class="hljs-number">1</span>;<span class="hljs-comment">//将x右移一位，将判断过的最低位除去</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">return</span> bits;<br>    &#125;<br><br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br><br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;a=&quot;</span>);<span class="hljs-built_in">int</span> a= scanner.nextInt();<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;b=&quot;</span>);<span class="hljs-built_in">int</span> b= scanner.nextInt();<br><br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;a  =&quot;</span>);printBits(a);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;\na的二进制的1的位数为&quot;</span>+count(a));<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\nb  =&quot;</span>);printBits(b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\na&amp;b=&quot;</span>);printBits(a&amp;b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\na|b=&quot;</span>);printBits(a|b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\na^b=&quot;</span>);printBits(a^b);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\n~a =&quot;</span>);printBits(~a);<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;\n~b =&quot;</span>);printBits(~b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解析printBits()函数</strong><br>①判断第i位的值是0还是1，注意一开始先判断第31位，是最左边的最高位，所以还是从左往右输出<br>②a&#x3D;3时，进入程序中的二进制是：00000000000000000000000000000011; 以下步骤从左往右输出，最终输出a的二进制<br>③a向右移31位：000000000000000000000000000000 &amp; 1！&#x3D;1,则输出0 ……<br>④a向右移动1位：00000000000000000000000000000001 &amp; 1&#x3D;1,则输出1<br>⑤a向右移动0位：00000000000000000000000000000011 &amp; 1&#x3D;1,则输出1<br>运行结果如下：<br><img src="/image/s48.png"></p><h2 id="按位运算符也可当作逻辑运算来使用"><a href="#按位运算符也可当作逻辑运算来使用" class="headerlink" title="按位运算符也可当作逻辑运算来使用"></a>按位运算符也可当作逻辑运算来使用</h2><ul><li>^为异或，相同为0，不同为1</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;x=&quot;);<br><span class="hljs-type">int</span> x= scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;\ny=&quot;);<br><span class="hljs-type">int</span> y= scanner.nextInt();<br><br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">5</span> ^ y==<span class="hljs-number">5</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x和y其中一个为5&quot;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x和y都不为5或都为5&quot;);<br>&#125;<br><br><span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">1</span> &amp; y&lt;<span class="hljs-number">3</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x大于1，y小于3&quot;);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;x不大于1，y不小于3&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里&amp;和&amp;&amp;是一样的作用，注意：只在java中这么用</strong><br>运行结果如下：<br><img src="/image/s49.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java数组</title>
    <link href="/2025/02/27/java05/"/>
    <url>/2025/02/27/java05/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><code>int[] a=new int[5];</code><br>int[5]是数组主体，a是数组变量，a引用数组主体。对构成元素的访问通过索引，从a[0]开始到a[n-1];a.length是final int型，不能后续再进行改值。</p><h2 id="数组的创建定义"><a href="#数组的创建定义" class="headerlink" title="数组的创建定义"></a>数组的创建定义</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>[] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span>[] b=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-type">double</span>[] c=<span class="hljs-built_in">new</span> <span class="hljs-type">double</span>[<span class="hljs-number">5</span>];<br><br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span>;<br>a[<span class="hljs-number">2</span>]=<span class="hljs-number">8</span>;<br>a[<span class="hljs-number">4</span>]=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+i+&quot;个元素的值为：&quot;+a[i]);//未被赋值的元素默认为<span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;b.length;j++)&#123;<br>    b[j]=b.length-j;<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;b.length;k++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+k+&quot;个元素的值为：&quot;+b[k]);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;c.length;j++)&#123;<br>    c[j]=(j+<span class="hljs-number">1</span>)*<span class="hljs-number">1.1</span>;//加减无法满足要求，需要考虑乘除<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;c.length;k++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.printf(&quot;第&quot;+k+&quot;个元素的值为：%1.1f&quot;,c[k]);//若不进行格式化，那么结果会存在误差：第<span class="hljs-number">2</span>个元素的值为：<span class="hljs-number">3.3000000000000003</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果为：<br><img src="/image/s36.png"></p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="通过键盘输入数组长度及每个值"><a href="#通过键盘输入数组长度及每个值" class="headerlink" title="通过键盘输入数组长度及每个值"></a>通过键盘输入数组长度及每个值</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入数组的长度：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><span class="hljs-type">int</span>[] d=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;第&quot;+i+&quot;个的值为：&quot;);<br>    d[i]= scanner.nextInt();<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;d.length;k++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+k+&quot;个元素的值为：&quot;+d[k]);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s37.png"></p><h3 id="生成柱状图，高度随机"><a href="#生成柱状图，高度随机" class="headerlink" title="生成柱状图，高度随机"></a>生成柱状图，高度随机</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>Random random = <span class="hljs-built_in">new</span> Random();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;请输入数组的长度：&quot;);<br><span class="hljs-type">int</span> m = scanner.nextInt();<br><br><span class="hljs-type">int</span>[] e = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[m];<br><br>// 随机生成数组元素<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    e[i] = random.nextInt(<span class="hljs-number">10</span>); // 随机生成<span class="hljs-number">0</span>到<span class="hljs-number">9</span>之间的整数<br>&#125;<br><br>// 找到最大值，用于确定柱状图的高度<br><span class="hljs-type">int</span> maxHeight = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-keyword">value</span> : e) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> &gt; maxHeight) &#123;<br>        maxHeight = <span class="hljs-keyword">value</span>;<br>    &#125;<br>&#125;<br><br>// 打印柱状图<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-keyword">row</span> = maxHeight; <span class="hljs-keyword">row</span> &gt; <span class="hljs-number">0</span>; <span class="hljs-keyword">row</span><span class="hljs-comment">--) &#123; // 从最大高度开始向下打印，一行一行地打印</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>; col &lt; e.length; col++) &#123;<br>        <span class="hljs-keyword">if</span> (e[col] &gt;= <span class="hljs-keyword">row</span>) &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;*\t&quot;); // 如果当前列的高度(即元素的值)大于等于当前行，打印 *<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot; \t&quot;); // 否则打印空格<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br><br>// 打印分割虚线<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;----------------------------------------&quot;);<br><br>// 打印每个元素的值（索引值除以<span class="hljs-number">10</span>的余数）<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; e.length; i++) &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print((i % <span class="hljs-number">10</span>) + &quot;\t&quot;);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s38.png"></p><h2 id="数组的查找"><a href="#数组的查找" class="headerlink" title="数组的查找"></a>数组的查找</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请输入数组的长度：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-built_in">len</span>= scanner.nextInt();<br><span class="hljs-type">int</span>[] g=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-built_in">len</span>];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)&#123;<br>    System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g[&quot;</span>+i+<span class="hljs-string">&quot;]=&quot;</span>);<br>    g[i]= scanner.nextInt();<br>&#125;<br><br><span class="hljs-type">int</span> max=g[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">len</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(g[i]&gt;max)&#123;<br>        max=g[i];<span class="hljs-comment">//数组遍历</span><br>    &#125;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;数组中最大值为：&quot;</span>+max);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s40.png"></p><h3 id="线性查找数值的位置"><a href="#线性查找数值的位置" class="headerlink" title="线性查找数值的位置"></a>线性查找数值的位置</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> lent=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span>[] h=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[lent];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;lent;j++)&#123;<br>    h[j]= random.nextInt(<span class="hljs-number">10</span>);<br>    System.out.<span class="hljs-keyword">print</span>(h[j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br><br>System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-string">&quot;请输入要查找的值：&quot;</span>);<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">find</span>= scanner.nextInt();<br><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=lent-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//如若查找的值有多个，倒着查找，则能查到末尾的值</span><br>    <span class="hljs-keyword">if</span>(h[i]==<span class="hljs-keyword">find</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">0</span>)&#123;<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;查找成功，该元素是h[&quot;</span>+i+<span class="hljs-string">&quot;]&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该值不存在&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s39.png"></p><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> y= random.nextInt(<span class="hljs-number">10</span>);<br><span class="hljs-type">int</span>[] uu=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[y];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;y;i++)&#123;<br>    uu[i]= random.nextInt(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(uu[i]+&quot; &quot;);<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br><br><span class="hljs-type">double</span> sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">double</span> i:uu)&#123;<br>    sum+=i;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;数组中所有的值的和为：&quot;+sum);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s41.png"><br><strong>for(double i:uu):利用扩展for语句来遍历数组，这时i并不是索引(注意i需要注明类型)，而是元素的值（利用在当不需要索引值的时候，比较方便）。这种写法比较简洁</strong></p><h3 id="利用扩展for循环来遍历多维数组"><a href="#利用扩展for循环来遍历多维数组" class="headerlink" title="利用扩展for循环来遍历多维数组"></a>利用扩展for循环来遍历多维数组</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">double</span>[] m=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;//数组可以这样创建并初始化<br><span class="hljs-type">double</span>[][] many=&#123;m,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">double</span>[] i:many)&#123;//这里遍历要用到<span class="hljs-type">double</span>[] i,因为多维数组时数组里套着多个数组<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">double</span> j:i)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.printf(&quot;%5.1f&quot;,j);<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/s42.png"></p><h2 id="数组的倒序排列"><a href="#数组的倒序排列" class="headerlink" title="数组的倒序排列"></a>数组的倒序排列</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">int</span>[] <span class="hljs-keyword">qq</span>=new <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>    <span class="hljs-string">qq[j]</span>= random.nextInt(<span class="hljs-number">10</span>);<br>    System.out.printf(<span class="hljs-string">&quot;<span class="hljs-variable">%3d</span>&quot;</span>,<span class="hljs-string">qq[j]</span>);<br>&#125;<br>System.out.println();<br><br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>/<span class="hljs-number">2</span>;i++)&#123;<span class="hljs-regexp">//</span>只需要遍历到数组长度（无论奇数还是偶数）的一半即可，否则就会变回原来的顺序<br>    <span class="hljs-keyword">int</span> t=<span class="hljs-string">qq[i]</span>;<br>    <span class="hljs-string">qq[i]</span>=<span class="hljs-string">qq[10-i-1]</span>;<br>    <span class="hljs-string">qq[10-i-1]</span>=t;<br><br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)&#123;<br>    System.out.printf(<span class="hljs-string">&quot;<span class="hljs-variable">%3d</span>&quot;</span>,<span class="hljs-string">qq[j]</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下；<br><img src="/image/s43.png"></p><h2 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h2><p>通过遍历将数组a的所有值值依次赋给数组b<br><strong>若直接使用赋值运算符&#x3D;，比如a&#x3D;b(a、b都是数组)，这样的结果是a引用了b的数组主体，并非是复制</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>Random random=<span class="hljs-built_in">new</span> Random();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入数组的元素个数：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-type">int</span>[] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-type">int</span>[] b=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a[&quot;+i+&quot;]=&quot;);<br>    a[i]=scanner.nextInt();<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    b[n-i<span class="hljs-number">-1</span>]=a[i];//<br>&#125;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;b数组的元素为：&quot;);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(b[i]+&quot; &quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串数组的创建"><a href="#字符串数组的创建" class="headerlink" title="字符串数组的创建"></a>字符串数组的创建</h2><p>根据1~12数字填写对应的英文缩写</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs gradle">String[] months = &#123;<span class="hljs-string">&quot;Jan&quot;</span>, <span class="hljs-string">&quot;Feb&quot;</span>, <span class="hljs-string">&quot;Mar&quot;</span>, <span class="hljs-string">&quot;Apr&quot;</span>, <span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;Jun&quot;</span>, <span class="hljs-string">&quot;July&quot;</span>, <span class="hljs-string">&quot;Aug&quot;</span>, <span class="hljs-string">&quot;Sept&quot;</span>, <span class="hljs-string">&quot;Oct&quot;</span>, <span class="hljs-string">&quot;Nov&quot;</span>, <span class="hljs-string">&quot;Dec&quot;</span>&#125;;<br><br><span class="hljs-comment">// 使用布尔数组标记已使用的月份</span><br><span class="hljs-keyword">boolean</span>[] used = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[<span class="hljs-number">12</span>];<br><span class="hljs-keyword">int</span> usedCount = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已正确回答的月份数量</span><br><br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">if</span> (usedCount == <span class="hljs-number">12</span>) &#123; <span class="hljs-comment">// 如果所有月份都已正确回答</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;所有题目已完成！游戏结束。&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 随机生成一个未使用的月份索引</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        n = random.nextInt(<span class="hljs-number">12</span>);<br>    &#125; <span class="hljs-keyword">while</span> (used[n]); <span class="hljs-comment">// 如果该月份已被正确回答过，则重新生成</span><br><br>    System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入月份的英语表达，首字母大写，其他字母小写（缩写即可）：&quot;</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123; <span class="hljs-comment">// 对当前月份进行循环，直到回答正确</span><br><br>        System.out.<span class="hljs-keyword">print</span>((n + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;月：&quot;</span>);<br>        String userAnswer = scanner.nextLine();<br><br>        <span class="hljs-keyword">if</span> (months[n].equals(userAnswer)) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;回答正确！&quot;</span>);<br>            used[n] = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 标记当前月份为已正确回答</span><br>            usedCount++; <span class="hljs-comment">// 增加已正确回答的月份数量</span><br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 跳出当前月份的循环</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;回答错误，请重新输入！&quot;</span> );<span class="hljs-comment">//因为while控制条件为true，除非执行break，否则会继续循环</span><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 询问用户是否继续游戏</span><br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;再来一次？ 1...yes; 2...no&quot;</span>);<br>    <span class="hljs-keyword">int</span> choice;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (scanner.hasNextInt()) &#123;<span class="hljs-comment">//用于检查输入流中下一个可用的输入是否是一个有效的整数</span><br>            choice = scanner.nextInt();<br>            scanner.nextLine(); <span class="hljs-comment">//清理缓冲区，如果用户输入 1 并按下回车键，scanner.nextInt() 会读取 1，但换行符 \n 仍然留在缓冲区中</span><br>            <span class="hljs-comment">//如果下一次调用 scanner.nextLine()，它会直接读取缓冲区中的换行符，而不会等待用户输入新的内容，从而导致程序行为异常</span><br>            <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">1</span> || choice == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;输入无效，请输入 1 或 2：&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;输入无效，请输入数字：&quot;</span>);<br>            scanner.<span class="hljs-keyword">next</span>(); <span class="hljs-comment">// 读取并丢弃无效输入</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (choice == <span class="hljs-number">2</span>) &#123;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;游戏结束。&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s44.png"></p><h2 id="引用类型和对象"><a href="#引用类型和对象" class="headerlink" title="引用类型和对象"></a>引用类型和对象</h2><p>数组主体与一般变量不同，它被称为对象，引用数组主体的类型为引用类型，数组变量的类型是数组类型，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>[] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;a=&quot;+a);<br>a=<span class="hljs-keyword">null</span>;//将<span class="hljs-keyword">null</span>这个空常量赋给a，a这被称为空引用，那么这时数组主体则使用垃圾回收进行回收<br>//若将数组a的类型改为final <span class="hljs-type">int</span>，那么就会避免赋给a空常量<span class="hljs-keyword">null</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;a=&quot;+a);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s45.png"></p><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>每列的数值个数可以不同</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;输入该数组的行数：&quot;);<br><span class="hljs-type">int</span> h= scanner.nextInt();<br><span class="hljs-type">int</span>[][] a=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[h][];<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;依次输入该数组的列数：&quot;);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a[&quot;+i+&quot;]:&quot;);<br>    a[i]=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[scanner.nextInt()];<br>&#125;<br><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入每个元素的值：\n第0行：&quot;);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h;i++)&#123;<br>    <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;第&quot;+i+&quot;行：&quot;);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;a[i].length;j++)&#123;<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a[&quot;+i+&quot;][&quot;+j+&quot;]=&quot;);<br>        a[i][j]= scanner.nextInt();<br>    &#125;<br><br><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;h;i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].length; j++) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(a[i][j] + &quot; &quot;);<br>    &#125;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s47.png"></p><h2 id="矩阵的乘积"><a href="#矩阵的乘积" class="headerlink" title="矩阵的乘积"></a>矩阵的乘积</h2><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs prolog">int[][] a=new int[<span class="hljs-number">4</span>][<span class="hljs-number">3</span>];<br>int[][] b= &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;请输入数组a的值&quot;</span>);<br>for(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>    for(int j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>        <span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;a[&quot;</span>+i+<span class="hljs-string">&quot;][&quot;</span>+j+<span class="hljs-string">&quot;]=&quot;</span>);<br>        a[i][j]= scanner.nextInt();<br>    &#125;<br>&#125;<br><br>int[][] c=new int[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>// 计算矩阵 a 和矩阵 b 的乘积<br>for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123; // 遍历矩阵 a 的行<br>    for (int j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123; // 遍历矩阵 b 的列<br>        for (int k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++) &#123; // 遍历矩阵 a 的列和矩阵 b 的行<br>            c[i][j] += a[i][k] * b[k][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br>// 输出矩阵 c<br><span class="hljs-symbol">System</span>.out.println(<span class="hljs-string">&quot;矩阵 a 和矩阵 b 的乘积为：&quot;</span>);<br>for (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    for (int j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>        <span class="hljs-symbol">System</span>.out.print(c[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-symbol">System</span>.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><p>a矩阵内的数都为1，运行结果如下：<br><img src="/image/s46.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序流程之循环、printf、转义字符</title>
    <link href="/2025/02/26/java04/"/>
    <url>/2025/02/26/java04/</url>
    
    <content type="html"><![CDATA[<h1 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h1><p>do语句为循环判断首（判断在后，循环在前）  </p><h2 id="判断b除以3的结果"><a href="#判断b除以3的结果" class="headerlink" title="判断b除以3的结果"></a>判断b除以3的结果</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sas">String str;//<span class="hljs-keyword">do</span>...<span class="hljs-keyword">while</span>语句中循环条件在外，所以str的定义应该在外面<br>String str2=<span class="hljs-string">&quot;是&quot;</span>;///定义字符串时注意是双引号不是单引号，若是单引号则表示字符常量（类型为char）<br><br><span class="hljs-keyword">do</span>&#123;<br><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入整数b：&quot;</span>);<br>    int b=scanner.next<span class="hljs-meta">Int</span>();<br>    <span class="hljs-keyword">if</span>(b%3==0)  //若不加&#123;&#125;，要注意<span class="hljs-keyword">else</span>是和与它最近的<span class="hljs-keyword">if</span>相链接，且与缩进无关<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b能够被3整除&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==1)<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余1&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==2)<br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余2&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不为正值&quot;</span>);<br><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;请输入是否继续：（是/否）&quot;</span>);<br>    str= scanner.next();///next()读取单个单词，nextLine()读取一行<br>&#125;<span class="hljs-keyword">while</span>(str.equals(str2));///字符串中的相等运算用equals<br></code></pre></td></tr></table></figure><h2 id="猜数字游戏-0-99"><a href="#猜数字游戏-0-99" class="headerlink" title="猜数字游戏(0~99)"></a>猜数字游戏(0~99)</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Random random=<span class="hljs-built_in">new</span> Random();<br><span class="hljs-type">int</span> <span class="hljs-keyword">no</span>=random.nextInt(<span class="hljs-number">100</span>);<br><br><span class="hljs-type">int</span> x;<br><br><span class="hljs-keyword">do</span>&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请猜一下（0~99）:&quot;);<br>    x= scanner.nextInt();<br><br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-keyword">no</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;猜大了！！！&quot;);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-keyword">no</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;猜小了！！！&quot;);<br>    &#125;<br>&#125;<span class="hljs-keyword">while</span>(x!=<span class="hljs-keyword">no</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;回答正确&quot;);<br></code></pre></td></tr></table></figure><h1 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h1><h2 id="输出从a到0的所有数"><a href="#输出从a到0的所有数" class="headerlink" title="输出从a到0的所有数"></a>输出从a到0的所有数</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入a的值&quot;);<br><span class="hljs-type">int</span> a= scanner.nextInt();<br><span class="hljs-keyword">while</span>(a&gt;=<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a<span class="hljs-comment">--);//a--后置递减运算，先返回变量的当前值，然后再将变量的值减1；</span><br>    //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-comment">--a);//--a前置递减运算，先将变量的值减1，然后再返回变量的新值；</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输出1加到j的和"><a href="#输出1加到j的和" class="headerlink" title="输出1加到j的和"></a>输出1加到j的和</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs axapta">System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个或者整数&quot;</span>);<br><span class="hljs-built_in">int</span> j= scanner.nextInt();<br><br><span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<span class="hljs-comment">//i用来控制循环，这里不能是0，因为必须从1开始加</span><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<span class="hljs-comment">//sum是和</span><br>    <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<span class="hljs-comment">//若j=3</span><br>        <span class="hljs-keyword">sum</span>+=i;<span class="hljs-comment">//在这想要实现j--，其实i++就可以从1加到j   循环结束后sum的变化为0 1 3 6</span><br>        i++;<span class="hljs-comment">//循环结束后i的变化为1 2 3 4</span><br>    &#125;<br>System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;从1加到n的和为：&quot;</span>+<span class="hljs-keyword">sum</span>);<br></code></pre></td></tr></table></figure><h2 id="计算值的位数"><a href="#计算值的位数" class="headerlink" title="计算值的位数"></a>计算值的位数</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;输入一个正整数的值&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>    n/=<span class="hljs-number">10</span>;<br>    i++;//i是循环个数也是值的位数<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(n+&quot;的位数为&quot;+i);<br></code></pre></td></tr></table></figure><p><strong>do…while语句与while语句不同：如果判断条件不成立，do语句一定会执行一次循环体；while语句一次都不会执行</strong></p><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for(初始条件,控制条件,循环体){}：</p><p>若初始条件不需要，可以省略；若无控制条件且无break和return，则为true，则会陷入无限循环内；若无执行内容，也可省略  </p><h2 id="输出1加到j的和-1"><a href="#输出1加到j的和-1" class="headerlink" title="输出1加到j的和"></a>输出1加到j的和</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个或者整数&quot;</span>);<br><span class="hljs-built_in">int</span> j= scanner.nextInt();<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=j;i++)&#123;<br>    <span class="hljs-keyword">sum</span>+=i;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;和为：&quot;</span>+<span class="hljs-keyword">sum</span>);<br></code></pre></td></tr></table></figure><p>将以上代码改写，使得结果为表达式如”1+2+3&#x3D;6”</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stata">System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个正整数：&quot;</span>);<br>int j = scanner.nextInt();<br><br><span class="hljs-keyword">if</span> (j &lt;= 0) &#123;<br>    System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个正整数！&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    int <span class="hljs-keyword">sum</span> = 0; <span class="hljs-comment">// 用于存储累加和</span><br>    StringBuilder expression = new StringBuilder(); <span class="hljs-comment">// 用于构建表达式</span><br><br>    <span class="hljs-keyword">for</span> (int i = 1; i &lt;= j; i++) &#123;<br>        <span class="hljs-keyword">sum</span> += i; <span class="hljs-comment">// 累加</span><br>        <span class="hljs-keyword">if</span> (i == j) &#123;<br>            expression.<span class="hljs-keyword">append</span>(i); <span class="hljs-comment">// 如果是最后一个数字，直接添加</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            expression.<span class="hljs-keyword">append</span>(i).<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;+&quot;</span>); <span class="hljs-comment">// 不是最后一个数字，添加数字和加号</span><br>        &#125;<br>    &#125;<br><br>    expression.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;=&quot;</span>).<span class="hljs-keyword">append</span>(<span class="hljs-keyword">sum</span>); <span class="hljs-comment">// 在表达式末尾添加等号和总和</span><br>    System.<span class="hljs-keyword">out</span>.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;从1加到n的表达式为：&quot;</span> + expression);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：for和while语句可以互相转换，都被称为判断循环首（判断在前，循环在后）</strong></p><h2 id="输出n个"><a href="#输出n个" class="headerlink" title="输出n个*"></a>输出n个*</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;输入星号的个数：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;*&quot;);<br>    //每隔<span class="hljs-number">5</span>个*换行<br>    <span class="hljs-keyword">if</span>((i+<span class="hljs-number">1</span>)%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for循环可以有两个变量-n减去1…n的值依次是多少"><a href="#for循环可以有两个变量-n减去1…n的值依次是多少" class="headerlink" title="for循环可以有两个变量,n减去1…n的值依次是多少"></a>for循环可以有两个变量,n减去1…n的值依次是多少</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入整数：&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=n<span class="hljs-number">-1</span>; i&lt;=n;i++,j<span class="hljs-comment">--)&#123;</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(n+&quot;-&quot;+i+&quot;=&quot;+j);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="/image/s28.png"></p><h2 id="从0正数到n或从n倒数到0"><a href="#从0正数到n或从n倒数到0" class="headerlink" title="从0正数到n或从n倒数到0"></a>从0正数到n或从n倒数到0</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;n=&quot;);<br><span class="hljs-type">int</span> n= scanner.nextInt();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=n;i&lt;n+<span class="hljs-number">1</span>;i++,j<span class="hljs-comment">--)&#123;</span><br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(i);<br>    //<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(j);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h1><h2 id="金字塔"><a href="#金字塔" class="headerlink" title="金字塔"></a>金字塔</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs abnf">System.out.println(<span class="hljs-string">&quot;n=&quot;</span>)<span class="hljs-comment">;</span><br>int n<span class="hljs-operator">=</span> scanner.nextInt()<span class="hljs-comment">;</span><br><br>for(int i<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)&#123;///行数</span><br>    // 打印空格，空格数量为 n - i<br>    for (int k <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">; k &lt;= n - i; k++) &#123;///中间的控制条件的右操作数和循环体循环的次数有关</span><br>        System.out.print(<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">;</span><br>    &#125;<br>    for(int j<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;j&lt;=(i-1)*2+1;j++)&#123;//当外层循环i=1时，j循环到1；当外层循环i=2时，j循环到2...</span><br>        System.out.print(i%<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br><br>    &#125;<br><br>    System.out.println()<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s28.png"></p><h2 id="利用-画直角三角形"><a href="#利用-画直角三角形" class="headerlink" title="利用*画直角三角形"></a>利用*画直角三角形</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">System.out.println(<span class="hljs-string">&quot;n=&quot;</span>)<span class="hljs-comment">;</span><br>int n<span class="hljs-operator">=</span> scanner.nextInt()<span class="hljs-comment">;</span><br><br>for(int i<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;i&lt;=n;i++)&#123;//行数</span><br>    for(int j<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;j&lt;=i;j++)&#123;///当外层循环i=1时，j循环到1；当外层循环i=2时，j循环到2...</span><br>        System.out.print(<span class="hljs-string">&quot;*&quot;</span>)<span class="hljs-comment">;</span><br>    &#125;<br>    System.out.println()<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s30.png"></p><h1 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h1><h2 id="判断质数"><a href="#判断质数" class="headerlink" title="判断质数"></a>判断质数</h2><p>条件：不能被大于等于2且小于n中的任意一个数整除的整数一定是质数</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//已知一个确定的条件，那就只做这个条件的循环处理</span><br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入正整数：&quot;</span>);<br>        <span class="hljs-keyword">int</span> n= scanner.nextInt();<br><br>        <span class="hljs-comment">// 特殊情况处理</span><br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该数值不是质数&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 判断是否为质数</span><br>        <span class="hljs-keyword">boolean</span> isPrime = <span class="hljs-keyword">true</span>; <span class="hljs-comment">// 假设 n 是质数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123; <span class="hljs-comment">// 也可只检查到 sqrt(n)——&gt;Math.sqrt(n)</span><br>            <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>                isPrime = <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 如果找到一个因数，则 n 不是质数</span><br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//说明它不是质数，则直接结束for循环</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 输出结果</span><br>        <span class="hljs-keyword">if</span> (isPrime) &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该数值是质数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;该数值不是质数&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h1><h2 id="计算和和平均值（不将负值计入计算平均值范围内）"><a href="#计算和和平均值（不将负值计入计算平均值范围内）" class="headerlink" title="计算和和平均值（不将负值计入计算平均值范围内）"></a>计算和和平均值（不将负值计入计算平均值范围内）</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gradle">System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;要想加几个整数呢？&quot;</span>);<br>        <span class="hljs-keyword">int</span> n= scanner.nextInt();<br>        <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">0</span>;<span class="hljs-comment">//非负值数量</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;整数&quot;</span>+i+<span class="hljs-string">&quot;:&quot;</span>);<br>            <span class="hljs-keyword">int</span> j= scanner.nextInt();<br><br>                <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;不对负数进行运算&quot;</span>);<br>                    <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//在这里执行continue后不执行for的剩下语句，若满足控制条件进入下一次循环，但是会计入循环次数</span><br>                    <span class="hljs-comment">// 而break会终止整个循环，即使还满足for的控制条件也不再继续了</span><br>                &#125;<br>                <span class="hljs-keyword">count</span>++;<span class="hljs-comment">//记录非负值数量</span><br>            <span class="hljs-comment">//我的思考方向是计算负值数量,突破口在contiune，不执行时也就是当输入的值是正数时，一定会运行这部分，所以在这添加count++最合适</span><br>                sum+=j;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">count</span>==<span class="hljs-number">0</span>)&#123;<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;无非负值，无法计算&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">double</span> averge=(<span class="hljs-keyword">double</span>)sum<span class="hljs-regexp">/count;/</span>/将sum的类型变为<span class="hljs-keyword">double</span><br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;和是：&quot;</span>+sum);<br>            System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;平均值是：&quot;</span>+averge);<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>break和continue语句的区别：break：无论循环是否满足控制条件都不再循环；continue：不执行剩下的循环语句，若满足循环条件则继续循环。</strong></p><h1 id="带标签的break语句"><a href="#带标签的break语句" class="headerlink" title="带标签的break语句"></a>带标签的break语句</h1><p>标签的作用：让break或continue语句能够明确地指定要中断或继续的是哪一个循环。如果没有标签，break和continue只能影响直接包含它们的最近一层循环。</p><p><strong>带标签的break语句，无论是带标签还是不带标签，都必须在循环语句中使用</strong>  </p><p>输入整数，每组五个数，共10组，求出每组合计及所有组的总计，代码如下所示：</p><p><strong>结束内层循环后，当前组的小计值会被计算</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stata">System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入整数，每组五个数，共10组：&quot;</span>);<br>int <span class="hljs-keyword">total</span>= 0;<br><br>Outer:<br>   <span class="hljs-keyword">for</span>(int i=1;i&lt;=10;i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;组：&quot;</span>);<br>    int <span class="hljs-keyword">sum</span>=0;<br> Inner:<br>    <span class="hljs-keyword">for</span>(int j=1;j&lt;=5;j++)&#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;整数&quot;</span>+j+<span class="hljs-string">&quot;:&quot;</span>);<br>        int k= scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(k==999)<span class="hljs-comment">//输入999，结束Outer</span><br>            <span class="hljs-keyword">break</span> Outer;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k==666)<span class="hljs-comment">//输入666，结束Inner，但是会实现计算每组的小计值，再进入下一个外部循环</span><br>            <span class="hljs-keyword">break</span> Inner;<span class="hljs-comment">//这里的Inner和上面的Inner都可以省略，原因是break语句会中断直接包含它的for循环语句</span><br>        <span class="hljs-keyword">sum</span>+=k;<br><br>    &#125;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;每组的小计值为：&quot;</span>+<span class="hljs-keyword">sum</span>);<span class="hljs-comment">//如果要将这组的小计计入总数，除非5个数都输入数值，否则就要输入666来中断输入</span><br>    <span class="hljs-keyword">total</span>+=<span class="hljs-keyword">sum</span>;<br>&#125;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;所有整数的和为：&quot;</span>+<span class="hljs-keyword">total</span>);<br></code></pre></td></tr></table></figure><h1 id="带标签的continue语句"><a href="#带标签的continue语句" class="headerlink" title="带标签的continue语句"></a>带标签的continue语句</h1><p><strong>带标签的contiune语句，无论是带标签还是不带标签，都必须在循环语句中使用</strong></p><p><strong>结束内层循环后，实现不计算当前组的小计值，直接进入下一个外部循环：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入整数，每组五个数，共10组：&quot;</span>);<br><span class="hljs-built_in">int</span> total= <span class="hljs-number">0</span>;<br><br>Outer:<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;第&quot;</span>+i+<span class="hljs-string">&quot;组：&quot;</span>);<br>    Inner:<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">5</span>;j++)&#123;<br><br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;整数&quot;</span>+j+<span class="hljs-string">&quot;:&quot;</span>);<br>        <span class="hljs-built_in">int</span> k= scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">999</span>)<br>            <span class="hljs-keyword">break</span> Outer;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k==<span class="hljs-number">666</span>)<br>            <span class="hljs-keyword">continue</span> Outer;<span class="hljs-comment">//实现不计算当前组的小计值，直接进入下一个外部循环</span><br>        total+=k;<br><br>    &#125;<br>&#125;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;所有整数的和为：&quot;</span>+total);<br></code></pre></td></tr></table></figure><h1 id="printf方法"><a href="#printf方法" class="headerlink" title="printf方法"></a>printf方法</h1><p>printf方法主要是为了调整格式</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> chap04;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Expr5</span> </span>&#123;<br>    public static void main(String[] args) &#123;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">9</span>;j++)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;<span class="hljs-variable">%3d</span>&quot;</span>,i*j);<span class="hljs-regexp">//</span><span class="hljs-variable">%3d</span>至少按三位宽的十进制进行显示，靠右排列<br><br>            &#125;System.out.println();<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;k=<span class="hljs-variable">%6</span>.2f&quot;</span>,<span class="hljs-number">6.4</span>);<span class="hljs-regexp">//</span>输出浮点数，<span class="hljs-variable">%6</span>.2f中的<span class="hljs-number">6</span>是整体按<span class="hljs-number">6</span>位显示，<span class="hljs-number">2</span>指小数部分按<span class="hljs-number">2</span>为显示<br>        System.out.printf(<span class="hljs-string">&quot;\n3<span class="hljs-variable">%%</span>2=1&quot;</span>);<span class="hljs-regexp">//</span>那么在<span class="hljs-keyword">printf</span>这种格式下，要想输出<span class="hljs-variable">%，</span>则需要<span class="hljs-variable">%%</span><br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%05d</span>&quot;</span>,<span class="hljs-number">12</span>);<span class="hljs-regexp">//</span>空位用<span class="hljs-number">0</span>填充<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%7s</span>&quot;</span>,<span class="hljs-string">&quot;sssss&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%o</span>&quot;</span>,<span class="hljs-number">12345</span>);<span class="hljs-regexp">//</span>八进制<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%x</span>&quot;</span>,<span class="hljs-number">13579</span>);<span class="hljs-regexp">//</span>十六进制小写字母<br>        System.out.printf(<span class="hljs-string">&quot;\n<span class="hljs-variable">%X</span>&quot;</span>,<span class="hljs-number">13579</span>);<span class="hljs-regexp">//</span>十六进制大写字母<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s31.png"></p><h2 id="format方法使用"><a href="#format方法使用" class="headerlink" title="format方法使用"></a>format方法使用</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">String un=String.format(&quot;%5d&quot;,<span class="hljs-number">123</span>);<br>String nu=String.format(&quot;%9.3f&quot;,<span class="hljs-number">123.45</span>);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(un);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(nu);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s70.png"></p><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">package</span> <span class="hljs-variable">chap05</span>;<br><br><span class="hljs-variable">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr3</span> &#123;<br>    <span class="hljs-variable">public</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">String</span>[] <span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">print</span>(<span class="hljs-string">&quot;abcdefghajklmnopeeeeeeeeq&quot;</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\r</span>12345&quot;</span>);<span class="hljs-comment">// \r是回车符，当前显示位置会移动到当前行的行首</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;ABC<span class="hljs-char escape_">\t</span>123&quot;</span>);<span class="hljs-comment">// \t是水平制表符，ABC与123之间的空白宽度取决于运行环境</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\&quot;</span>和&#x27;和\&#x27;&quot;</span>);<span class="hljs-comment">//输出”和‘，‘可以用\&#x27;,也可以用’</span><br>        <span class="hljs-comment">//上方”“的都是字符串常量</span><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(&#x27;\&#x27;&#x27;);<span class="hljs-comment">//表示’的字符常量</span><br><br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;<span class="hljs-char escape_">\\</span>和<span class="hljs-char escape_">\\</span><span class="hljs-char escape_">\\</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运算结果如下：<br><img src="/image/s35.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java程序流程之分支、运算符、程序块</title>
    <link href="/2025/02/25/java03/"/>
    <url>/2025/02/25/java03/</url>
    
    <content type="html"><![CDATA[<h1 id="if判断语句"><a href="#if判断语句" class="headerlink" title="if判断语句"></a>if判断语句</h1><p>if语句包括if-then、if-then-else以及嵌套的if语句，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap03;<br><br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入一个整数a：&quot;</span>);<br>        <span class="hljs-built_in">int</span> a=sc.nextInt();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入一个整数b：&quot;</span>);<br>        <span class="hljs-built_in">int</span> b=sc.nextInt();<br><br>        <span class="hljs-comment">//if-then语句</span><br>        <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//a&gt;0是控制表达式，&gt;是关系运算符，还包括&lt;、&lt;=、&gt;=，关系运算符是二元运算符</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a是正数&quot;</span>);<span class="hljs-comment">//true</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a是0或负数&quot;</span>);<span class="hljs-comment">//false</span><br>        &#125;<br><br>        <span class="hljs-comment">//if-then-else语句</span><br>        <span class="hljs-keyword">if</span>(a==b)&#123;<span class="hljs-comment">//==和！=称为相等运算符</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a和b的值相等&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a和b不相等&quot;</span>);<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span>(!(b==<span class="hljs-number">0</span>))&#123;<span class="hljs-comment">//一元运算符！称为逻辑非运算符</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b不为0&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为0&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//嵌套的if语句</span><br>        <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为0&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b&gt;<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为正数&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;b为负数&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//空语句：只有;的语句        </span><br>        <span class="hljs-comment">//表达式语句：a=b+11;(必须加分号，否则就是表达式，不是语句)</span><br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">0</span>) ; &#123; <span class="hljs-comment">//当a是否为0，都会显示”a的值为0“，这是因为if后面有;,执行了空语句</span><br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;a的值为0&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s27.png"></p><h2 id="if相关练习"><a href="#if相关练习" class="headerlink" title="if相关练习"></a>if相关练习</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sas">//练习：b是否为a的约数<br><span class="hljs-keyword">if</span>(a<span class="hljs-title function_">%b</span>==0)&#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b是a的约数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不是a的约数&quot;</span>);<br>&#125;<br><br>//练习:被3整除<br><span class="hljs-keyword">if</span>(b%3==0)&#123;   //<span class="hljs-keyword">if</span>后可加&#123;&#125;，也可不加，如下段代码所示<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b能够被3整除&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==1) &#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==2) &#123;<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余2&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不为正值&quot;</span>);<br><br><br><span class="hljs-keyword">if</span>(b%3==0)  //若不加&#123;&#125;，要注意<span class="hljs-keyword">else</span>是和与它最近的<span class="hljs-keyword">if</span>相链接，且与缩进无关<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b能够被3整除&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==1)<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b%3==2)<br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b除以3余2&quot;</span>);<br><span class="hljs-keyword">else</span><br>    System.<span class="hljs-keyword">out</span>.printl<span class="hljs-meta">n</span>(<span class="hljs-string">&quot;b不为正值&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>注意:if语句若不加{}，else是和与它最近的if相链接，且与缩进无关</strong></p><h1 id="switch…case语句"><a href="#switch…case语句" class="headerlink" title="switch…case语句"></a>switch…case语句</h1><p>case后一般要加上break，break指结束离其最近的循环（while、do…while、for）或switch语句</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-keyword">package</span> chap03;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Expr4 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入数字选择手势（0...石头/1...剪刀/2...布）:&quot;</span>);<br>        <span class="hljs-keyword">int</span> hand= scanner.nextInt();<br><br>        <span class="hljs-keyword">switch</span> (hand)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">//叫做标签，case后只能是常量和字符常量</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;石头&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-comment">//执行到break时就会跳出switch语句（结束switch语句）</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;剪刀&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;布&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-comment">//最后部分的case部分也要加上break，以便后面存在标签时保证安全</span><br>            <span class="hljs-keyword">default</span>:<span class="hljs-comment">//default是标签，指除0 1 2之外的数字</span><br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;包&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br><br><br>        <span class="hljs-comment">//随机生成0~2的a值</span><br>        Random random=<span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> a=random.nextInt(<span class="hljs-number">2</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;随机生成的a为&quot;</span>+a);<br>        <span class="hljs-keyword">switch</span> (a)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;石头&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;剪刀&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;布&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>逻辑运算符:&amp;&amp;和||<br>if(a&gt;&#x3D;3 &amp;&amp; a&lt;&#x3D;6)     正确<br>if(3&lt;&#x3D;a&lt;&#x3D;6)          错误<br>短路求值:【&amp;&amp;和||：确定左操作数的值就可以确定所有的值】</p><p>比较运算符：&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、&#x3D;&#x3D;</p><p>三元运算符：条件表达式 ? 表达式1 : 表达式2</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino">package chap03;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr2</span> &#123;<br>    <br>    <span class="hljs-comment">//求a和b中较小的值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请输入一个数值a：&quot;</span>);<br>        <span class="hljs-type">int</span> a=scanner.<span class="hljs-built_in">nextInt</span>();<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;请输入一个数值b：&quot;</span>);<br>        <span class="hljs-type">int</span> b=scanner.<span class="hljs-built_in">nextInt</span>();<br><br>        <span class="hljs-type">int</span> min;<br><br>        <span class="hljs-keyword">if</span>(a&lt;b)&#123;<br>            min=a;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            min=b;<br>        &#125;<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;较小的值是&quot;</span>+min);<br><br>        <span class="hljs-comment">//可以不利用if语句进行判断，直接采用条件运算符这个唯一的三元运算符</span><br>        <span class="hljs-comment">//min=a&lt;b?a:b;//表示当a&lt;b成立时则将a赋值为min，否则将b赋值给min</span><br>        <span class="hljs-comment">//System.out.println(&quot;较小的值是&quot;+ (a&lt;b?a:b));//或者直接显示结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="程序块"><a href="#程序块" class="headerlink" title="程序块"></a>程序块</h1><p>{}内的语句称为程序块，语句为多少都行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap03;<br><br>import java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr3</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        <span class="hljs-comment">//对a和b进行升序排序</span><br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.<span class="hljs-keyword">in</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入a的值:&quot;</span>);<br>        <span class="hljs-built_in">int</span> a=scanner.nextInt();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;请输入b的值:&quot;</span>);<br>        <span class="hljs-built_in">int</span> b=scanner.nextInt();<br>        <span class="hljs-keyword">if</span>(a&gt;=b)&#123;<br>            <span class="hljs-comment">//交换a和b的值，新定义一个k作为第三方储存的变量</span><br>            <span class="hljs-built_in">int</span> k=b;<span class="hljs-comment">//只在程序块中使用的值可只在程序块定义</span><br>            b=a;<br>            a=k;<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;升序排序为&quot;</span>+<span class="hljs-string">&quot;a=&quot;</span>+a+<span class="hljs-string">&quot;,b=&quot;</span>+b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java变量的使用及输入输出</title>
    <link href="/2025/02/24/java02/"/>
    <url>/2025/02/24/java02/</url>
    
    <content type="html"><![CDATA[<h1 id="System-out-println控制台输出"><a href="#System-out-println控制台输出" class="headerlink" title="System.out.println控制台输出"></a>System.out.println控制台输出</h1><p>System.out.println可以显示字符串常量，也可以显示整数值、实数值、布尔值、类类型等，这是因为执行了重载的方法</p><h2 id="字符串与数值的拼接"><a href="#字符串与数值的拼接" class="headerlink" title="字符串与数值的拼接"></a>字符串与数值的拼接</h2><p>数值+字符串或字符串+数值这两种情况都是先将数值转化为字符串再进行拼接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;23+34=&quot;+(<span class="hljs-number">23</span>+<span class="hljs-number">34</span>));//先执行括号中的运算,结果为<span class="hljs-number">23</span>+<span class="hljs-number">34</span>=<span class="hljs-number">57</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;23+34=&quot;+<span class="hljs-number">23</span>+<span class="hljs-number">34</span>);//+运算在这里从左往右执行，<span class="hljs-number">23</span>转化为字符串拼接在后面，然后<span class="hljs-number">34</span>再转化为字符串拼接在后面，结果为<span class="hljs-number">23</span>+<span class="hljs-number">34</span>=<span class="hljs-number">2334</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">23</span>+<span class="hljs-number">34</span>+&quot;是23和34的和&quot;);//从左往右执行，结果为<span class="hljs-number">57</span>是<span class="hljs-number">23</span>和<span class="hljs-number">34</span>的和<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println((<span class="hljs-number">23</span>+<span class="hljs-number">34</span>)+&quot;是23和34的和&quot;);//从左往右执行，结果为<span class="hljs-number">57</span>是<span class="hljs-number">23</span>和<span class="hljs-number">34</span>的和<br>//减法<br>//<span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;23-34=&quot;+<span class="hljs-number">23</span><span class="hljs-number">-34</span>);//字符串无法减去数值，编译错误<br></code></pre></td></tr></table></figure><h1 id="变量声明、初始化和赋值"><a href="#变量声明、初始化和赋值" class="headerlink" title="变量声明、初始化和赋值"></a>变量声明、初始化和赋值</h1><p>注意：给x,y初始化时不能表示成int x&#x3D;y&#x3D;0;应该表示成int x&#x3D;0,y&#x3D;0;</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//上方都是固定常量，使用变量则能够自由存取</span><br>int <span class="hljs-attribute">x</span>,y;<span class="hljs-comment">//声明变量：类型+名称，x和y是int整数型变量，这时候没有对x和y进行初始化</span><br><span class="hljs-comment">//int x=11;//初始化</span><br><span class="hljs-attribute">x</span>=<span class="hljs-number">63</span>;<span class="hljs-comment">//将63赋值给x,=是赋值运算符</span><br><span class="hljs-attribute">y</span>=<span class="hljs-number">18</span>;<br>System<span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-attribute">x</span>+y);<span class="hljs-comment">//81</span><br>System<span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>((<span class="hljs-attribute">x</span>+y)/<span class="hljs-number">2</span>);<span class="hljs-comment">//40</span><br></code></pre></td></tr></table></figure><h1 id="通过键盘输入Scanner"><a href="#通过键盘输入Scanner" class="headerlink" title="通过键盘输入Scanner"></a>通过键盘输入Scanner</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;请输入整数x的值：&quot;);<br><span class="hljs-type">int</span> x=scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span> .println(&quot;x的值为：&quot;+x);<br></code></pre></td></tr></table></figure><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><ul><li>byte(1字节-2^7~2^7-1)</li><li>short(2字节-2^15~2^15-1)</li><li>int(4字节-2^31~2^31-1)</li><li>long(8字节-2^63~2^63-1)</li></ul><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><ul><li>float单精度</li><li>double双精度<br>单精度使用32位(4字节)来存储一个浮点数,双精度使用64位(8字节)来存储一个浮点数</li></ul><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><ul><li>char<br><code>char c=&#39;a&#39;;</code><strong>注意是单引号</strong></li></ul><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><ul><li>boolean<br><code>boolean b=true;</code></li></ul><p><strong>注意：String型不是基本类型，而是java.lang包中的类</strong></p><p>相关代码如下:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs arduino">    package chap05;<br><br>    <span class="hljs-keyword">import</span> java.util.Scanner;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">expr1</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-type">int</span> a=<span class="hljs-number">12</span>_34;<span class="hljs-comment">//常量1234可在其中任意位置加上_</span><br>        <span class="hljs-type">int</span> b=<span class="hljs-number">18</span>;<br>        <span class="hljs-type">int</span> i= <span class="hljs-number">010</span>;<span class="hljs-comment">//八进制10</span><br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0x15</span>;<span class="hljs-comment">//十六进制15</span><br>        <span class="hljs-type">long</span> k=<span class="hljs-number">100L</span>;<span class="hljs-comment">//long类型</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a);<br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%o&quot;</span>,i);<span class="hljs-comment">//%o指八进制</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%x&quot;</span>,j);<span class="hljs-comment">//%x指十六进制</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>,k);<span class="hljs-comment">//%d指十进制整数</span><br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%o&quot;</span>,b);<br>        System.out.<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%x&quot;</span>,b);<br>        <span class="hljs-comment">//十进制——&gt;八进制：十进制数除以8，得商和余数，商除以8，得商和余数，以此类推，将余数倒叙排列即为八进制数。十进制——&gt;十六进制同理</span><br><br>        <span class="hljs-comment">//十进制：1位：0~9，2位：10~99，</span><br>        <span class="hljs-comment">//八进制：1位：0~7一共8个数，之后就是10，没有8和9，以此类推，没有18、19、28、29....,所以2位：10~77一共56个数</span><br>        <span class="hljs-comment">//十六进制：1位：0~F一共16个数</span><br><br>        <span class="hljs-comment">//int型的5的二进制表示：            00000000000000000000000000000101</span><br>        <span class="hljs-comment">//而-5用补码表示：上面二进制所有位取反：11111111111111111111111111111010</span><br>        <span class="hljs-comment">//再将其末尾加1，则-5的表示为：       11111111111111111111111111111011</span><br>        <span class="hljs-comment">//整数常量可以用十进制、八进制和十六进制表示</span><br><br><br><br>        <span class="hljs-comment">//浮点数常量可以用十进制和十六进制表示</span><br>        <span class="hljs-comment">//float的精度是6~7位，位数为32；double精度位15位，位数为64位</span><br>        <span class="hljs-comment">//例如：1.23456E9——&gt;1.23456*10^9,1.23456总共的位数也就是精度是7位，指数9是位数</span><br>        <span class="hljs-type">float</span> c=<span class="hljs-number">123456789</span>_0;<span class="hljs-comment">//也可插入下划线,</span><br>        <span class="hljs-type">double</span> d=<span class="hljs-number">1.3</span>;<br>        <span class="hljs-type">float</span> d1=<span class="hljs-number">1.23f</span>;<span class="hljs-comment">//float型的值后面必须加f,不加f默认为double</span><br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;\nc=&quot;</span>+c);<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;\nd=&quot;</span>+d);<br><br><br>        Scanner scanner=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>);<span class="hljs-type">int</span> e=scanner.<span class="hljs-built_in">nextInt</span>();<br>        System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;f=&quot;</span>);<span class="hljs-type">int</span> f=scanner.<span class="hljs-built_in">nextInt</span>();<br><br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;e&lt;f=&quot;</span>+(e&lt;f));<span class="hljs-comment">//关系运算符、相等运算符、逻辑非运算符等判断真假的运算符的值为布尔值</span><br>        <span class="hljs-comment">//与2-1所讲相同，（e&lt;f）的值为true，会先将true转化为字符串，再和“e&lt;f=”拼接后输出</span><br><br>        <span class="hljs-type">boolean</span> b1=<span class="hljs-literal">true</span>;<br>        System.out.<span class="hljs-built_in">println</span>(b1);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s32.png"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap02;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Expr2 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<br>        <span class="hljs-comment">//整数型</span><br>        Scanner scanner=<span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入整数x的值：&quot;</span>);<br>        <span class="hljs-keyword">int</span> x=scanner.nextInt();<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入整数y的值：&quot;</span>);<br>        <span class="hljs-keyword">int</span> y=scanner.nextInt();<br>        System.out .<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;x和y的和为：&quot;</span>+(x+y));<span class="hljs-comment">//x和y是操作数，+是二元运算符</span><br>        <span class="hljs-keyword">int</span> z=-y;<span class="hljs-comment">//-为一元运算符</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;y取反的值为：&quot;</span>+z);<br><br>        <span class="hljs-comment">//浮点数类型</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入小数a的值：&quot;</span>);<br>        <span class="hljs-keyword">double</span> a=scanner.nextDouble();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入小数b的值：&quot;</span>);<br>        <span class="hljs-keyword">double</span> b=scanner.nextDouble();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;a/b=&quot;</span>+a/b);<br><br>        <span class="hljs-comment">//final变量，一般推荐用大写字母来定义final变量，且final变量只能赋一次值或初始化</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请输入半径：&quot;</span>);<br>        <span class="hljs-keyword">double</span> r=scanner.nextDouble();<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI=<span class="hljs-number">3.1416</span>;<span class="hljs-comment">//可以只在一处修改变量的值</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;圆的周长为&quot;</span>+(PI*r*<span class="hljs-number">2</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>final变量：一般推荐用大写字母来定义final变量，且final变量只能赋一次值或初始化</strong></p><p>运行结果如下：<br><img src="/image/s24.png"></p><h1 id="运算和类型"><a href="#运算和类型" class="headerlink" title="运算和类型"></a>运算和类型</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Scanner scanner=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;a=&quot;);<span class="hljs-type">int</span> a= scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;b=&quot;);<span class="hljs-type">int</span> b= scanner.nextInt();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot;c=&quot;);<span class="hljs-type">int</span> c= scanner.nextInt();<br><span class="hljs-type">double</span> ave1=(a+b+c)/<span class="hljs-number">3</span>;<br><span class="hljs-type">double</span> ave2=(a+b+c)/<span class="hljs-number">3.0</span>;//要想得到相对精确的<span class="hljs-type">double</span>值，那么表达式中的必须有值是浮点型，那么在运算过程中就会自动先把<span class="hljs-type">int</span>型向上转化为相应的浮点型<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;三个数的平均值为：&quot;+ave1);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;三个数的平均值为：&quot;+ave2);<br><br>//造型运算<br><span class="hljs-type">double</span> ave3=(<span class="hljs-type">double</span>)(a+b+c)/<span class="hljs-number">3</span>;//造型运算符为(类型)x，则在运算中会先进行造型运算<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;三个数的平均值为：&quot;+ave3);<br></code></pre></td></tr></table></figure><p>运算结果如下：<br><img src="/image/s33.png"></p><h2 id="造型运算"><a href="#造型运算" class="headerlink" title="造型运算"></a>造型运算</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//缩小转换如<span class="hljs-type">double</span>——&gt;<span class="hljs-type">int</span>时必须使用造型运算，可能会丢失长度信息或精度信息，但不能直接赋值<br><span class="hljs-type">int</span> asd=(<span class="hljs-type">int</span>)<span class="hljs-number">10.0</span>;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(asd);<br><br>//放大转换不需要造型<br><span class="hljs-type">double</span> ghj=<span class="hljs-number">8</span>;<br><span class="hljs-type">double</span> jkl=<span class="hljs-number">8.3</span>f;<br><span class="hljs-type">int</span> bnm=<span class="hljs-string">&#x27;c&#x27;</span>;//<span class="hljs-type">char</span>——&gt;<span class="hljs-type">int</span><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(ghj);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(jkl);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(bnm);<br></code></pre></td></tr></table></figure><p><strong>注意：循环控制不要采用浮点数，因为会产生误差</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">float</span> sum=<span class="hljs-number">0.0</span>f;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">float</span> i=<span class="hljs-number">0.0</span>f;i&lt;=<span class="hljs-number">1.0</span>f;i+=<span class="hljs-number">0.1</span>f)&#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;i=&quot;+i);<br>    sum+=i;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;sum=&quot;+sum);<br><br></code></pre></td></tr></table></figure><p>运算结果为：<br><img src="/image/s34.png"></p><h1 id="随机生成数字Random"><a href="#随机生成数字Random" class="headerlink" title="随机生成数字Random"></a>随机生成数字Random</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">lucky</span> <span class="hljs-operator">=</span> rand.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//随机生成0~9的整数</span><br></code></pre></td></tr></table></figure><p>针对Random做出以下练习：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">package</span> chap02;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Expr3 &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;<span class="hljs-comment">//void指不需要返回值</span><br>        <span class="hljs-comment">//生成一个0~99的随机整数</span><br>        Random rand = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> lucky = rand.nextInt(<span class="hljs-number">10</span>);<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;今天的幸运数字为&quot;</span> + lucky);<br><br>        <span class="hljs-comment">//生成一个一位数的负整数</span><br>        <span class="hljs-keyword">int</span> negativelucky = -(rand.nextInt(<span class="hljs-number">10</span>));<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的负整数为&quot;</span> + negativelucky);<br><br>        <span class="hljs-comment">//随机生成两位数的正整数</span><br>        <span class="hljs-keyword">int</span> negativelucky2 = <span class="hljs-number">10</span> + rand.nextInt(<span class="hljs-number">90</span>);<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的两位数的整数为&quot;</span> + negativelucky2);<br><br><br>        <span class="hljs-comment">//读入一个整数值，随机生成并显示其正负5范围内的整数值</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;请输入一个整数的值：&quot;</span>);<br>        <span class="hljs-keyword">int</span> a = sc.nextInt();<br>        <span class="hljs-keyword">int</span> randomNumber = a + (rand.nextInt(<span class="hljs-number">11</span>) - <span class="hljs-number">5</span>);<span class="hljs-comment">//随机生成0~10的数减去5范围为-5~5，加上a范围就是a-5~a+5</span><br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的整数是: &quot;</span> + randomNumber);<br><br><br>        <span class="hljs-comment">//随机生成0.0~1.0的实数</span><br>        <span class="hljs-keyword">double</span> c = rand.nextDouble();<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成0.0~1.0的实数：&quot;</span> + c);<br><br>        <span class="hljs-comment">//随机生成0.0~10.0的实数</span><br>        <span class="hljs-keyword">double</span> b = rand.nextDouble() * <span class="hljs-number">10</span>;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成0.0~10.0的实数：&quot;</span> + b);<br><br>        <span class="hljs-comment">//随机生成的-1.0~1.0的实数</span><br>        <span class="hljs-keyword">double</span> d = rand.nextDouble()*<span class="hljs-number">2.0</span>-<span class="hljs-number">1.0</span>;<br>        System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;随机生成的-1.0~1.0的实数为：&quot;</span>+d);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s25.png"></p><h1 id="字符串读入"><a href="#字符串读入" class="headerlink" title="字符串读入"></a>字符串读入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chap02;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Expr4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入字符串1: &quot;</span>);<br>        <br>        String s1=scanner.next();<span class="hljs-comment">//next()读入字符串,但是会被空格分开，空格后的内容不被读入；采用nextLine()不会出现这种情况</span><br>        System.out.println(<span class="hljs-string">&quot;采用next读入的字符串为：&quot;</span>+s1);<br><br><span class="hljs-comment">//        //若下面的内容也存在，用户在输入第一个字符串后直接按回车，nextLine()将会读取一个空字符串，因为next()已经消耗了那个回车符</span><br><span class="hljs-comment">//        System.out.println(&quot;请输入字符串2: &quot;);</span><br><span class="hljs-comment">//        String s2=scanner.nextLine();</span><br><span class="hljs-comment">//        System.out.println(&quot;采用nextLine读入的一行字符串为：&quot;+s2);</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/image/s26.png"><br><strong>注意：next()与nextLine()的异同：</strong></p><ul><li>同：扫描结果都为String型</li><li>异：next()只读取到下一个空白字符为止的内容，不读取空格和制表符；nextLine()则读取从当前位置到换行符之间的所有内容，会读取空格和制表符。</li></ul><p>所以经常遇到一种情况：当程序中两种都有使用时，nextLine()会读取上段代码残留的换行符，导致用户还未输入内容就做出了反应。<br><em><strong>所以在同一个程序中单单只用一种即可,避免出错误</strong></em></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java在控制台上显示字符、注释</title>
    <link href="/2025/02/23/java01/"/>
    <url>/2025/02/23/java01/</url>
    
    <content type="html"><![CDATA[<h1 id="Java说明"><a href="#Java说明" class="headerlink" title="Java说明"></a>Java说明</h1><ul><li>java特点：一起编写，到处运行。因为类文件在任何平台上的JVM上都可以运行</li><li>JDK:java开发工具，包含编译器、各种工具以及JRE</li><li>JRE：java运行环境，包括JVM和各种库</li><li>JVM：java虚拟机</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expr1</span> &#123;<span class="hljs-comment">//类名首字母要大写</span><br><br>    <span class="hljs-comment">//程序的入口，main方法中的语句会依次执行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;This is my first Java program&quot;</span>);<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;This is my second Java program&quot;</span>);<br>        <span class="hljs-comment">// System.out是与控制台相关的流，称为标准输出流</span><br>        <span class="hljs-comment">// println是程序的控件，也称方法，作用是打印输出并换行</span><br>        <span class="hljs-comment">// System.out.println()是在控制台输出信息</span><br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="如何编译和运行程序"><a href="#如何编译和运行程序" class="headerlink" title="如何编译和运行程序"></a>如何编译和运行程序</h1><p>.java文件（源文件）———编译javac———&gt;.class字节码文件（类文件）——运行java——&gt;控制台    </p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释：&#x2F;&#x2F;</li><li>多行注释：①传统注释：&#x2F;<em>…</em>&#x2F;；②文档注释：&#x2F;**…*&#x2F;</li></ul><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><p>字符串拼接直接采用“+”，以后会讲到它的原理toString()方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package chap01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">expr2</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        <span class="hljs-comment">//字符串的拼接采用“+”</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Q:Good Evening! I am fabio. May I take your order?&quot;</span><br>                +<span class="hljs-string">&quot;\n&quot;</span><br>                + <span class="hljs-string">&quot;A:I am working on it. The menu is not even in English.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
